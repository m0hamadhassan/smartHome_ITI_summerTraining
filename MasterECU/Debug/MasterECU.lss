
MasterECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005c02  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002d8  00800060  00005c02  00005c96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800338  00800338  00005f6e  2**0
                  ALLOC
  3 .stab         00005754  00000000  00000000  00005f70  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001bc1  00000000  00000000  0000b6c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000d285  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000d3c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000d535  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000f17e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00010069  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00010e18  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00010f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00011205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000119d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 08 08 	jmp	0x1010	; 0x1010 <__vector_1>
       8:	0c 94 35 08 	jmp	0x106a	; 0x106a <__vector_2>
       c:	0c 94 62 08 	jmp	0x10c4	; 0x10c4 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 37 06 	jmp	0xc6e	; 0xc6e <__vector_12>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e0       	ldi	r30, 0x02	; 2
      68:	fc e5       	ldi	r31, 0x5C	; 92
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 33       	cpi	r26, 0x38	; 56
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a8 e3       	ldi	r26, 0x38	; 56
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 34       	cpi	r26, 0x46	; 70
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9b 2d 	call	0x5b36	; 0x5b36 <main>
      8a:	0c 94 ff 2d 	jmp	0x5bfe	; 0x5bfe <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c8 2d 	jmp	0x5b90	; 0x5b90 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e1       	ldi	r26, 0x18	; 24
     128:	b3 e0       	ldi	r27, 0x03	; 3
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e4 2d 	jmp	0x5bc8	; 0x5bc8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d4 2d 	jmp	0x5ba8	; 0x5ba8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f0 2d 	jmp	0x5be0	; 0x5be0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d4 2d 	jmp	0x5ba8	; 0x5ba8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f0 2d 	jmp	0x5be0	; 0x5be0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c8 2d 	jmp	0x5b90	; 0x5b90 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 e1       	ldi	r24, 0x18	; 24
     496:	93 e0       	ldi	r25, 0x03	; 3
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e4 2d 	jmp	0x5bc8	; 0x5bc8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d4 2d 	jmp	0x5ba8	; 0x5ba8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f0 2d 	jmp	0x5be0	; 0x5be0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d4 2d 	jmp	0x5ba8	; 0x5ba8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f0 2d 	jmp	0x5be0	; 0x5be0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d4 2d 	jmp	0x5ba8	; 0x5ba8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f0 2d 	jmp	0x5be0	; 0x5be0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 d8 2d 	jmp	0x5bb0	; 0x5bb0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 f4 2d 	jmp	0x5be8	; 0x5be8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <SPI_vidInit>:
#include"../../HAL/LCD/LCD_int.h"
#include<util/delay.h>
u8 Global_u8Value = 0;

void SPI_vidInit(SPI_tenuModeSelect Copy_enuSPIMode)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	89 83       	std	Y+1, r24	; 0x01

	/*1- choose wether master or slave*/
	ASSIGN_BIT(SPI_u8_SPCR_REG, SPI_u8_SPCR_MSTR_PIN, Copy_enuSPIMode);
     b52:	ad e2       	ldi	r26, 0x2D	; 45
     b54:	b0 e0       	ldi	r27, 0x00	; 0
     b56:	ed e2       	ldi	r30, 0x2D	; 45
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	80 81       	ld	r24, Z
     b5c:	28 2f       	mov	r18, r24
     b5e:	89 81       	ldd	r24, Y+1	; 0x01
     b60:	88 2f       	mov	r24, r24
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	82 95       	swap	r24
     b66:	92 95       	swap	r25
     b68:	90 7f       	andi	r25, 0xF0	; 240
     b6a:	98 27       	eor	r25, r24
     b6c:	80 7f       	andi	r24, 0xF0	; 240
     b6e:	98 27       	eor	r25, r24
     b70:	82 2b       	or	r24, r18
     b72:	8c 93       	st	X, r24

	/*2- enable SPI interrupt and global interrupt*/
	SET_BIT(SPI_u8_SPCR_REG, SPI_u8_SPCR_SPIE_PIN);
     b74:	ad e2       	ldi	r26, 0x2D	; 45
     b76:	b0 e0       	ldi	r27, 0x00	; 0
     b78:	ed e2       	ldi	r30, 0x2D	; 45
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	80 81       	ld	r24, Z
     b7e:	80 68       	ori	r24, 0x80	; 128
     b80:	8c 93       	st	X, r24
	G_INT_vidEnable();
     b82:	0e 94 52 06 	call	0xca4	; 0xca4 <G_INT_vidEnable>
	/*3- choose data order  */

	ASSIGN_BIT(SPI_u8_SPCR_REG, SPI_u8_SPCR_DORTD_PIN, SPI_u8_DATA_ORDER);
     b86:	ad e2       	ldi	r26, 0x2D	; 45
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	ed e2       	ldi	r30, 0x2D	; 45
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	80 62       	ori	r24, 0x20	; 32
     b92:	8c 93       	st	X, r24
	/*4- choose data mode*/
	ASSIGN_REG(SPI_u8_SPCR_REG, (SPI_u8_DATA_MODE<<2));
     b94:	ad e2       	ldi	r26, 0x2D	; 45
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	ed e2       	ldi	r30, 0x2D	; 45
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	8c 93       	st	X, r24
	/*5- choose prescaler and speed bit*/
	ASSIGN_REG(SPI_u8_SPCR_REG, (SPI_u8_SCK_FREQUENCY&0x03));
     ba0:	ad e2       	ldi	r26, 0x2D	; 45
     ba2:	b0 e0       	ldi	r27, 0x00	; 0
     ba4:	ed e2       	ldi	r30, 0x2D	; 45
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	80 81       	ld	r24, Z
     baa:	83 60       	ori	r24, 0x03	; 3
     bac:	8c 93       	st	X, r24
	ASSIGN_BIT(SPI_u8_SPSR_REG, SPI_u8_SPSR_SPI2X_PIN, 0);
     bae:	ae e2       	ldi	r26, 0x2E	; 46
     bb0:	b0 e0       	ldi	r27, 0x00	; 0
     bb2:	ee e2       	ldi	r30, 0x2E	; 46
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	80 81       	ld	r24, Z
     bb8:	8c 93       	st	X, r24
	/*6- activate SPI enable*/
	SET_BIT(SPI_u8_SPCR_REG, SPI_u8_SPCR_SPE_PIN);
     bba:	ad e2       	ldi	r26, 0x2D	; 45
     bbc:	b0 e0       	ldi	r27, 0x00	; 0
     bbe:	ed e2       	ldi	r30, 0x2D	; 45
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	80 64       	ori	r24, 0x40	; 64
     bc6:	8c 93       	st	X, r24

}
     bc8:	0f 90       	pop	r0
     bca:	cf 91       	pop	r28
     bcc:	df 91       	pop	r29
     bce:	08 95       	ret

00000bd0 <SPI_enuTranscieveAsynch>:
SPI_tenuErrorStatus SPI_enuTranscieveAsynch(u8 *Copy_pu8Value)
{
     bd0:	df 93       	push	r29
     bd2:	cf 93       	push	r28
     bd4:	00 d0       	rcall	.+0      	; 0xbd6 <SPI_enuTranscieveAsynch+0x6>
     bd6:	0f 92       	push	r0
     bd8:	cd b7       	in	r28, 0x3d	; 61
     bda:	de b7       	in	r29, 0x3e	; 62
     bdc:	9a 83       	std	Y+2, r25	; 0x02
     bde:	89 83       	std	Y+1, r24	; 0x01

	SET_BIT(SPI_u8_SPCR_REG, SPI_u8_SPCR_SPIE_PIN);
     be0:	ad e2       	ldi	r26, 0x2D	; 45
     be2:	b0 e0       	ldi	r27, 0x00	; 0
     be4:	ed e2       	ldi	r30, 0x2D	; 45
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	80 81       	ld	r24, Z
     bea:	80 68       	ori	r24, 0x80	; 128
     bec:	8c 93       	st	X, r24
	SPI_u8_SPDR_REG = (*Copy_pu8Value);
     bee:	af e2       	ldi	r26, 0x2F	; 47
     bf0:	b0 e0       	ldi	r27, 0x00	; 0
     bf2:	e9 81       	ldd	r30, Y+1	; 0x01
     bf4:	fa 81       	ldd	r31, Y+2	; 0x02
     bf6:	80 81       	ld	r24, Z
     bf8:	8c 93       	st	X, r24

}
     bfa:	0f 90       	pop	r0
     bfc:	0f 90       	pop	r0
     bfe:	0f 90       	pop	r0
     c00:	cf 91       	pop	r28
     c02:	df 91       	pop	r29
     c04:	08 95       	ret

00000c06 <SPI_enuTranscieveSynch>:

u8 SPI_enuTranscieveSynch(u8 Copy_pu8Value)
{
     c06:	df 93       	push	r29
     c08:	cf 93       	push	r28
     c0a:	0f 92       	push	r0
     c0c:	cd b7       	in	r28, 0x3d	; 61
     c0e:	de b7       	in	r29, 0x3e	; 62
     c10:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(SPI_u8_SPCR_REG, SPI_u8_SPCR_SPIE_PIN);
     c12:	ad e2       	ldi	r26, 0x2D	; 45
     c14:	b0 e0       	ldi	r27, 0x00	; 0
     c16:	ed e2       	ldi	r30, 0x2D	; 45
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	8f 77       	andi	r24, 0x7F	; 127
     c1e:	8c 93       	st	X, r24
	SPI_u8_SPDR_REG = Copy_pu8Value;
     c20:	ef e2       	ldi	r30, 0x2F	; 47
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	89 81       	ldd	r24, Y+1	; 0x01
     c26:	80 83       	st	Z, r24
	while (GET_BIT(SPI_u8_SPSR_REG,SPI_u8_SPSR_SPIF_PIN) == 0)
     c28:	ee e2       	ldi	r30, 0x2E	; 46
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	80 81       	ld	r24, Z
     c2e:	88 23       	and	r24, r24
     c30:	dc f7       	brge	.-10     	; 0xc28 <SPI_enuTranscieveSynch+0x22>
		;
	return SPI_u8_SPDR_REG;
     c32:	ef e2       	ldi	r30, 0x2F	; 47
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
}
     c38:	0f 90       	pop	r0
     c3a:	cf 91       	pop	r28
     c3c:	df 91       	pop	r29
     c3e:	08 95       	ret

00000c40 <SPI_u8RecievedValue>:

u8 SPI_u8RecievedValue(void)
{
     c40:	df 93       	push	r29
     c42:	cf 93       	push	r28
     c44:	cd b7       	in	r28, 0x3d	; 61
     c46:	de b7       	in	r29, 0x3e	; 62
	return Global_u8Value;
     c48:	80 91 38 03 	lds	r24, 0x0338
}
     c4c:	cf 91       	pop	r28
     c4e:	df 91       	pop	r29
     c50:	08 95       	ret

00000c52 <SPI_vidStopConnection>:
void SPI_vidStopConnection(void)
{
     c52:	df 93       	push	r29
     c54:	cf 93       	push	r28
     c56:	cd b7       	in	r28, 0x3d	; 61
     c58:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SPI_u8_SPCR_REG, SPI_u8_SPCR_SPE_PIN);
     c5a:	ad e2       	ldi	r26, 0x2D	; 45
     c5c:	b0 e0       	ldi	r27, 0x00	; 0
     c5e:	ed e2       	ldi	r30, 0x2D	; 45
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	80 81       	ld	r24, Z
     c64:	8f 7b       	andi	r24, 0xBF	; 191
     c66:	8c 93       	st	X, r24
}
     c68:	cf 91       	pop	r28
     c6a:	df 91       	pop	r29
     c6c:	08 95       	ret

00000c6e <__vector_12>:

void __vector_12(void) __attribute((signal,used));
void __vector_12(void)
{
     c6e:	1f 92       	push	r1
     c70:	0f 92       	push	r0
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	0f 92       	push	r0
     c76:	11 24       	eor	r1, r1
     c78:	8f 93       	push	r24
     c7a:	ef 93       	push	r30
     c7c:	ff 93       	push	r31
     c7e:	df 93       	push	r29
     c80:	cf 93       	push	r28
     c82:	cd b7       	in	r28, 0x3d	; 61
     c84:	de b7       	in	r29, 0x3e	; 62

	Global_u8Value = SPI_u8_SPDR_REG;
     c86:	ef e2       	ldi	r30, 0x2F	; 47
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	80 81       	ld	r24, Z
     c8c:	80 93 38 03 	sts	0x0338, r24
}
     c90:	cf 91       	pop	r28
     c92:	df 91       	pop	r29
     c94:	ff 91       	pop	r31
     c96:	ef 91       	pop	r30
     c98:	8f 91       	pop	r24
     c9a:	0f 90       	pop	r0
     c9c:	0f be       	out	0x3f, r0	; 63
     c9e:	0f 90       	pop	r0
     ca0:	1f 90       	pop	r1
     ca2:	18 95       	reti

00000ca4 <G_INT_vidEnable>:
 */

#include"G_INT_prv.h"

void G_INT_vidEnable(void)
{
     ca4:	df 93       	push	r29
     ca6:	cf 93       	push	r28
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(G_INT_u8_SREG_REG, G_INT_u8_SREG_I_PIN);
     cac:	af e5       	ldi	r26, 0x5F	; 95
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	ef e5       	ldi	r30, 0x5F	; 95
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	80 68       	ori	r24, 0x80	; 128
     cb8:	8c 93       	st	X, r24
}
     cba:	cf 91       	pop	r28
     cbc:	df 91       	pop	r29
     cbe:	08 95       	ret

00000cc0 <G_INT_vidDisable>:
void G_INT_vidDisable(void)
{
     cc0:	df 93       	push	r29
     cc2:	cf 93       	push	r28
     cc4:	cd b7       	in	r28, 0x3d	; 61
     cc6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(G_INT_u8_SREG_REG, G_INT_u8_SREG_I_PIN);
     cc8:	af e5       	ldi	r26, 0x5F	; 95
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	ef e5       	ldi	r30, 0x5F	; 95
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	8f 77       	andi	r24, 0x7F	; 127
     cd4:	8c 93       	st	X, r24
}
     cd6:	cf 91       	pop	r28
     cd8:	df 91       	pop	r29
     cda:	08 95       	ret

00000cdc <EXT_INT_vidEnable>:
	func_ptr EXT_INT0_FuncPtr;
	func_ptr EXT_INT1_FuncPtr;
	func_ptr EXT_INT2_FuncPtr;
} EXT_INT_ISR;
EXT_INT_tenuErrorStatus EXT_INT_vidEnable(u8 Copy_u8Interrupt, u8 Copy_u8SenseControl)
{
     cdc:	df 93       	push	r29
     cde:	cf 93       	push	r28
     ce0:	cd b7       	in	r28, 0x3d	; 61
     ce2:	de b7       	in	r29, 0x3e	; 62
     ce4:	2b 97       	sbiw	r28, 0x0b	; 11
     ce6:	0f b6       	in	r0, 0x3f	; 63
     ce8:	f8 94       	cli
     cea:	de bf       	out	0x3e, r29	; 62
     cec:	0f be       	out	0x3f, r0	; 63
     cee:	cd bf       	out	0x3d, r28	; 61
     cf0:	8a 83       	std	Y+2, r24	; 0x02
     cf2:	6b 83       	std	Y+3, r22	; 0x03
	EXT_INT_tenuErrorStatus Local_tenuErrorStatus = EXT_INT_OK;
     cf4:	19 82       	std	Y+1, r1	; 0x01
		Local_tenuErrorStatus = EXT_INT_NOK;

	}
	else
	{
		G_INT_vidEnable();
     cf6:	0e 94 52 06 	call	0xca4	; 0xca4 <G_INT_vidEnable>
		switch (Copy_u8Interrupt)
     cfa:	8a 81       	ldd	r24, Y+2	; 0x02
     cfc:	28 2f       	mov	r18, r24
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	3b 87       	std	Y+11, r19	; 0x0b
     d02:	2a 87       	std	Y+10, r18	; 0x0a
     d04:	8a 85       	ldd	r24, Y+10	; 0x0a
     d06:	9b 85       	ldd	r25, Y+11	; 0x0b
     d08:	81 30       	cpi	r24, 0x01	; 1
     d0a:	91 05       	cpc	r25, r1
     d0c:	09 f4       	brne	.+2      	; 0xd10 <EXT_INT_vidEnable+0x34>
     d0e:	6d c0       	rjmp	.+218    	; 0xdea <EXT_INT_vidEnable+0x10e>
     d10:	2a 85       	ldd	r18, Y+10	; 0x0a
     d12:	3b 85       	ldd	r19, Y+11	; 0x0b
     d14:	22 30       	cpi	r18, 0x02	; 2
     d16:	31 05       	cpc	r19, r1
     d18:	09 f4       	brne	.+2      	; 0xd1c <EXT_INT_vidEnable+0x40>
     d1a:	c9 c0       	rjmp	.+402    	; 0xeae <EXT_INT_vidEnable+0x1d2>
     d1c:	8a 85       	ldd	r24, Y+10	; 0x0a
     d1e:	9b 85       	ldd	r25, Y+11	; 0x0b
     d20:	00 97       	sbiw	r24, 0x00	; 0
     d22:	09 f0       	breq	.+2      	; 0xd26 <EXT_INT_vidEnable+0x4a>
     d24:	e9 c0       	rjmp	.+466    	; 0xef8 <EXT_INT_vidEnable+0x21c>
		{
		case EXT_INT0:

			SET_BIT(EXT_INT_u8_GICR_REG, EXT_INT_u8_GICR_INT0_BIT);
     d26:	ab e5       	ldi	r26, 0x5B	; 91
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	eb e5       	ldi	r30, 0x5B	; 91
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	80 64       	ori	r24, 0x40	; 64
     d32:	8c 93       	st	X, r24
			switch (Copy_u8SenseControl)
     d34:	8b 81       	ldd	r24, Y+3	; 0x03
     d36:	28 2f       	mov	r18, r24
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	39 87       	std	Y+9, r19	; 0x09
     d3c:	28 87       	std	Y+8, r18	; 0x08
     d3e:	88 85       	ldd	r24, Y+8	; 0x08
     d40:	99 85       	ldd	r25, Y+9	; 0x09
     d42:	81 30       	cpi	r24, 0x01	; 1
     d44:	91 05       	cpc	r25, r1
     d46:	21 f1       	breq	.+72     	; 0xd90 <EXT_INT_vidEnable+0xb4>
     d48:	28 85       	ldd	r18, Y+8	; 0x08
     d4a:	39 85       	ldd	r19, Y+9	; 0x09
     d4c:	22 30       	cpi	r18, 0x02	; 2
     d4e:	31 05       	cpc	r19, r1
     d50:	2c f4       	brge	.+10     	; 0xd5c <EXT_INT_vidEnable+0x80>
     d52:	88 85       	ldd	r24, Y+8	; 0x08
     d54:	99 85       	ldd	r25, Y+9	; 0x09
     d56:	00 97       	sbiw	r24, 0x00	; 0
     d58:	61 f0       	breq	.+24     	; 0xd72 <EXT_INT_vidEnable+0x96>
     d5a:	ce c0       	rjmp	.+412    	; 0xef8 <EXT_INT_vidEnable+0x21c>
     d5c:	28 85       	ldd	r18, Y+8	; 0x08
     d5e:	39 85       	ldd	r19, Y+9	; 0x09
     d60:	22 30       	cpi	r18, 0x02	; 2
     d62:	31 05       	cpc	r19, r1
     d64:	99 f1       	breq	.+102    	; 0xdcc <EXT_INT_vidEnable+0xf0>
     d66:	88 85       	ldd	r24, Y+8	; 0x08
     d68:	99 85       	ldd	r25, Y+9	; 0x09
     d6a:	83 30       	cpi	r24, 0x03	; 3
     d6c:	91 05       	cpc	r25, r1
     d6e:	f9 f0       	breq	.+62     	; 0xdae <EXT_INT_vidEnable+0xd2>
     d70:	c3 c0       	rjmp	.+390    	; 0xef8 <EXT_INT_vidEnable+0x21c>
			{
			case EXT_INT_u8_LOW_LEVEL:
				CLR_BIT(EXT_INT_u8_MCUCR_REG, EXT_INT_u8_MCUCR_ISC00_BIT);
     d72:	a5 e5       	ldi	r26, 0x55	; 85
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	e5 e5       	ldi	r30, 0x55	; 85
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	8e 7f       	andi	r24, 0xFE	; 254
     d7e:	8c 93       	st	X, r24
				CLR_BIT(EXT_INT_u8_MCUCR_REG, EXT_INT_u8_MCUCR_ISC01_BIT);
     d80:	a5 e5       	ldi	r26, 0x55	; 85
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	e5 e5       	ldi	r30, 0x55	; 85
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	8d 7f       	andi	r24, 0xFD	; 253
     d8c:	8c 93       	st	X, r24
     d8e:	b4 c0       	rjmp	.+360    	; 0xef8 <EXT_INT_vidEnable+0x21c>
				break;

			case EXT_INT_u8_ANY_CHANGE:
				SET_BIT(EXT_INT_u8_MCUCR_REG, EXT_INT_u8_MCUCR_ISC00_BIT);
     d90:	a5 e5       	ldi	r26, 0x55	; 85
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	e5 e5       	ldi	r30, 0x55	; 85
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	81 60       	ori	r24, 0x01	; 1
     d9c:	8c 93       	st	X, r24
				CLR_BIT(EXT_INT_u8_MCUCR_REG, EXT_INT_u8_MCUCR_ISC01_BIT);
     d9e:	a5 e5       	ldi	r26, 0x55	; 85
     da0:	b0 e0       	ldi	r27, 0x00	; 0
     da2:	e5 e5       	ldi	r30, 0x55	; 85
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	80 81       	ld	r24, Z
     da8:	8d 7f       	andi	r24, 0xFD	; 253
     daa:	8c 93       	st	X, r24
     dac:	a5 c0       	rjmp	.+330    	; 0xef8 <EXT_INT_vidEnable+0x21c>
				break;

			case EXT_INT_u8_FALLING_EDGE:
				CLR_BIT(EXT_INT_u8_MCUCR_REG, EXT_INT_u8_MCUCR_ISC00_BIT);
     dae:	a5 e5       	ldi	r26, 0x55	; 85
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	e5 e5       	ldi	r30, 0x55	; 85
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	8e 7f       	andi	r24, 0xFE	; 254
     dba:	8c 93       	st	X, r24
				SET_BIT(EXT_INT_u8_MCUCR_REG, EXT_INT_u8_MCUCR_ISC01_BIT);
     dbc:	a5 e5       	ldi	r26, 0x55	; 85
     dbe:	b0 e0       	ldi	r27, 0x00	; 0
     dc0:	e5 e5       	ldi	r30, 0x55	; 85
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	82 60       	ori	r24, 0x02	; 2
     dc8:	8c 93       	st	X, r24
     dca:	96 c0       	rjmp	.+300    	; 0xef8 <EXT_INT_vidEnable+0x21c>
				break;

			case EXT_INT_u8_RISING_EDGE:
				SET_BIT(EXT_INT_u8_MCUCR_REG, EXT_INT_u8_MCUCR_ISC00_BIT);
     dcc:	a5 e5       	ldi	r26, 0x55	; 85
     dce:	b0 e0       	ldi	r27, 0x00	; 0
     dd0:	e5 e5       	ldi	r30, 0x55	; 85
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	80 81       	ld	r24, Z
     dd6:	81 60       	ori	r24, 0x01	; 1
     dd8:	8c 93       	st	X, r24
				SET_BIT(EXT_INT_u8_MCUCR_REG, EXT_INT_u8_MCUCR_ISC01_BIT);
     dda:	a5 e5       	ldi	r26, 0x55	; 85
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	e5 e5       	ldi	r30, 0x55	; 85
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	82 60       	ori	r24, 0x02	; 2
     de6:	8c 93       	st	X, r24
     de8:	87 c0       	rjmp	.+270    	; 0xef8 <EXT_INT_vidEnable+0x21c>

			break;

		case EXT_INT1:

			SET_BIT(EXT_INT_u8_GICR_REG, EXT_INT_u8_GICR_INT1_BIT);
     dea:	ab e5       	ldi	r26, 0x5B	; 91
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	eb e5       	ldi	r30, 0x5B	; 91
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	80 68       	ori	r24, 0x80	; 128
     df6:	8c 93       	st	X, r24
			switch (Copy_u8SenseControl)
     df8:	8b 81       	ldd	r24, Y+3	; 0x03
     dfa:	28 2f       	mov	r18, r24
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	3f 83       	std	Y+7, r19	; 0x07
     e00:	2e 83       	std	Y+6, r18	; 0x06
     e02:	8e 81       	ldd	r24, Y+6	; 0x06
     e04:	9f 81       	ldd	r25, Y+7	; 0x07
     e06:	81 30       	cpi	r24, 0x01	; 1
     e08:	91 05       	cpc	r25, r1
     e0a:	21 f1       	breq	.+72     	; 0xe54 <EXT_INT_vidEnable+0x178>
     e0c:	2e 81       	ldd	r18, Y+6	; 0x06
     e0e:	3f 81       	ldd	r19, Y+7	; 0x07
     e10:	22 30       	cpi	r18, 0x02	; 2
     e12:	31 05       	cpc	r19, r1
     e14:	2c f4       	brge	.+10     	; 0xe20 <EXT_INT_vidEnable+0x144>
     e16:	8e 81       	ldd	r24, Y+6	; 0x06
     e18:	9f 81       	ldd	r25, Y+7	; 0x07
     e1a:	00 97       	sbiw	r24, 0x00	; 0
     e1c:	61 f0       	breq	.+24     	; 0xe36 <EXT_INT_vidEnable+0x15a>
     e1e:	6c c0       	rjmp	.+216    	; 0xef8 <EXT_INT_vidEnable+0x21c>
     e20:	2e 81       	ldd	r18, Y+6	; 0x06
     e22:	3f 81       	ldd	r19, Y+7	; 0x07
     e24:	22 30       	cpi	r18, 0x02	; 2
     e26:	31 05       	cpc	r19, r1
     e28:	99 f1       	breq	.+102    	; 0xe90 <EXT_INT_vidEnable+0x1b4>
     e2a:	8e 81       	ldd	r24, Y+6	; 0x06
     e2c:	9f 81       	ldd	r25, Y+7	; 0x07
     e2e:	83 30       	cpi	r24, 0x03	; 3
     e30:	91 05       	cpc	r25, r1
     e32:	f9 f0       	breq	.+62     	; 0xe72 <EXT_INT_vidEnable+0x196>
     e34:	61 c0       	rjmp	.+194    	; 0xef8 <EXT_INT_vidEnable+0x21c>
			{
			case EXT_INT_u8_LOW_LEVEL:
				CLR_BIT(EXT_INT_u8_MCUCR_REG, EXT_INT_u8_MCUCR_ISC10_BIT);
     e36:	a5 e5       	ldi	r26, 0x55	; 85
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e5 e5       	ldi	r30, 0x55	; 85
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	8b 7f       	andi	r24, 0xFB	; 251
     e42:	8c 93       	st	X, r24
				CLR_BIT(EXT_INT_u8_MCUCR_REG, EXT_INT_u8_MCUCR_ISC11_BIT);
     e44:	a5 e5       	ldi	r26, 0x55	; 85
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e5 e5       	ldi	r30, 0x55	; 85
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	87 7f       	andi	r24, 0xF7	; 247
     e50:	8c 93       	st	X, r24
     e52:	52 c0       	rjmp	.+164    	; 0xef8 <EXT_INT_vidEnable+0x21c>
				break;

			case EXT_INT_u8_ANY_CHANGE:
				SET_BIT(EXT_INT_u8_MCUCR_REG, EXT_INT_u8_MCUCR_ISC10_BIT);
     e54:	a5 e5       	ldi	r26, 0x55	; 85
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	e5 e5       	ldi	r30, 0x55	; 85
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	84 60       	ori	r24, 0x04	; 4
     e60:	8c 93       	st	X, r24
				CLR_BIT(EXT_INT_u8_MCUCR_REG, EXT_INT_u8_MCUCR_ISC11_BIT);
     e62:	a5 e5       	ldi	r26, 0x55	; 85
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e5 e5       	ldi	r30, 0x55	; 85
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	87 7f       	andi	r24, 0xF7	; 247
     e6e:	8c 93       	st	X, r24
     e70:	43 c0       	rjmp	.+134    	; 0xef8 <EXT_INT_vidEnable+0x21c>
				break;

			case EXT_INT_u8_FALLING_EDGE:
				CLR_BIT(EXT_INT_u8_MCUCR_REG, EXT_INT_u8_MCUCR_ISC10_BIT);
     e72:	a5 e5       	ldi	r26, 0x55	; 85
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	e5 e5       	ldi	r30, 0x55	; 85
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	8b 7f       	andi	r24, 0xFB	; 251
     e7e:	8c 93       	st	X, r24
				SET_BIT(EXT_INT_u8_MCUCR_REG, EXT_INT_u8_MCUCR_ISC11_BIT);
     e80:	a5 e5       	ldi	r26, 0x55	; 85
     e82:	b0 e0       	ldi	r27, 0x00	; 0
     e84:	e5 e5       	ldi	r30, 0x55	; 85
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	88 60       	ori	r24, 0x08	; 8
     e8c:	8c 93       	st	X, r24
     e8e:	34 c0       	rjmp	.+104    	; 0xef8 <EXT_INT_vidEnable+0x21c>

				break;

			case EXT_INT_u8_RISING_EDGE:
				SET_BIT(EXT_INT_u8_MCUCR_REG, EXT_INT_u8_MCUCR_ISC10_BIT);
     e90:	a5 e5       	ldi	r26, 0x55	; 85
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e5 e5       	ldi	r30, 0x55	; 85
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	84 60       	ori	r24, 0x04	; 4
     e9c:	8c 93       	st	X, r24
				SET_BIT(EXT_INT_u8_MCUCR_REG, EXT_INT_u8_MCUCR_ISC11_BIT);
     e9e:	a5 e5       	ldi	r26, 0x55	; 85
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	e5 e5       	ldi	r30, 0x55	; 85
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	88 60       	ori	r24, 0x08	; 8
     eaa:	8c 93       	st	X, r24
     eac:	25 c0       	rjmp	.+74     	; 0xef8 <EXT_INT_vidEnable+0x21c>

			break;

		case EXT_INT2:

			SET_BIT(EXT_INT_u8_GICR_REG, EXT_INT_u8_GICR_INT2_BIT);
     eae:	ab e5       	ldi	r26, 0x5B	; 91
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	eb e5       	ldi	r30, 0x5B	; 91
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	80 62       	ori	r24, 0x20	; 32
     eba:	8c 93       	st	X, r24
			switch (Copy_u8SenseControl)
     ebc:	8b 81       	ldd	r24, Y+3	; 0x03
     ebe:	28 2f       	mov	r18, r24
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	3d 83       	std	Y+5, r19	; 0x05
     ec4:	2c 83       	std	Y+4, r18	; 0x04
     ec6:	8c 81       	ldd	r24, Y+4	; 0x04
     ec8:	9d 81       	ldd	r25, Y+5	; 0x05
     eca:	82 30       	cpi	r24, 0x02	; 2
     ecc:	91 05       	cpc	r25, r1
     ece:	69 f0       	breq	.+26     	; 0xeea <EXT_INT_vidEnable+0x20e>
     ed0:	2c 81       	ldd	r18, Y+4	; 0x04
     ed2:	3d 81       	ldd	r19, Y+5	; 0x05
     ed4:	23 30       	cpi	r18, 0x03	; 3
     ed6:	31 05       	cpc	r19, r1
     ed8:	79 f4       	brne	.+30     	; 0xef8 <EXT_INT_vidEnable+0x21c>
			{

			case EXT_INT_u8_FALLING_EDGE:
				CLR_BIT(EXT_INT_u8_MCUCSR_REG, EXT_INT_u8_MCUCSR_ISC2_BIT);
     eda:	a4 e5       	ldi	r26, 0x54	; 84
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	e4 e5       	ldi	r30, 0x54	; 84
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	8f 7b       	andi	r24, 0xBF	; 191
     ee6:	8c 93       	st	X, r24
     ee8:	07 c0       	rjmp	.+14     	; 0xef8 <EXT_INT_vidEnable+0x21c>
				break;
			case EXT_INT_u8_RISING_EDGE:
				SET_BIT(EXT_INT_u8_MCUCSR_REG, EXT_INT_u8_MCUCSR_ISC2_BIT);
     eea:	a4 e5       	ldi	r26, 0x54	; 84
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	e4 e5       	ldi	r30, 0x54	; 84
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	80 64       	ori	r24, 0x40	; 64
     ef6:	8c 93       	st	X, r24

			break;

		}
	}
	return Local_tenuErrorStatus;
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
}
     efa:	2b 96       	adiw	r28, 0x0b	; 11
     efc:	0f b6       	in	r0, 0x3f	; 63
     efe:	f8 94       	cli
     f00:	de bf       	out	0x3e, r29	; 62
     f02:	0f be       	out	0x3f, r0	; 63
     f04:	cd bf       	out	0x3d, r28	; 61
     f06:	cf 91       	pop	r28
     f08:	df 91       	pop	r29
     f0a:	08 95       	ret

00000f0c <EXT_INT_vidDisable>:

EXT_INT_tenuErrorStatus EXT_INT_vidDisable(u8 Copy_u8Interrupt)
{
     f0c:	df 93       	push	r29
     f0e:	cf 93       	push	r28
     f10:	00 d0       	rcall	.+0      	; 0xf12 <EXT_INT_vidDisable+0x6>
     f12:	00 d0       	rcall	.+0      	; 0xf14 <EXT_INT_vidDisable+0x8>
     f14:	cd b7       	in	r28, 0x3d	; 61
     f16:	de b7       	in	r29, 0x3e	; 62
     f18:	8a 83       	std	Y+2, r24	; 0x02
	EXT_INT_tenuErrorStatus Local_tenuErrorStatus = EXT_INT_OK;
     f1a:	19 82       	std	Y+1, r1	; 0x01
	{
		Local_tenuErrorStatus = EXT_INT_NOK;
	}
	else
	{
		switch (Copy_u8Interrupt)
     f1c:	8a 81       	ldd	r24, Y+2	; 0x02
     f1e:	28 2f       	mov	r18, r24
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	3c 83       	std	Y+4, r19	; 0x04
     f24:	2b 83       	std	Y+3, r18	; 0x03
     f26:	8b 81       	ldd	r24, Y+3	; 0x03
     f28:	9c 81       	ldd	r25, Y+4	; 0x04
     f2a:	81 30       	cpi	r24, 0x01	; 1
     f2c:	91 05       	cpc	r25, r1
     f2e:	89 f0       	breq	.+34     	; 0xf52 <EXT_INT_vidDisable+0x46>
     f30:	2b 81       	ldd	r18, Y+3	; 0x03
     f32:	3c 81       	ldd	r19, Y+4	; 0x04
     f34:	22 30       	cpi	r18, 0x02	; 2
     f36:	31 05       	cpc	r19, r1
     f38:	a1 f0       	breq	.+40     	; 0xf62 <EXT_INT_vidDisable+0x56>
     f3a:	8b 81       	ldd	r24, Y+3	; 0x03
     f3c:	9c 81       	ldd	r25, Y+4	; 0x04
     f3e:	00 97       	sbiw	r24, 0x00	; 0
     f40:	b9 f4       	brne	.+46     	; 0xf70 <EXT_INT_vidDisable+0x64>
		{
		case EXT_INT0:
			CLR_BIT(EXT_INT_u8_GICR_REG, EXT_INT_u8_GICR_INT0_BIT);
     f42:	ab e5       	ldi	r26, 0x5B	; 91
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	eb e5       	ldi	r30, 0x5B	; 91
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	8f 7b       	andi	r24, 0xBF	; 191
     f4e:	8c 93       	st	X, r24
     f50:	0f c0       	rjmp	.+30     	; 0xf70 <EXT_INT_vidDisable+0x64>
			break;
		case EXT_INT1:
			CLR_BIT(EXT_INT_u8_GICR_REG, EXT_INT_u8_GICR_INT1_BIT);
     f52:	ab e5       	ldi	r26, 0x5B	; 91
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	eb e5       	ldi	r30, 0x5B	; 91
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	8f 77       	andi	r24, 0x7F	; 127
     f5e:	8c 93       	st	X, r24
     f60:	07 c0       	rjmp	.+14     	; 0xf70 <EXT_INT_vidDisable+0x64>
			break;
		case EXT_INT2:
			CLR_BIT(EXT_INT_u8_GICR_REG, EXT_INT_u8_GICR_INT2_BIT);
     f62:	ab e5       	ldi	r26, 0x5B	; 91
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	eb e5       	ldi	r30, 0x5B	; 91
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	8f 7d       	andi	r24, 0xDF	; 223
     f6e:	8c 93       	st	X, r24
			break;
		}
	}
	return Local_tenuErrorStatus;
     f70:	89 81       	ldd	r24, Y+1	; 0x01
}
     f72:	0f 90       	pop	r0
     f74:	0f 90       	pop	r0
     f76:	0f 90       	pop	r0
     f78:	0f 90       	pop	r0
     f7a:	cf 91       	pop	r28
     f7c:	df 91       	pop	r29
     f7e:	08 95       	ret

00000f80 <EXT_INT_vidRegisterCBF>:

void EXT_INT_vidRegisterCBF(u8 Copy_u8Interrupt, func_ptr Add_pfunCBF)
{
     f80:	df 93       	push	r29
     f82:	cf 93       	push	r28
     f84:	00 d0       	rcall	.+0      	; 0xf86 <EXT_INT_vidRegisterCBF+0x6>
     f86:	00 d0       	rcall	.+0      	; 0xf88 <EXT_INT_vidRegisterCBF+0x8>
     f88:	00 d0       	rcall	.+0      	; 0xf8a <EXT_INT_vidRegisterCBF+0xa>
     f8a:	cd b7       	in	r28, 0x3d	; 61
     f8c:	de b7       	in	r29, 0x3e	; 62
     f8e:	8a 83       	std	Y+2, r24	; 0x02
     f90:	7c 83       	std	Y+4, r23	; 0x04
     f92:	6b 83       	std	Y+3, r22	; 0x03
	EXT_INT_tenuErrorStatus Local_tenuErrorStatus = EXT_INT_OK;
     f94:	19 82       	std	Y+1, r1	; 0x01
	static func_ptr Local_pfunPtr;
	Local_pfunPtr = Add_pfunCBF;
     f96:	8b 81       	ldd	r24, Y+3	; 0x03
     f98:	9c 81       	ldd	r25, Y+4	; 0x04
     f9a:	90 93 3a 03 	sts	0x033A, r25
     f9e:	80 93 39 03 	sts	0x0339, r24

	if (Add_pfunCBF == NULL)
     fa2:	8b 81       	ldd	r24, Y+3	; 0x03
     fa4:	9c 81       	ldd	r25, Y+4	; 0x04
     fa6:	00 97       	sbiw	r24, 0x00	; 0
     fa8:	19 f4       	brne	.+6      	; 0xfb0 <EXT_INT_vidRegisterCBF+0x30>
	{
		Local_tenuErrorStatus = EXT_INT_NOK;
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	89 83       	std	Y+1, r24	; 0x01
     fae:	27 c0       	rjmp	.+78     	; 0xffe <EXT_INT_vidRegisterCBF+0x7e>
	}
	else
	{
		switch (Copy_u8Interrupt)
     fb0:	8a 81       	ldd	r24, Y+2	; 0x02
     fb2:	28 2f       	mov	r18, r24
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	3e 83       	std	Y+6, r19	; 0x06
     fb8:	2d 83       	std	Y+5, r18	; 0x05
     fba:	8d 81       	ldd	r24, Y+5	; 0x05
     fbc:	9e 81       	ldd	r25, Y+6	; 0x06
     fbe:	81 30       	cpi	r24, 0x01	; 1
     fc0:	91 05       	cpc	r25, r1
     fc2:	81 f0       	breq	.+32     	; 0xfe4 <EXT_INT_vidRegisterCBF+0x64>
     fc4:	2d 81       	ldd	r18, Y+5	; 0x05
     fc6:	3e 81       	ldd	r19, Y+6	; 0x06
     fc8:	22 30       	cpi	r18, 0x02	; 2
     fca:	31 05       	cpc	r19, r1
     fcc:	91 f0       	breq	.+36     	; 0xff2 <EXT_INT_vidRegisterCBF+0x72>
     fce:	8d 81       	ldd	r24, Y+5	; 0x05
     fd0:	9e 81       	ldd	r25, Y+6	; 0x06
     fd2:	00 97       	sbiw	r24, 0x00	; 0
     fd4:	a1 f4       	brne	.+40     	; 0xffe <EXT_INT_vidRegisterCBF+0x7e>
		{
		case EXT_INT0:
			EXT_INT_ISR.EXT_INT0_FuncPtr = Add_pfunCBF;
     fd6:	8b 81       	ldd	r24, Y+3	; 0x03
     fd8:	9c 81       	ldd	r25, Y+4	; 0x04
     fda:	90 93 41 03 	sts	0x0341, r25
     fde:	80 93 40 03 	sts	0x0340, r24
     fe2:	0d c0       	rjmp	.+26     	; 0xffe <EXT_INT_vidRegisterCBF+0x7e>
			break;
		case EXT_INT1:
			EXT_INT_ISR.EXT_INT1_FuncPtr = Add_pfunCBF;
     fe4:	8b 81       	ldd	r24, Y+3	; 0x03
     fe6:	9c 81       	ldd	r25, Y+4	; 0x04
     fe8:	90 93 43 03 	sts	0x0343, r25
     fec:	80 93 42 03 	sts	0x0342, r24
     ff0:	06 c0       	rjmp	.+12     	; 0xffe <EXT_INT_vidRegisterCBF+0x7e>
			break;
		case EXT_INT2:
			EXT_INT_ISR.EXT_INT2_FuncPtr = Add_pfunCBF;
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	9c 81       	ldd	r25, Y+4	; 0x04
     ff6:	90 93 45 03 	sts	0x0345, r25
     ffa:	80 93 44 03 	sts	0x0344, r24
			break;
		}
	}
}
     ffe:	26 96       	adiw	r28, 0x06	; 6
    1000:	0f b6       	in	r0, 0x3f	; 63
    1002:	f8 94       	cli
    1004:	de bf       	out	0x3e, r29	; 62
    1006:	0f be       	out	0x3f, r0	; 63
    1008:	cd bf       	out	0x3d, r28	; 61
    100a:	cf 91       	pop	r28
    100c:	df 91       	pop	r29
    100e:	08 95       	ret

00001010 <__vector_1>:

/*INT0 ISR*/
void __vector_1(void) __attribute((signal,used));
void __vector_1(void)
{
    1010:	1f 92       	push	r1
    1012:	0f 92       	push	r0
    1014:	0f b6       	in	r0, 0x3f	; 63
    1016:	0f 92       	push	r0
    1018:	11 24       	eor	r1, r1
    101a:	2f 93       	push	r18
    101c:	3f 93       	push	r19
    101e:	4f 93       	push	r20
    1020:	5f 93       	push	r21
    1022:	6f 93       	push	r22
    1024:	7f 93       	push	r23
    1026:	8f 93       	push	r24
    1028:	9f 93       	push	r25
    102a:	af 93       	push	r26
    102c:	bf 93       	push	r27
    102e:	ef 93       	push	r30
    1030:	ff 93       	push	r31
    1032:	df 93       	push	r29
    1034:	cf 93       	push	r28
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
	EXT_INT_ISR.EXT_INT0_FuncPtr();
    103a:	e0 91 40 03 	lds	r30, 0x0340
    103e:	f0 91 41 03 	lds	r31, 0x0341
    1042:	09 95       	icall
}
    1044:	cf 91       	pop	r28
    1046:	df 91       	pop	r29
    1048:	ff 91       	pop	r31
    104a:	ef 91       	pop	r30
    104c:	bf 91       	pop	r27
    104e:	af 91       	pop	r26
    1050:	9f 91       	pop	r25
    1052:	8f 91       	pop	r24
    1054:	7f 91       	pop	r23
    1056:	6f 91       	pop	r22
    1058:	5f 91       	pop	r21
    105a:	4f 91       	pop	r20
    105c:	3f 91       	pop	r19
    105e:	2f 91       	pop	r18
    1060:	0f 90       	pop	r0
    1062:	0f be       	out	0x3f, r0	; 63
    1064:	0f 90       	pop	r0
    1066:	1f 90       	pop	r1
    1068:	18 95       	reti

0000106a <__vector_2>:
/*INT1 ISR*/
void __vector_2(void) __attribute((signal,used));
void __vector_2(void)
{
    106a:	1f 92       	push	r1
    106c:	0f 92       	push	r0
    106e:	0f b6       	in	r0, 0x3f	; 63
    1070:	0f 92       	push	r0
    1072:	11 24       	eor	r1, r1
    1074:	2f 93       	push	r18
    1076:	3f 93       	push	r19
    1078:	4f 93       	push	r20
    107a:	5f 93       	push	r21
    107c:	6f 93       	push	r22
    107e:	7f 93       	push	r23
    1080:	8f 93       	push	r24
    1082:	9f 93       	push	r25
    1084:	af 93       	push	r26
    1086:	bf 93       	push	r27
    1088:	ef 93       	push	r30
    108a:	ff 93       	push	r31
    108c:	df 93       	push	r29
    108e:	cf 93       	push	r28
    1090:	cd b7       	in	r28, 0x3d	; 61
    1092:	de b7       	in	r29, 0x3e	; 62
	EXT_INT_ISR.EXT_INT1_FuncPtr();
    1094:	e0 91 42 03 	lds	r30, 0x0342
    1098:	f0 91 43 03 	lds	r31, 0x0343
    109c:	09 95       	icall
}
    109e:	cf 91       	pop	r28
    10a0:	df 91       	pop	r29
    10a2:	ff 91       	pop	r31
    10a4:	ef 91       	pop	r30
    10a6:	bf 91       	pop	r27
    10a8:	af 91       	pop	r26
    10aa:	9f 91       	pop	r25
    10ac:	8f 91       	pop	r24
    10ae:	7f 91       	pop	r23
    10b0:	6f 91       	pop	r22
    10b2:	5f 91       	pop	r21
    10b4:	4f 91       	pop	r20
    10b6:	3f 91       	pop	r19
    10b8:	2f 91       	pop	r18
    10ba:	0f 90       	pop	r0
    10bc:	0f be       	out	0x3f, r0	; 63
    10be:	0f 90       	pop	r0
    10c0:	1f 90       	pop	r1
    10c2:	18 95       	reti

000010c4 <__vector_3>:
/*INT2 ISR*/
void __vector_3(void) __attribute((signal,used));
void __vector_3(void)
{
    10c4:	1f 92       	push	r1
    10c6:	0f 92       	push	r0
    10c8:	0f b6       	in	r0, 0x3f	; 63
    10ca:	0f 92       	push	r0
    10cc:	11 24       	eor	r1, r1
    10ce:	2f 93       	push	r18
    10d0:	3f 93       	push	r19
    10d2:	4f 93       	push	r20
    10d4:	5f 93       	push	r21
    10d6:	6f 93       	push	r22
    10d8:	7f 93       	push	r23
    10da:	8f 93       	push	r24
    10dc:	9f 93       	push	r25
    10de:	af 93       	push	r26
    10e0:	bf 93       	push	r27
    10e2:	ef 93       	push	r30
    10e4:	ff 93       	push	r31
    10e6:	df 93       	push	r29
    10e8:	cf 93       	push	r28
    10ea:	cd b7       	in	r28, 0x3d	; 61
    10ec:	de b7       	in	r29, 0x3e	; 62
	EXT_INT_ISR.EXT_INT2_FuncPtr();
    10ee:	e0 91 44 03 	lds	r30, 0x0344
    10f2:	f0 91 45 03 	lds	r31, 0x0345
    10f6:	09 95       	icall
}
    10f8:	cf 91       	pop	r28
    10fa:	df 91       	pop	r29
    10fc:	ff 91       	pop	r31
    10fe:	ef 91       	pop	r30
    1100:	bf 91       	pop	r27
    1102:	af 91       	pop	r26
    1104:	9f 91       	pop	r25
    1106:	8f 91       	pop	r24
    1108:	7f 91       	pop	r23
    110a:	6f 91       	pop	r22
    110c:	5f 91       	pop	r21
    110e:	4f 91       	pop	r20
    1110:	3f 91       	pop	r19
    1112:	2f 91       	pop	r18
    1114:	0f 90       	pop	r0
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	0f 90       	pop	r0
    111a:	1f 90       	pop	r1
    111c:	18 95       	reti

0000111e <EEPROM_enuWriteByte>:
 */
#include"EEPROM_int.h"
#include"EEPROM_prv.h"

EEPROM_tenuErrorStatus EEPROM_enuWriteByte(u16 Local_u16Address, u8 Local_u8Data)
{
    111e:	df 93       	push	r29
    1120:	cf 93       	push	r28
    1122:	00 d0       	rcall	.+0      	; 0x1124 <EEPROM_enuWriteByte+0x6>
    1124:	00 d0       	rcall	.+0      	; 0x1126 <EEPROM_enuWriteByte+0x8>
    1126:	cd b7       	in	r28, 0x3d	; 61
    1128:	de b7       	in	r29, 0x3e	; 62
    112a:	9b 83       	std	Y+3, r25	; 0x03
    112c:	8a 83       	std	Y+2, r24	; 0x02
    112e:	6c 83       	std	Y+4, r22	; 0x04
	EEPROM_tenuErrorStatus Local_enuErrorStatus = EEPROM_OK;
    1130:	19 82       	std	Y+1, r1	; 0x01
	{

	}
	else
	{
		while (GET_BIT(EEPROM_u8_EECR_REG, EEPROM_u8_EECR_EEWE_PIN))
    1132:	ec e3       	ldi	r30, 0x3C	; 60
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	86 95       	lsr	r24
    113a:	88 2f       	mov	r24, r24
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	81 70       	andi	r24, 0x01	; 1
    1140:	90 70       	andi	r25, 0x00	; 0
    1142:	88 23       	and	r24, r24
    1144:	b1 f7       	brne	.-20     	; 0x1132 <EEPROM_enuWriteByte+0x14>
			;

		EEPROM_u16_EEAR_REG = Local_u16Address;
    1146:	ee e3       	ldi	r30, 0x3E	; 62
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	8a 81       	ldd	r24, Y+2	; 0x02
    114c:	9b 81       	ldd	r25, Y+3	; 0x03
    114e:	91 83       	std	Z+1, r25	; 0x01
    1150:	80 83       	st	Z, r24

		EEPROM_u8_EEDR_REG = Local_u8Data;
    1152:	ed e3       	ldi	r30, 0x3D	; 61
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	8c 81       	ldd	r24, Y+4	; 0x04
    1158:	80 83       	st	Z, r24

		__asm__
    115a:	e2 9a       	sbi	0x1c, 2	; 28
		(
				"sbi 0x1c, 2;"
		);
		__asm__
    115c:	e1 9a       	sbi	0x1c, 1	; 28
		(
				"sbi 0x1c, 1;"
		);
	}
	return Local_enuErrorStatus;
    115e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1160:	0f 90       	pop	r0
    1162:	0f 90       	pop	r0
    1164:	0f 90       	pop	r0
    1166:	0f 90       	pop	r0
    1168:	cf 91       	pop	r28
    116a:	df 91       	pop	r29
    116c:	08 95       	ret

0000116e <EEPROM_enuWrite2Bytes>:
EEPROM_tenuErrorStatus EEPROM_enuWrite2Bytes(u16 Local_u16Address, u16 Local_u16Data)
{
    116e:	df 93       	push	r29
    1170:	cf 93       	push	r28
    1172:	00 d0       	rcall	.+0      	; 0x1174 <EEPROM_enuWrite2Bytes+0x6>
    1174:	00 d0       	rcall	.+0      	; 0x1176 <EEPROM_enuWrite2Bytes+0x8>
    1176:	0f 92       	push	r0
    1178:	cd b7       	in	r28, 0x3d	; 61
    117a:	de b7       	in	r29, 0x3e	; 62
    117c:	9b 83       	std	Y+3, r25	; 0x03
    117e:	8a 83       	std	Y+2, r24	; 0x02
    1180:	7d 83       	std	Y+5, r23	; 0x05
    1182:	6c 83       	std	Y+4, r22	; 0x04

	EEPROM_tenuErrorStatus Local_enuErrorStatus = EEPROM_OK;
    1184:	19 82       	std	Y+1, r1	; 0x01
	{

	}
	else
	{
		EEPROM_enuWriteByte(Local_u16Address, (u8) (Local_u16Data >> 8));
    1186:	8c 81       	ldd	r24, Y+4	; 0x04
    1188:	9d 81       	ldd	r25, Y+5	; 0x05
    118a:	89 2f       	mov	r24, r25
    118c:	99 27       	eor	r25, r25
    118e:	28 2f       	mov	r18, r24
    1190:	8a 81       	ldd	r24, Y+2	; 0x02
    1192:	9b 81       	ldd	r25, Y+3	; 0x03
    1194:	62 2f       	mov	r22, r18
    1196:	0e 94 8f 08 	call	0x111e	; 0x111e <EEPROM_enuWriteByte>
		EEPROM_enuWriteByte(Local_u16Address + 1, (u8) (Local_u16Data));
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
    119c:	9b 81       	ldd	r25, Y+3	; 0x03
    119e:	01 96       	adiw	r24, 0x01	; 1
    11a0:	2c 81       	ldd	r18, Y+4	; 0x04
    11a2:	62 2f       	mov	r22, r18
    11a4:	0e 94 8f 08 	call	0x111e	; 0x111e <EEPROM_enuWriteByte>

	}
	return Local_enuErrorStatus;
    11a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    11aa:	0f 90       	pop	r0
    11ac:	0f 90       	pop	r0
    11ae:	0f 90       	pop	r0
    11b0:	0f 90       	pop	r0
    11b2:	0f 90       	pop	r0
    11b4:	cf 91       	pop	r28
    11b6:	df 91       	pop	r29
    11b8:	08 95       	ret

000011ba <EEPROM_enuRead2Bytes>:
u16 EEPROM_enuRead2Bytes(u16 Local_u16Address)
{
    11ba:	0f 93       	push	r16
    11bc:	1f 93       	push	r17
    11be:	df 93       	push	r29
    11c0:	cf 93       	push	r28
    11c2:	00 d0       	rcall	.+0      	; 0x11c4 <EEPROM_enuRead2Bytes+0xa>
    11c4:	00 d0       	rcall	.+0      	; 0x11c6 <EEPROM_enuRead2Bytes+0xc>
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
    11ca:	9c 83       	std	Y+4, r25	; 0x04
    11cc:	8b 83       	std	Y+3, r24	; 0x03
	u16 Local_u16Data;
	Local_u16Data = ((EEPROM_enuReadByte(Local_u16Address) << 8) + EEPROM_enuReadByte(Local_u16Address + 1));
    11ce:	8b 81       	ldd	r24, Y+3	; 0x03
    11d0:	9c 81       	ldd	r25, Y+4	; 0x04
    11d2:	0e 94 05 09 	call	0x120a	; 0x120a <EEPROM_enuReadByte>
    11d6:	88 2f       	mov	r24, r24
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	18 2f       	mov	r17, r24
    11dc:	00 27       	eor	r16, r16
    11de:	8b 81       	ldd	r24, Y+3	; 0x03
    11e0:	9c 81       	ldd	r25, Y+4	; 0x04
    11e2:	01 96       	adiw	r24, 0x01	; 1
    11e4:	0e 94 05 09 	call	0x120a	; 0x120a <EEPROM_enuReadByte>
    11e8:	88 2f       	mov	r24, r24
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	80 0f       	add	r24, r16
    11ee:	91 1f       	adc	r25, r17
    11f0:	9a 83       	std	Y+2, r25	; 0x02
    11f2:	89 83       	std	Y+1, r24	; 0x01
	return Local_u16Data;
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
    11f6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	cf 91       	pop	r28
    1202:	df 91       	pop	r29
    1204:	1f 91       	pop	r17
    1206:	0f 91       	pop	r16
    1208:	08 95       	ret

0000120a <EEPROM_enuReadByte>:
u8 EEPROM_enuReadByte(u16 Local_u16Address)
{
    120a:	df 93       	push	r29
    120c:	cf 93       	push	r28
    120e:	00 d0       	rcall	.+0      	; 0x1210 <EEPROM_enuReadByte+0x6>
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
    1214:	9a 83       	std	Y+2, r25	; 0x02
    1216:	89 83       	std	Y+1, r24	; 0x01

	while (GET_BIT(EEPROM_u8_EECR_REG, EEPROM_u8_EECR_EEWE_PIN))
    1218:	ec e3       	ldi	r30, 0x3C	; 60
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	86 95       	lsr	r24
    1220:	88 2f       	mov	r24, r24
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	81 70       	andi	r24, 0x01	; 1
    1226:	90 70       	andi	r25, 0x00	; 0
    1228:	88 23       	and	r24, r24
    122a:	b1 f7       	brne	.-20     	; 0x1218 <EEPROM_enuReadByte+0xe>
		;

	EEPROM_u16_EEAR_REG = Local_u16Address;
    122c:	ee e3       	ldi	r30, 0x3E	; 62
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	89 81       	ldd	r24, Y+1	; 0x01
    1232:	9a 81       	ldd	r25, Y+2	; 0x02
    1234:	91 83       	std	Z+1, r25	; 0x01
    1236:	80 83       	st	Z, r24

	SET_BIT(EEPROM_u8_EECR_REG, EEPROM_u8_EECR_EERE_PIN);
    1238:	ac e3       	ldi	r26, 0x3C	; 60
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	ec e3       	ldi	r30, 0x3C	; 60
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	81 60       	ori	r24, 0x01	; 1
    1244:	8c 93       	st	X, r24

	return EEPROM_u8_EEDR_REG;
    1246:	ed e3       	ldi	r30, 0x3D	; 61
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z

}
    124c:	0f 90       	pop	r0
    124e:	0f 90       	pop	r0
    1250:	cf 91       	pop	r28
    1252:	df 91       	pop	r29
    1254:	08 95       	ret

00001256 <DIO_vidInit>:
 * Description: Initialize all MCU Pins
 * Arguments: 	vid
 * Return :	  	vid
 * */
void DIO_vidInit(void)
{
    1256:	df 93       	push	r29
    1258:	cf 93       	push	r28
    125a:	cd b7       	in	r28, 0x3d	; 61
    125c:	de b7       	in	r29, 0x3e	; 62
#define DIO_u8_INPUT_FLOATING	0
#define DIO_u8_INPUT_PULLUP		0

	/*our beautiful way :) */
	//Set DDR Values
	DIO_u8_DDRA_REG = CONC(DIO_u8_PORTA_PIN7, DIO_u8_PORTA_PIN6, DIO_u8_PORTA_PIN5, DIO_u8_PORTA_PIN4, DIO_u8_PORTA_PIN3, DIO_u8_PORTA_PIN2,
    125e:	ea e3       	ldi	r30, 0x3A	; 58
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	8f e0       	ldi	r24, 0x0F	; 15
    1264:	80 83       	st	Z, r24
			DIO_u8_PORTA_PIN1, DIO_u8_PORTA_PIN0);

	DIO_u8_DDRB_REG = CONC(DIO_u8_PORTB_PIN7, DIO_u8_PORTB_PIN6, DIO_u8_PORTB_PIN5, DIO_u8_PORTB_PIN4, DIO_u8_PORTB_PIN3, DIO_u8_PORTB_PIN2,
    1266:	e7 e3       	ldi	r30, 0x37	; 55
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	83 eb       	ldi	r24, 0xB3	; 179
    126c:	80 83       	st	Z, r24
			DIO_u8_PORTB_PIN1, DIO_u8_PORTB_PIN0);

	DIO_u8_DDRC_REG = CONC(DIO_u8_PORTC_PIN7, DIO_u8_PORTC_PIN6, DIO_u8_PORTC_PIN5, DIO_u8_PORTC_PIN4, DIO_u8_PORTC_PIN3, DIO_u8_PORTC_PIN2,
    126e:	e4 e3       	ldi	r30, 0x34	; 52
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	8f ef       	ldi	r24, 0xFF	; 255
    1274:	80 83       	st	Z, r24
			DIO_u8_PORTC_PIN1, DIO_u8_PORTC_PIN0);

	DIO_u8_DDRD_REG = CONC(DIO_u8_PORTD_PIN7, DIO_u8_PORTD_PIN6, DIO_u8_PORTD_PIN5, DIO_u8_PORTD_PIN4, DIO_u8_PORTD_PIN3, DIO_u8_PORTD_PIN2,
    1276:	e1 e3       	ldi	r30, 0x31	; 49
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	87 ef       	ldi	r24, 0xF7	; 247
    127c:	80 83       	st	Z, r24
#define DIO_u8_OUTPUT_LOW		0
#define DIO_u8_OUTPUT_HIGH		1
#define DIO_u8_INPUT_FLOATING	0
#define DIO_u8_INPUT_PULLUP		1

	DIO_u8_PORTA_REG = CONC(DIO_u8_PORTA_PIN7, DIO_u8_PORTA_PIN6, DIO_u8_PORTA_PIN5, DIO_u8_PORTA_PIN4, DIO_u8_PORTA_PIN3, DIO_u8_PORTA_PIN2,
    127e:	eb e3       	ldi	r30, 0x3B	; 59
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 ef       	ldi	r24, 0xF0	; 240
    1284:	80 83       	st	Z, r24
			DIO_u8_PORTA_PIN1, DIO_u8_PORTA_PIN0);

	DIO_u8_PORTB_REG = CONC(DIO_u8_PORTB_PIN7, DIO_u8_PORTB_PIN6, DIO_u8_PORTB_PIN5, DIO_u8_PORTB_PIN4, DIO_u8_PORTB_PIN3, DIO_u8_PORTB_PIN2,
    1286:	e8 e3       	ldi	r30, 0x38	; 56
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	8f e0       	ldi	r24, 0x0F	; 15
    128c:	80 83       	st	Z, r24
			DIO_u8_PORTB_PIN1, DIO_u8_PORTB_PIN0);

	DIO_u8_PORTC_REG = CONC(DIO_u8_PORTC_PIN7, DIO_u8_PORTC_PIN6, DIO_u8_PORTC_PIN5, DIO_u8_PORTC_PIN4, DIO_u8_PORTC_PIN3, DIO_u8_PORTC_PIN2,
    128e:	e5 e3       	ldi	r30, 0x35	; 53
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	10 82       	st	Z, r1
			DIO_u8_PORTC_PIN1, DIO_u8_PORTC_PIN0);

	DIO_u8_PORTD_REG = CONC(DIO_u8_PORTD_PIN7, DIO_u8_PORTD_PIN6, DIO_u8_PORTD_PIN5, DIO_u8_PORTD_PIN4, DIO_u8_PORTD_PIN3, DIO_u8_PORTD_PIN2,
    1294:	e2 e3       	ldi	r30, 0x32	; 50
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	88 e0       	ldi	r24, 0x08	; 8
    129a:	80 83       	st	Z, r24
#define DIO_u8_OUTPUT_LOW		0
#define DIO_u8_OUTPUT_HIGH		1
#define DIO_u8_INPUT_FLOATING	2
#define DIO_u8_INPUT_PULLUP		3

}
    129c:	cf 91       	pop	r28
    129e:	df 91       	pop	r29
    12a0:	08 95       	ret

000012a2 <DIO_enuSetPinValue>:
 * 			    Second Argument : Copy_u8Pin,     options(from DIO_u8_PIN0 to DIO_u8_PIN7)
 * 			    Third  Argument : Copy_u8Value,   options()
 * Return :		Error Status --> DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    12a2:	df 93       	push	r29
    12a4:	cf 93       	push	r28
    12a6:	cd b7       	in	r28, 0x3d	; 61
    12a8:	de b7       	in	r29, 0x3e	; 62
    12aa:	2e 97       	sbiw	r28, 0x0e	; 14
    12ac:	0f b6       	in	r0, 0x3f	; 63
    12ae:	f8 94       	cli
    12b0:	de bf       	out	0x3e, r29	; 62
    12b2:	0f be       	out	0x3f, r0	; 63
    12b4:	cd bf       	out	0x3d, r28	; 61
    12b6:	8a 83       	std	Y+2, r24	; 0x02
    12b8:	6b 83       	std	Y+3, r22	; 0x03
    12ba:	4c 83       	std	Y+4, r20	; 0x04
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
    12bc:	19 82       	std	Y+1, r1	; 0x01
	/*Check Args*/

	if ((Copy_u8Port > DIO_u8_PORTD) || (Copy_u8Pin > DIO_u8_PIN7) || (Copy_u8Value > DIO_u8_HIGH))
    12be:	8a 81       	ldd	r24, Y+2	; 0x02
    12c0:	84 30       	cpi	r24, 0x04	; 4
    12c2:	30 f4       	brcc	.+12     	; 0x12d0 <DIO_enuSetPinValue+0x2e>
    12c4:	8b 81       	ldd	r24, Y+3	; 0x03
    12c6:	88 30       	cpi	r24, 0x08	; 8
    12c8:	18 f4       	brcc	.+6      	; 0x12d0 <DIO_enuSetPinValue+0x2e>
    12ca:	8c 81       	ldd	r24, Y+4	; 0x04
    12cc:	82 30       	cpi	r24, 0x02	; 2
    12ce:	18 f0       	brcs	.+6      	; 0x12d6 <DIO_enuSetPinValue+0x34>
	{
		Local_enuErrorStatus = DIO_NOK;
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	89 83       	std	Y+1, r24	; 0x01
    12d4:	d7 c0       	rjmp	.+430    	; 0x1484 <DIO_enuSetPinValue+0x1e2>
	}
	else
	{
		/*Implementation*/

		switch (Copy_u8Port)
    12d6:	8a 81       	ldd	r24, Y+2	; 0x02
    12d8:	28 2f       	mov	r18, r24
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	3e 87       	std	Y+14, r19	; 0x0e
    12de:	2d 87       	std	Y+13, r18	; 0x0d
    12e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    12e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    12e4:	81 30       	cpi	r24, 0x01	; 1
    12e6:	91 05       	cpc	r25, r1
    12e8:	09 f4       	brne	.+2      	; 0x12ec <DIO_enuSetPinValue+0x4a>
    12ea:	44 c0       	rjmp	.+136    	; 0x1374 <DIO_enuSetPinValue+0xd2>
    12ec:	2d 85       	ldd	r18, Y+13	; 0x0d
    12ee:	3e 85       	ldd	r19, Y+14	; 0x0e
    12f0:	22 30       	cpi	r18, 0x02	; 2
    12f2:	31 05       	cpc	r19, r1
    12f4:	2c f4       	brge	.+10     	; 0x1300 <DIO_enuSetPinValue+0x5e>
    12f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    12f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    12fa:	00 97       	sbiw	r24, 0x00	; 0
    12fc:	71 f0       	breq	.+28     	; 0x131a <DIO_enuSetPinValue+0x78>
    12fe:	c2 c0       	rjmp	.+388    	; 0x1484 <DIO_enuSetPinValue+0x1e2>
    1300:	2d 85       	ldd	r18, Y+13	; 0x0d
    1302:	3e 85       	ldd	r19, Y+14	; 0x0e
    1304:	22 30       	cpi	r18, 0x02	; 2
    1306:	31 05       	cpc	r19, r1
    1308:	09 f4       	brne	.+2      	; 0x130c <DIO_enuSetPinValue+0x6a>
    130a:	62 c0       	rjmp	.+196    	; 0x13d0 <DIO_enuSetPinValue+0x12e>
    130c:	8d 85       	ldd	r24, Y+13	; 0x0d
    130e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1310:	83 30       	cpi	r24, 0x03	; 3
    1312:	91 05       	cpc	r25, r1
    1314:	09 f4       	brne	.+2      	; 0x1318 <DIO_enuSetPinValue+0x76>
    1316:	89 c0       	rjmp	.+274    	; 0x142a <DIO_enuSetPinValue+0x188>
    1318:	b5 c0       	rjmp	.+362    	; 0x1484 <DIO_enuSetPinValue+0x1e2>
		{
		case DIO_u8_PORTA:
			(Copy_u8Value == DIO_u8_HIGH) ? (DIO_u8_PORTA_REG |= (1 << Copy_u8Pin)) : (DIO_u8_PORTA_REG &= ~(1 << Copy_u8Pin));
    131a:	8c 81       	ldd	r24, Y+4	; 0x04
    131c:	81 30       	cpi	r24, 0x01	; 1
    131e:	a9 f4       	brne	.+42     	; 0x134a <DIO_enuSetPinValue+0xa8>
    1320:	ab e3       	ldi	r26, 0x3B	; 59
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	eb e3       	ldi	r30, 0x3B	; 59
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	48 2f       	mov	r20, r24
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	28 2f       	mov	r18, r24
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	02 2e       	mov	r0, r18
    1338:	02 c0       	rjmp	.+4      	; 0x133e <DIO_enuSetPinValue+0x9c>
    133a:	88 0f       	add	r24, r24
    133c:	99 1f       	adc	r25, r25
    133e:	0a 94       	dec	r0
    1340:	e2 f7       	brpl	.-8      	; 0x133a <DIO_enuSetPinValue+0x98>
    1342:	84 2b       	or	r24, r20
    1344:	8c 93       	st	X, r24
    1346:	9c 91       	ld	r25, X
    1348:	9d c0       	rjmp	.+314    	; 0x1484 <DIO_enuSetPinValue+0x1e2>
    134a:	ab e3       	ldi	r26, 0x3B	; 59
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	eb e3       	ldi	r30, 0x3B	; 59
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	48 2f       	mov	r20, r24
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	28 2f       	mov	r18, r24
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	02 c0       	rjmp	.+4      	; 0x1366 <DIO_enuSetPinValue+0xc4>
    1362:	88 0f       	add	r24, r24
    1364:	99 1f       	adc	r25, r25
    1366:	2a 95       	dec	r18
    1368:	e2 f7       	brpl	.-8      	; 0x1362 <DIO_enuSetPinValue+0xc0>
    136a:	80 95       	com	r24
    136c:	84 23       	and	r24, r20
    136e:	8c 93       	st	X, r24
    1370:	2c 91       	ld	r18, X
    1372:	88 c0       	rjmp	.+272    	; 0x1484 <DIO_enuSetPinValue+0x1e2>
			break;

		case DIO_u8_PORTB:
			(Copy_u8Value == DIO_u8_HIGH) ? (DIO_u8_PORTB_REG |= (1 << Copy_u8Pin)) : (DIO_u8_PORTB_REG &= ~(1 << Copy_u8Pin));
    1374:	8c 81       	ldd	r24, Y+4	; 0x04
    1376:	81 30       	cpi	r24, 0x01	; 1
    1378:	a9 f4       	brne	.+42     	; 0x13a4 <DIO_enuSetPinValue+0x102>
    137a:	a8 e3       	ldi	r26, 0x38	; 56
    137c:	b0 e0       	ldi	r27, 0x00	; 0
    137e:	e8 e3       	ldi	r30, 0x38	; 56
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	80 81       	ld	r24, Z
    1384:	48 2f       	mov	r20, r24
    1386:	8b 81       	ldd	r24, Y+3	; 0x03
    1388:	28 2f       	mov	r18, r24
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	02 2e       	mov	r0, r18
    1392:	02 c0       	rjmp	.+4      	; 0x1398 <DIO_enuSetPinValue+0xf6>
    1394:	88 0f       	add	r24, r24
    1396:	99 1f       	adc	r25, r25
    1398:	0a 94       	dec	r0
    139a:	e2 f7       	brpl	.-8      	; 0x1394 <DIO_enuSetPinValue+0xf2>
    139c:	84 2b       	or	r24, r20
    139e:	8c 93       	st	X, r24
    13a0:	3c 91       	ld	r19, X
    13a2:	70 c0       	rjmp	.+224    	; 0x1484 <DIO_enuSetPinValue+0x1e2>
    13a4:	a8 e3       	ldi	r26, 0x38	; 56
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	e8 e3       	ldi	r30, 0x38	; 56
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	48 2f       	mov	r20, r24
    13b0:	8b 81       	ldd	r24, Y+3	; 0x03
    13b2:	28 2f       	mov	r18, r24
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	02 2e       	mov	r0, r18
    13bc:	02 c0       	rjmp	.+4      	; 0x13c2 <DIO_enuSetPinValue+0x120>
    13be:	88 0f       	add	r24, r24
    13c0:	99 1f       	adc	r25, r25
    13c2:	0a 94       	dec	r0
    13c4:	e2 f7       	brpl	.-8      	; 0x13be <DIO_enuSetPinValue+0x11c>
    13c6:	80 95       	com	r24
    13c8:	84 23       	and	r24, r20
    13ca:	8c 93       	st	X, r24
    13cc:	8c 91       	ld	r24, X
    13ce:	5a c0       	rjmp	.+180    	; 0x1484 <DIO_enuSetPinValue+0x1e2>

			break;

		case DIO_u8_PORTC:
			(Copy_u8Value == DIO_u8_HIGH) ? (DIO_u8_PORTC_REG |= (1 << Copy_u8Pin)) : (DIO_u8_PORTC_REG &= ~(1 << Copy_u8Pin));
    13d0:	8c 81       	ldd	r24, Y+4	; 0x04
    13d2:	81 30       	cpi	r24, 0x01	; 1
    13d4:	a9 f4       	brne	.+42     	; 0x1400 <DIO_enuSetPinValue+0x15e>
    13d6:	a5 e3       	ldi	r26, 0x35	; 53
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	e5 e3       	ldi	r30, 0x35	; 53
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	48 2f       	mov	r20, r24
    13e2:	8b 81       	ldd	r24, Y+3	; 0x03
    13e4:	28 2f       	mov	r18, r24
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	02 2e       	mov	r0, r18
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <DIO_enuSetPinValue+0x152>
    13f0:	88 0f       	add	r24, r24
    13f2:	99 1f       	adc	r25, r25
    13f4:	0a 94       	dec	r0
    13f6:	e2 f7       	brpl	.-8      	; 0x13f0 <DIO_enuSetPinValue+0x14e>
    13f8:	84 2b       	or	r24, r20
    13fa:	8c 93       	st	X, r24
    13fc:	9c 91       	ld	r25, X
    13fe:	42 c0       	rjmp	.+132    	; 0x1484 <DIO_enuSetPinValue+0x1e2>
    1400:	a5 e3       	ldi	r26, 0x35	; 53
    1402:	b0 e0       	ldi	r27, 0x00	; 0
    1404:	e5 e3       	ldi	r30, 0x35	; 53
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	80 81       	ld	r24, Z
    140a:	48 2f       	mov	r20, r24
    140c:	8b 81       	ldd	r24, Y+3	; 0x03
    140e:	28 2f       	mov	r18, r24
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	02 c0       	rjmp	.+4      	; 0x141c <DIO_enuSetPinValue+0x17a>
    1418:	88 0f       	add	r24, r24
    141a:	99 1f       	adc	r25, r25
    141c:	2a 95       	dec	r18
    141e:	e2 f7       	brpl	.-8      	; 0x1418 <DIO_enuSetPinValue+0x176>
    1420:	80 95       	com	r24
    1422:	84 23       	and	r24, r20
    1424:	8c 93       	st	X, r24
    1426:	2c 91       	ld	r18, X
    1428:	2d c0       	rjmp	.+90     	; 0x1484 <DIO_enuSetPinValue+0x1e2>

			break;

		case DIO_u8_PORTD:
			(Copy_u8Value == DIO_u8_HIGH) ? (DIO_u8_PORTD_REG |= (1 << Copy_u8Pin)) : (DIO_u8_PORTD_REG &= ~(1 << Copy_u8Pin));
    142a:	8c 81       	ldd	r24, Y+4	; 0x04
    142c:	81 30       	cpi	r24, 0x01	; 1
    142e:	a9 f4       	brne	.+42     	; 0x145a <DIO_enuSetPinValue+0x1b8>
    1430:	a2 e3       	ldi	r26, 0x32	; 50
    1432:	b0 e0       	ldi	r27, 0x00	; 0
    1434:	e2 e3       	ldi	r30, 0x32	; 50
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	48 2f       	mov	r20, r24
    143c:	8b 81       	ldd	r24, Y+3	; 0x03
    143e:	28 2f       	mov	r18, r24
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	02 2e       	mov	r0, r18
    1448:	02 c0       	rjmp	.+4      	; 0x144e <DIO_enuSetPinValue+0x1ac>
    144a:	88 0f       	add	r24, r24
    144c:	99 1f       	adc	r25, r25
    144e:	0a 94       	dec	r0
    1450:	e2 f7       	brpl	.-8      	; 0x144a <DIO_enuSetPinValue+0x1a8>
    1452:	84 2b       	or	r24, r20
    1454:	8c 93       	st	X, r24
    1456:	3c 91       	ld	r19, X
    1458:	15 c0       	rjmp	.+42     	; 0x1484 <DIO_enuSetPinValue+0x1e2>
    145a:	a2 e3       	ldi	r26, 0x32	; 50
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	e2 e3       	ldi	r30, 0x32	; 50
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	48 2f       	mov	r20, r24
    1466:	8b 81       	ldd	r24, Y+3	; 0x03
    1468:	28 2f       	mov	r18, r24
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	02 2e       	mov	r0, r18
    1472:	02 c0       	rjmp	.+4      	; 0x1478 <DIO_enuSetPinValue+0x1d6>
    1474:	88 0f       	add	r24, r24
    1476:	99 1f       	adc	r25, r25
    1478:	0a 94       	dec	r0
    147a:	e2 f7       	brpl	.-8      	; 0x1474 <DIO_enuSetPinValue+0x1d2>
    147c:	80 95       	com	r24
    147e:	84 23       	and	r24, r20
    1480:	8c 93       	st	X, r24
    1482:	8c 91       	ld	r24, X
		}

		/*empty*/
		//asm("NOP");
	}
	return Local_enuErrorStatus;
    1484:	89 81       	ldd	r24, Y+1	; 0x01

}
    1486:	2e 96       	adiw	r28, 0x0e	; 14
    1488:	0f b6       	in	r0, 0x3f	; 63
    148a:	f8 94       	cli
    148c:	de bf       	out	0x3e, r29	; 62
    148e:	0f be       	out	0x3f, r0	; 63
    1490:	cd bf       	out	0x3d, r28	; 61
    1492:	cf 91       	pop	r28
    1494:	df 91       	pop	r29
    1496:	08 95       	ret

00001498 <DIO_enuGetPinValue>:
 * 			    Second Argument : Copy_u8Pin,     options(from DIO_u8_PIN0 to DIO_u8_PIN7)
 * 			    Third  Argument : Add_pu8PinValue,   Variable Address to store pin value
 * Return :		Error Status --> DIO_OK , DIO_NOK
 * */
DIO_tenuErrorStatus DIO_enuGetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 *Add_pu8PinValue)
{
    1498:	df 93       	push	r29
    149a:	cf 93       	push	r28
    149c:	cd b7       	in	r28, 0x3d	; 61
    149e:	de b7       	in	r29, 0x3e	; 62
    14a0:	27 97       	sbiw	r28, 0x07	; 7
    14a2:	0f b6       	in	r0, 0x3f	; 63
    14a4:	f8 94       	cli
    14a6:	de bf       	out	0x3e, r29	; 62
    14a8:	0f be       	out	0x3f, r0	; 63
    14aa:	cd bf       	out	0x3d, r28	; 61
    14ac:	8a 83       	std	Y+2, r24	; 0x02
    14ae:	6b 83       	std	Y+3, r22	; 0x03
    14b0:	5d 83       	std	Y+5, r21	; 0x05
    14b2:	4c 83       	std	Y+4, r20	; 0x04
	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
    14b4:	19 82       	std	Y+1, r1	; 0x01
	/*Check Args*/

	if ((Copy_u8Port > DIO_u8_PORTD) || (Copy_u8Pin > DIO_u8_PIN7) || (Add_pu8PinValue == NULL))
    14b6:	8a 81       	ldd	r24, Y+2	; 0x02
    14b8:	84 30       	cpi	r24, 0x04	; 4
    14ba:	38 f4       	brcc	.+14     	; 0x14ca <DIO_enuGetPinValue+0x32>
    14bc:	8b 81       	ldd	r24, Y+3	; 0x03
    14be:	88 30       	cpi	r24, 0x08	; 8
    14c0:	20 f4       	brcc	.+8      	; 0x14ca <DIO_enuGetPinValue+0x32>
    14c2:	8c 81       	ldd	r24, Y+4	; 0x04
    14c4:	9d 81       	ldd	r25, Y+5	; 0x05
    14c6:	00 97       	sbiw	r24, 0x00	; 0
    14c8:	19 f4       	brne	.+6      	; 0x14d0 <DIO_enuGetPinValue+0x38>
	{
		Local_enuErrorStatus = DIO_NOK;
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	89 83       	std	Y+1, r24	; 0x01
    14ce:	70 c0       	rjmp	.+224    	; 0x15b0 <DIO_enuGetPinValue+0x118>
	}
	else
	{
		/*Implementation*/

		switch (Copy_u8Port)
    14d0:	8a 81       	ldd	r24, Y+2	; 0x02
    14d2:	28 2f       	mov	r18, r24
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	3f 83       	std	Y+7, r19	; 0x07
    14d8:	2e 83       	std	Y+6, r18	; 0x06
    14da:	4e 81       	ldd	r20, Y+6	; 0x06
    14dc:	5f 81       	ldd	r21, Y+7	; 0x07
    14de:	41 30       	cpi	r20, 0x01	; 1
    14e0:	51 05       	cpc	r21, r1
    14e2:	59 f1       	breq	.+86     	; 0x153a <DIO_enuGetPinValue+0xa2>
    14e4:	8e 81       	ldd	r24, Y+6	; 0x06
    14e6:	9f 81       	ldd	r25, Y+7	; 0x07
    14e8:	82 30       	cpi	r24, 0x02	; 2
    14ea:	91 05       	cpc	r25, r1
    14ec:	34 f4       	brge	.+12     	; 0x14fa <DIO_enuGetPinValue+0x62>
    14ee:	2e 81       	ldd	r18, Y+6	; 0x06
    14f0:	3f 81       	ldd	r19, Y+7	; 0x07
    14f2:	21 15       	cp	r18, r1
    14f4:	31 05       	cpc	r19, r1
    14f6:	69 f0       	breq	.+26     	; 0x1512 <DIO_enuGetPinValue+0x7a>
    14f8:	5b c0       	rjmp	.+182    	; 0x15b0 <DIO_enuGetPinValue+0x118>
    14fa:	4e 81       	ldd	r20, Y+6	; 0x06
    14fc:	5f 81       	ldd	r21, Y+7	; 0x07
    14fe:	42 30       	cpi	r20, 0x02	; 2
    1500:	51 05       	cpc	r21, r1
    1502:	79 f1       	breq	.+94     	; 0x1562 <DIO_enuGetPinValue+0xca>
    1504:	8e 81       	ldd	r24, Y+6	; 0x06
    1506:	9f 81       	ldd	r25, Y+7	; 0x07
    1508:	83 30       	cpi	r24, 0x03	; 3
    150a:	91 05       	cpc	r25, r1
    150c:	09 f4       	brne	.+2      	; 0x1510 <DIO_enuGetPinValue+0x78>
    150e:	3d c0       	rjmp	.+122    	; 0x158a <DIO_enuGetPinValue+0xf2>
    1510:	4f c0       	rjmp	.+158    	; 0x15b0 <DIO_enuGetPinValue+0x118>
		{
		case DIO_u8_PORTA:
			*Add_pu8PinValue = (DIO_u8_PINA_REG >> Copy_u8Pin) & 0x01;
    1512:	e9 e3       	ldi	r30, 0x39	; 57
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	28 2f       	mov	r18, r24
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	8b 81       	ldd	r24, Y+3	; 0x03
    151e:	88 2f       	mov	r24, r24
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	a9 01       	movw	r20, r18
    1524:	02 c0       	rjmp	.+4      	; 0x152a <DIO_enuGetPinValue+0x92>
    1526:	55 95       	asr	r21
    1528:	47 95       	ror	r20
    152a:	8a 95       	dec	r24
    152c:	e2 f7       	brpl	.-8      	; 0x1526 <DIO_enuGetPinValue+0x8e>
    152e:	ca 01       	movw	r24, r20
    1530:	81 70       	andi	r24, 0x01	; 1
    1532:	ec 81       	ldd	r30, Y+4	; 0x04
    1534:	fd 81       	ldd	r31, Y+5	; 0x05
    1536:	80 83       	st	Z, r24
    1538:	3b c0       	rjmp	.+118    	; 0x15b0 <DIO_enuGetPinValue+0x118>
			break;

		case DIO_u8_PORTB:
			*Add_pu8PinValue = (DIO_u8_PINB_REG >> Copy_u8Pin) & 0x01;
    153a:	e6 e3       	ldi	r30, 0x36	; 54
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	28 2f       	mov	r18, r24
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	8b 81       	ldd	r24, Y+3	; 0x03
    1546:	88 2f       	mov	r24, r24
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	a9 01       	movw	r20, r18
    154c:	02 c0       	rjmp	.+4      	; 0x1552 <DIO_enuGetPinValue+0xba>
    154e:	55 95       	asr	r21
    1550:	47 95       	ror	r20
    1552:	8a 95       	dec	r24
    1554:	e2 f7       	brpl	.-8      	; 0x154e <DIO_enuGetPinValue+0xb6>
    1556:	ca 01       	movw	r24, r20
    1558:	81 70       	andi	r24, 0x01	; 1
    155a:	ec 81       	ldd	r30, Y+4	; 0x04
    155c:	fd 81       	ldd	r31, Y+5	; 0x05
    155e:	80 83       	st	Z, r24
    1560:	27 c0       	rjmp	.+78     	; 0x15b0 <DIO_enuGetPinValue+0x118>
			break;

		case DIO_u8_PORTC:
			*Add_pu8PinValue = (DIO_u8_PINC_REG >> Copy_u8Pin) & 0x01;
    1562:	e3 e3       	ldi	r30, 0x33	; 51
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	28 2f       	mov	r18, r24
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	8b 81       	ldd	r24, Y+3	; 0x03
    156e:	88 2f       	mov	r24, r24
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	a9 01       	movw	r20, r18
    1574:	02 c0       	rjmp	.+4      	; 0x157a <DIO_enuGetPinValue+0xe2>
    1576:	55 95       	asr	r21
    1578:	47 95       	ror	r20
    157a:	8a 95       	dec	r24
    157c:	e2 f7       	brpl	.-8      	; 0x1576 <DIO_enuGetPinValue+0xde>
    157e:	ca 01       	movw	r24, r20
    1580:	81 70       	andi	r24, 0x01	; 1
    1582:	ec 81       	ldd	r30, Y+4	; 0x04
    1584:	fd 81       	ldd	r31, Y+5	; 0x05
    1586:	80 83       	st	Z, r24
    1588:	13 c0       	rjmp	.+38     	; 0x15b0 <DIO_enuGetPinValue+0x118>
			break;

		case DIO_u8_PORTD:
			*Add_pu8PinValue = (DIO_u8_PIND_REG >> Copy_u8Pin) & 0x01;
    158a:	e0 e3       	ldi	r30, 0x30	; 48
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	28 2f       	mov	r18, r24
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	8b 81       	ldd	r24, Y+3	; 0x03
    1596:	88 2f       	mov	r24, r24
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	a9 01       	movw	r20, r18
    159c:	02 c0       	rjmp	.+4      	; 0x15a2 <DIO_enuGetPinValue+0x10a>
    159e:	55 95       	asr	r21
    15a0:	47 95       	ror	r20
    15a2:	8a 95       	dec	r24
    15a4:	e2 f7       	brpl	.-8      	; 0x159e <DIO_enuGetPinValue+0x106>
    15a6:	ca 01       	movw	r24, r20
    15a8:	81 70       	andi	r24, 0x01	; 1
    15aa:	ec 81       	ldd	r30, Y+4	; 0x04
    15ac:	fd 81       	ldd	r31, Y+5	; 0x05
    15ae:	80 83       	st	Z, r24
		}

		/*empty*/
		//asm("NOP");
	}
	return Local_enuErrorStatus;
    15b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    15b2:	27 96       	adiw	r28, 0x07	; 7
    15b4:	0f b6       	in	r0, 0x3f	; 63
    15b6:	f8 94       	cli
    15b8:	de bf       	out	0x3e, r29	; 62
    15ba:	0f be       	out	0x3f, r0	; 63
    15bc:	cd bf       	out	0x3d, r28	; 61
    15be:	cf 91       	pop	r28
    15c0:	df 91       	pop	r29
    15c2:	08 95       	ret

000015c4 <DIO_enuGetPortValue>:
 * 			    Third  Argument : Add_pu8PortValue	Variable Address to store port value
 * Return :		Error Status --> DIO_OK , DIO_NOK
 * */

DIO_tenuErrorStatus DIO_enuGetPortValue(u8 Copy_u8Port, u8 *Add_pu8PortValue)
{
    15c4:	df 93       	push	r29
    15c6:	cf 93       	push	r28
    15c8:	00 d0       	rcall	.+0      	; 0x15ca <DIO_enuGetPortValue+0x6>
    15ca:	00 d0       	rcall	.+0      	; 0x15cc <DIO_enuGetPortValue+0x8>
    15cc:	00 d0       	rcall	.+0      	; 0x15ce <DIO_enuGetPortValue+0xa>
    15ce:	cd b7       	in	r28, 0x3d	; 61
    15d0:	de b7       	in	r29, 0x3e	; 62
    15d2:	8a 83       	std	Y+2, r24	; 0x02
    15d4:	7c 83       	std	Y+4, r23	; 0x04
    15d6:	6b 83       	std	Y+3, r22	; 0x03

	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
    15d8:	19 82       	std	Y+1, r1	; 0x01
	/*Check Args*/
	if ((Copy_u8Port > DIO_u8_PORTD) || (Add_pu8PortValue == NULL))
    15da:	8a 81       	ldd	r24, Y+2	; 0x02
    15dc:	84 30       	cpi	r24, 0x04	; 4
    15de:	20 f4       	brcc	.+8      	; 0x15e8 <DIO_enuGetPortValue+0x24>
    15e0:	8b 81       	ldd	r24, Y+3	; 0x03
    15e2:	9c 81       	ldd	r25, Y+4	; 0x04
    15e4:	00 97       	sbiw	r24, 0x00	; 0
    15e6:	19 f4       	brne	.+6      	; 0x15ee <DIO_enuGetPortValue+0x2a>
	{
		Local_enuErrorStatus = DIO_NOK;
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	89 83       	std	Y+1, r24	; 0x01
    15ec:	3a c0       	rjmp	.+116    	; 0x1662 <DIO_enuGetPortValue+0x9e>
	}
	else
	{
		/*Implementation*/

		switch (Copy_u8Port)
    15ee:	8a 81       	ldd	r24, Y+2	; 0x02
    15f0:	28 2f       	mov	r18, r24
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	3e 83       	std	Y+6, r19	; 0x06
    15f6:	2d 83       	std	Y+5, r18	; 0x05
    15f8:	8d 81       	ldd	r24, Y+5	; 0x05
    15fa:	9e 81       	ldd	r25, Y+6	; 0x06
    15fc:	81 30       	cpi	r24, 0x01	; 1
    15fe:	91 05       	cpc	r25, r1
    1600:	e1 f0       	breq	.+56     	; 0x163a <DIO_enuGetPortValue+0x76>
    1602:	2d 81       	ldd	r18, Y+5	; 0x05
    1604:	3e 81       	ldd	r19, Y+6	; 0x06
    1606:	22 30       	cpi	r18, 0x02	; 2
    1608:	31 05       	cpc	r19, r1
    160a:	2c f4       	brge	.+10     	; 0x1616 <DIO_enuGetPortValue+0x52>
    160c:	8d 81       	ldd	r24, Y+5	; 0x05
    160e:	9e 81       	ldd	r25, Y+6	; 0x06
    1610:	00 97       	sbiw	r24, 0x00	; 0
    1612:	61 f0       	breq	.+24     	; 0x162c <DIO_enuGetPortValue+0x68>
    1614:	26 c0       	rjmp	.+76     	; 0x1662 <DIO_enuGetPortValue+0x9e>
    1616:	2d 81       	ldd	r18, Y+5	; 0x05
    1618:	3e 81       	ldd	r19, Y+6	; 0x06
    161a:	22 30       	cpi	r18, 0x02	; 2
    161c:	31 05       	cpc	r19, r1
    161e:	a1 f0       	breq	.+40     	; 0x1648 <DIO_enuGetPortValue+0x84>
    1620:	8d 81       	ldd	r24, Y+5	; 0x05
    1622:	9e 81       	ldd	r25, Y+6	; 0x06
    1624:	83 30       	cpi	r24, 0x03	; 3
    1626:	91 05       	cpc	r25, r1
    1628:	b1 f0       	breq	.+44     	; 0x1656 <DIO_enuGetPortValue+0x92>
    162a:	1b c0       	rjmp	.+54     	; 0x1662 <DIO_enuGetPortValue+0x9e>
		{
		case DIO_u8_PORTA:
			*Add_pu8PortValue = DIO_u8_PINA_REG;
    162c:	e9 e3       	ldi	r30, 0x39	; 57
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	eb 81       	ldd	r30, Y+3	; 0x03
    1634:	fc 81       	ldd	r31, Y+4	; 0x04
    1636:	80 83       	st	Z, r24
    1638:	14 c0       	rjmp	.+40     	; 0x1662 <DIO_enuGetPortValue+0x9e>
			break;

		case DIO_u8_PORTB:
			*Add_pu8PortValue = DIO_u8_PINB_REG;
    163a:	e6 e3       	ldi	r30, 0x36	; 54
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	eb 81       	ldd	r30, Y+3	; 0x03
    1642:	fc 81       	ldd	r31, Y+4	; 0x04
    1644:	80 83       	st	Z, r24
    1646:	0d c0       	rjmp	.+26     	; 0x1662 <DIO_enuGetPortValue+0x9e>
			break;

		case DIO_u8_PORTC:
			*Add_pu8PortValue = DIO_u8_PINC_REG;
    1648:	e3 e3       	ldi	r30, 0x33	; 51
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	eb 81       	ldd	r30, Y+3	; 0x03
    1650:	fc 81       	ldd	r31, Y+4	; 0x04
    1652:	80 83       	st	Z, r24
    1654:	06 c0       	rjmp	.+12     	; 0x1662 <DIO_enuGetPortValue+0x9e>
			break;

		case DIO_u8_PORTD:
			*Add_pu8PortValue = DIO_u8_PIND_REG;
    1656:	e0 e3       	ldi	r30, 0x30	; 48
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	eb 81       	ldd	r30, Y+3	; 0x03
    165e:	fc 81       	ldd	r31, Y+4	; 0x04
    1660:	80 83       	st	Z, r24
		}

		/*empty*/
		//asm("NOP");
	}
	return Local_enuErrorStatus;
    1662:	89 81       	ldd	r24, Y+1	; 0x01

}
    1664:	26 96       	adiw	r28, 0x06	; 6
    1666:	0f b6       	in	r0, 0x3f	; 63
    1668:	f8 94       	cli
    166a:	de bf       	out	0x3e, r29	; 62
    166c:	0f be       	out	0x3f, r0	; 63
    166e:	cd bf       	out	0x3d, r28	; 61
    1670:	cf 91       	pop	r28
    1672:	df 91       	pop	r29
    1674:	08 95       	ret

00001676 <DIO_enuSetPortValue>:
 * 			    Second Argument : Copy_u8Value,     variable to the value to be se to port
 * Return :		Error Status --> DIO_OK , DIO_NOK
 * */

DIO_tenuErrorStatus DIO_enuSetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    1676:	df 93       	push	r29
    1678:	cf 93       	push	r28
    167a:	00 d0       	rcall	.+0      	; 0x167c <DIO_enuSetPortValue+0x6>
    167c:	00 d0       	rcall	.+0      	; 0x167e <DIO_enuSetPortValue+0x8>
    167e:	0f 92       	push	r0
    1680:	cd b7       	in	r28, 0x3d	; 61
    1682:	de b7       	in	r29, 0x3e	; 62
    1684:	8a 83       	std	Y+2, r24	; 0x02
    1686:	6b 83       	std	Y+3, r22	; 0x03

	DIO_tenuErrorStatus Local_enuErrorStatus = DIO_OK;
    1688:	19 82       	std	Y+1, r1	; 0x01
	/*Check Args*/

	if ((Copy_u8Port > DIO_u8_PORTD))
    168a:	8a 81       	ldd	r24, Y+2	; 0x02
    168c:	84 30       	cpi	r24, 0x04	; 4
    168e:	18 f0       	brcs	.+6      	; 0x1696 <DIO_enuSetPortValue+0x20>
	{
		Local_enuErrorStatus = DIO_NOK;
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	89 83       	std	Y+1, r24	; 0x01
    1694:	32 c0       	rjmp	.+100    	; 0x16fa <DIO_enuSetPortValue+0x84>
	}
	else
	{
		/*Implementation*/

		switch (Copy_u8Port)
    1696:	8a 81       	ldd	r24, Y+2	; 0x02
    1698:	28 2f       	mov	r18, r24
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	3d 83       	std	Y+5, r19	; 0x05
    169e:	2c 83       	std	Y+4, r18	; 0x04
    16a0:	8c 81       	ldd	r24, Y+4	; 0x04
    16a2:	9d 81       	ldd	r25, Y+5	; 0x05
    16a4:	81 30       	cpi	r24, 0x01	; 1
    16a6:	91 05       	cpc	r25, r1
    16a8:	d1 f0       	breq	.+52     	; 0x16de <DIO_enuSetPortValue+0x68>
    16aa:	2c 81       	ldd	r18, Y+4	; 0x04
    16ac:	3d 81       	ldd	r19, Y+5	; 0x05
    16ae:	22 30       	cpi	r18, 0x02	; 2
    16b0:	31 05       	cpc	r19, r1
    16b2:	2c f4       	brge	.+10     	; 0x16be <DIO_enuSetPortValue+0x48>
    16b4:	8c 81       	ldd	r24, Y+4	; 0x04
    16b6:	9d 81       	ldd	r25, Y+5	; 0x05
    16b8:	00 97       	sbiw	r24, 0x00	; 0
    16ba:	61 f0       	breq	.+24     	; 0x16d4 <DIO_enuSetPortValue+0x5e>
    16bc:	1e c0       	rjmp	.+60     	; 0x16fa <DIO_enuSetPortValue+0x84>
    16be:	2c 81       	ldd	r18, Y+4	; 0x04
    16c0:	3d 81       	ldd	r19, Y+5	; 0x05
    16c2:	22 30       	cpi	r18, 0x02	; 2
    16c4:	31 05       	cpc	r19, r1
    16c6:	81 f0       	breq	.+32     	; 0x16e8 <DIO_enuSetPortValue+0x72>
    16c8:	8c 81       	ldd	r24, Y+4	; 0x04
    16ca:	9d 81       	ldd	r25, Y+5	; 0x05
    16cc:	83 30       	cpi	r24, 0x03	; 3
    16ce:	91 05       	cpc	r25, r1
    16d0:	81 f0       	breq	.+32     	; 0x16f2 <DIO_enuSetPortValue+0x7c>
    16d2:	13 c0       	rjmp	.+38     	; 0x16fa <DIO_enuSetPortValue+0x84>
		{
		case DIO_u8_PORTA:
			DIO_u8_PORTA_REG = Copy_u8Value;
    16d4:	eb e3       	ldi	r30, 0x3B	; 59
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	8b 81       	ldd	r24, Y+3	; 0x03
    16da:	80 83       	st	Z, r24
    16dc:	0e c0       	rjmp	.+28     	; 0x16fa <DIO_enuSetPortValue+0x84>
			break;

		case DIO_u8_PORTB:
			DIO_u8_PORTB_REG = Copy_u8Value;
    16de:	e8 e3       	ldi	r30, 0x38	; 56
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	8b 81       	ldd	r24, Y+3	; 0x03
    16e4:	80 83       	st	Z, r24
    16e6:	09 c0       	rjmp	.+18     	; 0x16fa <DIO_enuSetPortValue+0x84>

			break;

		case DIO_u8_PORTC:
			DIO_u8_PORTC_REG = Copy_u8Value;
    16e8:	e5 e3       	ldi	r30, 0x35	; 53
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	8b 81       	ldd	r24, Y+3	; 0x03
    16ee:	80 83       	st	Z, r24
    16f0:	04 c0       	rjmp	.+8      	; 0x16fa <DIO_enuSetPortValue+0x84>

			break;

		case DIO_u8_PORTD:
			DIO_u8_PORTD_REG = Copy_u8Value;
    16f2:	e2 e3       	ldi	r30, 0x32	; 50
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	8b 81       	ldd	r24, Y+3	; 0x03
    16f8:	80 83       	st	Z, r24
		}

		/*empty*/
		//asm("NOP");
	}
	return Local_enuErrorStatus;
    16fa:	89 81       	ldd	r24, Y+1	; 0x01

}
    16fc:	0f 90       	pop	r0
    16fe:	0f 90       	pop	r0
    1700:	0f 90       	pop	r0
    1702:	0f 90       	pop	r0
    1704:	0f 90       	pop	r0
    1706:	cf 91       	pop	r28
    1708:	df 91       	pop	r29
    170a:	08 95       	ret

0000170c <LCD_vidSendEnable>:
#include"LCD_int.h"
#include<util/delay.h>

/*Function to send enable signal for instructions */
static void LCD_vidSendEnable(void)
{
    170c:	df 93       	push	r29
    170e:	cf 93       	push	r28
    1710:	cd b7       	in	r28, 0x3d	; 61
    1712:	de b7       	in	r29, 0x3e	; 62
    1714:	2e 97       	sbiw	r28, 0x0e	; 14
    1716:	0f b6       	in	r0, 0x3f	; 63
    1718:	f8 94       	cli
    171a:	de bf       	out	0x3e, r29	; 62
    171c:	0f be       	out	0x3f, r0	; 63
    171e:	cd bf       	out	0x3d, r28	; 61
	DIO_enuSetPinValue(LCD_u8_E_PORT, LCD_u8_E_PIN, DIO_u8_HIGH);
    1720:	82 e0       	ldi	r24, 0x02	; 2
    1722:	63 e0       	ldi	r22, 0x03	; 3
    1724:	41 e0       	ldi	r20, 0x01	; 1
    1726:	0e 94 51 09 	call	0x12a2	; 0x12a2 <DIO_enuSetPinValue>
    172a:	80 e0       	ldi	r24, 0x00	; 0
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	a0 e0       	ldi	r26, 0x00	; 0
    1730:	b0 e4       	ldi	r27, 0x40	; 64
    1732:	8b 87       	std	Y+11, r24	; 0x0b
    1734:	9c 87       	std	Y+12, r25	; 0x0c
    1736:	ad 87       	std	Y+13, r26	; 0x0d
    1738:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    173a:	6b 85       	ldd	r22, Y+11	; 0x0b
    173c:	7c 85       	ldd	r23, Y+12	; 0x0c
    173e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1740:	9e 85       	ldd	r25, Y+14	; 0x0e
    1742:	20 e0       	ldi	r18, 0x00	; 0
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	4a e7       	ldi	r20, 0x7A	; 122
    1748:	55 e4       	ldi	r21, 0x45	; 69
    174a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    174e:	dc 01       	movw	r26, r24
    1750:	cb 01       	movw	r24, r22
    1752:	8f 83       	std	Y+7, r24	; 0x07
    1754:	98 87       	std	Y+8, r25	; 0x08
    1756:	a9 87       	std	Y+9, r26	; 0x09
    1758:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    175a:	6f 81       	ldd	r22, Y+7	; 0x07
    175c:	78 85       	ldd	r23, Y+8	; 0x08
    175e:	89 85       	ldd	r24, Y+9	; 0x09
    1760:	9a 85       	ldd	r25, Y+10	; 0x0a
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	40 e8       	ldi	r20, 0x80	; 128
    1768:	5f e3       	ldi	r21, 0x3F	; 63
    176a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    176e:	88 23       	and	r24, r24
    1770:	2c f4       	brge	.+10     	; 0x177c <LCD_vidSendEnable+0x70>
		__ticks = 1;
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	9e 83       	std	Y+6, r25	; 0x06
    1778:	8d 83       	std	Y+5, r24	; 0x05
    177a:	3f c0       	rjmp	.+126    	; 0x17fa <LCD_vidSendEnable+0xee>
	else if (__tmp > 65535)
    177c:	6f 81       	ldd	r22, Y+7	; 0x07
    177e:	78 85       	ldd	r23, Y+8	; 0x08
    1780:	89 85       	ldd	r24, Y+9	; 0x09
    1782:	9a 85       	ldd	r25, Y+10	; 0x0a
    1784:	20 e0       	ldi	r18, 0x00	; 0
    1786:	3f ef       	ldi	r19, 0xFF	; 255
    1788:	4f e7       	ldi	r20, 0x7F	; 127
    178a:	57 e4       	ldi	r21, 0x47	; 71
    178c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1790:	18 16       	cp	r1, r24
    1792:	4c f5       	brge	.+82     	; 0x17e6 <LCD_vidSendEnable+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1794:	6b 85       	ldd	r22, Y+11	; 0x0b
    1796:	7c 85       	ldd	r23, Y+12	; 0x0c
    1798:	8d 85       	ldd	r24, Y+13	; 0x0d
    179a:	9e 85       	ldd	r25, Y+14	; 0x0e
    179c:	20 e0       	ldi	r18, 0x00	; 0
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	40 e2       	ldi	r20, 0x20	; 32
    17a2:	51 e4       	ldi	r21, 0x41	; 65
    17a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a8:	dc 01       	movw	r26, r24
    17aa:	cb 01       	movw	r24, r22
    17ac:	bc 01       	movw	r22, r24
    17ae:	cd 01       	movw	r24, r26
    17b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17b4:	dc 01       	movw	r26, r24
    17b6:	cb 01       	movw	r24, r22
    17b8:	9e 83       	std	Y+6, r25	; 0x06
    17ba:	8d 83       	std	Y+5, r24	; 0x05
    17bc:	0f c0       	rjmp	.+30     	; 0x17dc <LCD_vidSendEnable+0xd0>
    17be:	80 e9       	ldi	r24, 0x90	; 144
    17c0:	91 e0       	ldi	r25, 0x01	; 1
    17c2:	9c 83       	std	Y+4, r25	; 0x04
    17c4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17c6:	8b 81       	ldd	r24, Y+3	; 0x03
    17c8:	9c 81       	ldd	r25, Y+4	; 0x04
    17ca:	01 97       	sbiw	r24, 0x01	; 1
    17cc:	f1 f7       	brne	.-4      	; 0x17ca <LCD_vidSendEnable+0xbe>
    17ce:	9c 83       	std	Y+4, r25	; 0x04
    17d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17d2:	8d 81       	ldd	r24, Y+5	; 0x05
    17d4:	9e 81       	ldd	r25, Y+6	; 0x06
    17d6:	01 97       	sbiw	r24, 0x01	; 1
    17d8:	9e 83       	std	Y+6, r25	; 0x06
    17da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17dc:	8d 81       	ldd	r24, Y+5	; 0x05
    17de:	9e 81       	ldd	r25, Y+6	; 0x06
    17e0:	00 97       	sbiw	r24, 0x00	; 0
    17e2:	69 f7       	brne	.-38     	; 0x17be <LCD_vidSendEnable+0xb2>
    17e4:	14 c0       	rjmp	.+40     	; 0x180e <LCD_vidSendEnable+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17e6:	6f 81       	ldd	r22, Y+7	; 0x07
    17e8:	78 85       	ldd	r23, Y+8	; 0x08
    17ea:	89 85       	ldd	r24, Y+9	; 0x09
    17ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f2:	dc 01       	movw	r26, r24
    17f4:	cb 01       	movw	r24, r22
    17f6:	9e 83       	std	Y+6, r25	; 0x06
    17f8:	8d 83       	std	Y+5, r24	; 0x05
    17fa:	8d 81       	ldd	r24, Y+5	; 0x05
    17fc:	9e 81       	ldd	r25, Y+6	; 0x06
    17fe:	9a 83       	std	Y+2, r25	; 0x02
    1800:	89 83       	std	Y+1, r24	; 0x01
    1802:	89 81       	ldd	r24, Y+1	; 0x01
    1804:	9a 81       	ldd	r25, Y+2	; 0x02
    1806:	01 97       	sbiw	r24, 0x01	; 1
    1808:	f1 f7       	brne	.-4      	; 0x1806 <LCD_vidSendEnable+0xfa>
    180a:	9a 83       	std	Y+2, r25	; 0x02
    180c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_enuSetPinValue(LCD_u8_E_PORT, LCD_u8_E_PIN, DIO_u8_LOW);
    180e:	82 e0       	ldi	r24, 0x02	; 2
    1810:	63 e0       	ldi	r22, 0x03	; 3
    1812:	40 e0       	ldi	r20, 0x00	; 0
    1814:	0e 94 51 09 	call	0x12a2	; 0x12a2 <DIO_enuSetPinValue>
}
    1818:	2e 96       	adiw	r28, 0x0e	; 14
    181a:	0f b6       	in	r0, 0x3f	; 63
    181c:	f8 94       	cli
    181e:	de bf       	out	0x3e, r29	; 62
    1820:	0f be       	out	0x3f, r0	; 63
    1822:	cd bf       	out	0x3d, r28	; 61
    1824:	cf 91       	pop	r28
    1826:	df 91       	pop	r29
    1828:	08 95       	ret

0000182a <LCD_vidInit>:
 * Description: Initialize LCD
 * Arguments: 	vid
 * Return :	  	vid
 * */
void LCD_vidInit(void)
{
    182a:	0f 93       	push	r16
    182c:	1f 93       	push	r17
    182e:	df 93       	push	r29
    1830:	cf 93       	push	r28
    1832:	cd b7       	in	r28, 0x3d	; 61
    1834:	de b7       	in	r29, 0x3e	; 62
    1836:	c2 56       	subi	r28, 0x62	; 98
    1838:	d0 40       	sbci	r29, 0x00	; 0
    183a:	0f b6       	in	r0, 0x3f	; 63
    183c:	f8 94       	cli
    183e:	de bf       	out	0x3e, r29	; 62
    1840:	0f be       	out	0x3f, r0	; 63
    1842:	cd bf       	out	0x3d, r28	; 61
	
	/*entry mode set init */
	LCD_enuSendInstruction(LCD_u8_ENTRY_MODE_SET);
#elif LCD_u8_DATA_LENGTH ==LCD_u8_4_BIT_MODE
	/*init the pins*/
	DIO_vidInit();
    1844:	0e 94 2b 09 	call	0x1256	; 0x1256 <DIO_vidInit>
    1848:	fe 01       	movw	r30, r28
    184a:	e1 5a       	subi	r30, 0xA1	; 161
    184c:	ff 4f       	sbci	r31, 0xFF	; 255
    184e:	80 e0       	ldi	r24, 0x00	; 0
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	a0 e0       	ldi	r26, 0x00	; 0
    1854:	b2 e4       	ldi	r27, 0x42	; 66
    1856:	80 83       	st	Z, r24
    1858:	91 83       	std	Z+1, r25	; 0x01
    185a:	a2 83       	std	Z+2, r26	; 0x02
    185c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    185e:	8e 01       	movw	r16, r28
    1860:	05 5a       	subi	r16, 0xA5	; 165
    1862:	1f 4f       	sbci	r17, 0xFF	; 255
    1864:	fe 01       	movw	r30, r28
    1866:	e1 5a       	subi	r30, 0xA1	; 161
    1868:	ff 4f       	sbci	r31, 0xFF	; 255
    186a:	60 81       	ld	r22, Z
    186c:	71 81       	ldd	r23, Z+1	; 0x01
    186e:	82 81       	ldd	r24, Z+2	; 0x02
    1870:	93 81       	ldd	r25, Z+3	; 0x03
    1872:	20 e0       	ldi	r18, 0x00	; 0
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	4a e7       	ldi	r20, 0x7A	; 122
    1878:	55 e4       	ldi	r21, 0x45	; 69
    187a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    187e:	dc 01       	movw	r26, r24
    1880:	cb 01       	movw	r24, r22
    1882:	f8 01       	movw	r30, r16
    1884:	80 83       	st	Z, r24
    1886:	91 83       	std	Z+1, r25	; 0x01
    1888:	a2 83       	std	Z+2, r26	; 0x02
    188a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    188c:	fe 01       	movw	r30, r28
    188e:	e5 5a       	subi	r30, 0xA5	; 165
    1890:	ff 4f       	sbci	r31, 0xFF	; 255
    1892:	60 81       	ld	r22, Z
    1894:	71 81       	ldd	r23, Z+1	; 0x01
    1896:	82 81       	ldd	r24, Z+2	; 0x02
    1898:	93 81       	ldd	r25, Z+3	; 0x03
    189a:	20 e0       	ldi	r18, 0x00	; 0
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	40 e8       	ldi	r20, 0x80	; 128
    18a0:	5f e3       	ldi	r21, 0x3F	; 63
    18a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18a6:	88 23       	and	r24, r24
    18a8:	44 f4       	brge	.+16     	; 0x18ba <LCD_vidInit+0x90>
		__ticks = 1;
    18aa:	fe 01       	movw	r30, r28
    18ac:	e7 5a       	subi	r30, 0xA7	; 167
    18ae:	ff 4f       	sbci	r31, 0xFF	; 255
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	91 83       	std	Z+1, r25	; 0x01
    18b6:	80 83       	st	Z, r24
    18b8:	64 c0       	rjmp	.+200    	; 0x1982 <LCD_vidInit+0x158>
	else if (__tmp > 65535)
    18ba:	fe 01       	movw	r30, r28
    18bc:	e5 5a       	subi	r30, 0xA5	; 165
    18be:	ff 4f       	sbci	r31, 0xFF	; 255
    18c0:	60 81       	ld	r22, Z
    18c2:	71 81       	ldd	r23, Z+1	; 0x01
    18c4:	82 81       	ldd	r24, Z+2	; 0x02
    18c6:	93 81       	ldd	r25, Z+3	; 0x03
    18c8:	20 e0       	ldi	r18, 0x00	; 0
    18ca:	3f ef       	ldi	r19, 0xFF	; 255
    18cc:	4f e7       	ldi	r20, 0x7F	; 127
    18ce:	57 e4       	ldi	r21, 0x47	; 71
    18d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18d4:	18 16       	cp	r1, r24
    18d6:	0c f0       	brlt	.+2      	; 0x18da <LCD_vidInit+0xb0>
    18d8:	43 c0       	rjmp	.+134    	; 0x1960 <LCD_vidInit+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18da:	fe 01       	movw	r30, r28
    18dc:	e1 5a       	subi	r30, 0xA1	; 161
    18de:	ff 4f       	sbci	r31, 0xFF	; 255
    18e0:	60 81       	ld	r22, Z
    18e2:	71 81       	ldd	r23, Z+1	; 0x01
    18e4:	82 81       	ldd	r24, Z+2	; 0x02
    18e6:	93 81       	ldd	r25, Z+3	; 0x03
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	40 e2       	ldi	r20, 0x20	; 32
    18ee:	51 e4       	ldi	r21, 0x41	; 65
    18f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f4:	dc 01       	movw	r26, r24
    18f6:	cb 01       	movw	r24, r22
    18f8:	8e 01       	movw	r16, r28
    18fa:	07 5a       	subi	r16, 0xA7	; 167
    18fc:	1f 4f       	sbci	r17, 0xFF	; 255
    18fe:	bc 01       	movw	r22, r24
    1900:	cd 01       	movw	r24, r26
    1902:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1906:	dc 01       	movw	r26, r24
    1908:	cb 01       	movw	r24, r22
    190a:	f8 01       	movw	r30, r16
    190c:	91 83       	std	Z+1, r25	; 0x01
    190e:	80 83       	st	Z, r24
    1910:	1f c0       	rjmp	.+62     	; 0x1950 <LCD_vidInit+0x126>
    1912:	fe 01       	movw	r30, r28
    1914:	e9 5a       	subi	r30, 0xA9	; 169
    1916:	ff 4f       	sbci	r31, 0xFF	; 255
    1918:	80 e9       	ldi	r24, 0x90	; 144
    191a:	91 e0       	ldi	r25, 0x01	; 1
    191c:	91 83       	std	Z+1, r25	; 0x01
    191e:	80 83       	st	Z, r24
    1920:	fe 01       	movw	r30, r28
    1922:	e9 5a       	subi	r30, 0xA9	; 169
    1924:	ff 4f       	sbci	r31, 0xFF	; 255
    1926:	80 81       	ld	r24, Z
    1928:	91 81       	ldd	r25, Z+1	; 0x01
    192a:	01 97       	sbiw	r24, 0x01	; 1
    192c:	f1 f7       	brne	.-4      	; 0x192a <LCD_vidInit+0x100>
    192e:	fe 01       	movw	r30, r28
    1930:	e9 5a       	subi	r30, 0xA9	; 169
    1932:	ff 4f       	sbci	r31, 0xFF	; 255
    1934:	91 83       	std	Z+1, r25	; 0x01
    1936:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1938:	de 01       	movw	r26, r28
    193a:	a7 5a       	subi	r26, 0xA7	; 167
    193c:	bf 4f       	sbci	r27, 0xFF	; 255
    193e:	fe 01       	movw	r30, r28
    1940:	e7 5a       	subi	r30, 0xA7	; 167
    1942:	ff 4f       	sbci	r31, 0xFF	; 255
    1944:	80 81       	ld	r24, Z
    1946:	91 81       	ldd	r25, Z+1	; 0x01
    1948:	01 97       	sbiw	r24, 0x01	; 1
    194a:	11 96       	adiw	r26, 0x01	; 1
    194c:	9c 93       	st	X, r25
    194e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1950:	fe 01       	movw	r30, r28
    1952:	e7 5a       	subi	r30, 0xA7	; 167
    1954:	ff 4f       	sbci	r31, 0xFF	; 255
    1956:	80 81       	ld	r24, Z
    1958:	91 81       	ldd	r25, Z+1	; 0x01
    195a:	00 97       	sbiw	r24, 0x00	; 0
    195c:	d1 f6       	brne	.-76     	; 0x1912 <LCD_vidInit+0xe8>
    195e:	27 c0       	rjmp	.+78     	; 0x19ae <LCD_vidInit+0x184>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1960:	8e 01       	movw	r16, r28
    1962:	07 5a       	subi	r16, 0xA7	; 167
    1964:	1f 4f       	sbci	r17, 0xFF	; 255
    1966:	fe 01       	movw	r30, r28
    1968:	e5 5a       	subi	r30, 0xA5	; 165
    196a:	ff 4f       	sbci	r31, 0xFF	; 255
    196c:	60 81       	ld	r22, Z
    196e:	71 81       	ldd	r23, Z+1	; 0x01
    1970:	82 81       	ldd	r24, Z+2	; 0x02
    1972:	93 81       	ldd	r25, Z+3	; 0x03
    1974:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1978:	dc 01       	movw	r26, r24
    197a:	cb 01       	movw	r24, r22
    197c:	f8 01       	movw	r30, r16
    197e:	91 83       	std	Z+1, r25	; 0x01
    1980:	80 83       	st	Z, r24
    1982:	de 01       	movw	r26, r28
    1984:	ab 5a       	subi	r26, 0xAB	; 171
    1986:	bf 4f       	sbci	r27, 0xFF	; 255
    1988:	fe 01       	movw	r30, r28
    198a:	e7 5a       	subi	r30, 0xA7	; 167
    198c:	ff 4f       	sbci	r31, 0xFF	; 255
    198e:	80 81       	ld	r24, Z
    1990:	91 81       	ldd	r25, Z+1	; 0x01
    1992:	8d 93       	st	X+, r24
    1994:	9c 93       	st	X, r25
    1996:	fe 01       	movw	r30, r28
    1998:	eb 5a       	subi	r30, 0xAB	; 171
    199a:	ff 4f       	sbci	r31, 0xFF	; 255
    199c:	80 81       	ld	r24, Z
    199e:	91 81       	ldd	r25, Z+1	; 0x01
    19a0:	01 97       	sbiw	r24, 0x01	; 1
    19a2:	f1 f7       	brne	.-4      	; 0x19a0 <LCD_vidInit+0x176>
    19a4:	fe 01       	movw	r30, r28
    19a6:	eb 5a       	subi	r30, 0xAB	; 171
    19a8:	ff 4f       	sbci	r31, 0xFF	; 255
    19aa:	91 83       	std	Z+1, r25	; 0x01
    19ac:	80 83       	st	Z, r24
	_delay_ms(32);

	/*function set init*/

	DIO_enuSetPinValue(LCD_u8_D4_PORT, LCD_u8_D4_PIN, DIO_u8_LOW);
    19ae:	82 e0       	ldi	r24, 0x02	; 2
    19b0:	64 e0       	ldi	r22, 0x04	; 4
    19b2:	40 e0       	ldi	r20, 0x00	; 0
    19b4:	0e 94 51 09 	call	0x12a2	; 0x12a2 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(LCD_u8_D5_PORT, LCD_u8_D5_PIN, DIO_u8_HIGH);
    19b8:	82 e0       	ldi	r24, 0x02	; 2
    19ba:	65 e0       	ldi	r22, 0x05	; 5
    19bc:	41 e0       	ldi	r20, 0x01	; 1
    19be:	0e 94 51 09 	call	0x12a2	; 0x12a2 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(LCD_u8_D6_PORT, LCD_u8_D6_PIN, DIO_u8_LOW);
    19c2:	82 e0       	ldi	r24, 0x02	; 2
    19c4:	66 e0       	ldi	r22, 0x06	; 6
    19c6:	40 e0       	ldi	r20, 0x00	; 0
    19c8:	0e 94 51 09 	call	0x12a2	; 0x12a2 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(LCD_u8_D7_PORT, LCD_u8_D7_PIN, DIO_u8_LOW);
    19cc:	82 e0       	ldi	r24, 0x02	; 2
    19ce:	67 e0       	ldi	r22, 0x07	; 7
    19d0:	40 e0       	ldi	r20, 0x00	; 0
    19d2:	0e 94 51 09 	call	0x12a2	; 0x12a2 <DIO_enuSetPinValue>
    19d6:	fe 01       	movw	r30, r28
    19d8:	ef 5a       	subi	r30, 0xAF	; 175
    19da:	ff 4f       	sbci	r31, 0xFF	; 255
    19dc:	80 e0       	ldi	r24, 0x00	; 0
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	a0 e0       	ldi	r26, 0x00	; 0
    19e2:	b0 e4       	ldi	r27, 0x40	; 64
    19e4:	80 83       	st	Z, r24
    19e6:	91 83       	std	Z+1, r25	; 0x01
    19e8:	a2 83       	std	Z+2, r26	; 0x02
    19ea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ec:	8e 01       	movw	r16, r28
    19ee:	03 5b       	subi	r16, 0xB3	; 179
    19f0:	1f 4f       	sbci	r17, 0xFF	; 255
    19f2:	fe 01       	movw	r30, r28
    19f4:	ef 5a       	subi	r30, 0xAF	; 175
    19f6:	ff 4f       	sbci	r31, 0xFF	; 255
    19f8:	60 81       	ld	r22, Z
    19fa:	71 81       	ldd	r23, Z+1	; 0x01
    19fc:	82 81       	ldd	r24, Z+2	; 0x02
    19fe:	93 81       	ldd	r25, Z+3	; 0x03
    1a00:	20 e0       	ldi	r18, 0x00	; 0
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	4a e7       	ldi	r20, 0x7A	; 122
    1a06:	55 e4       	ldi	r21, 0x45	; 69
    1a08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a0c:	dc 01       	movw	r26, r24
    1a0e:	cb 01       	movw	r24, r22
    1a10:	f8 01       	movw	r30, r16
    1a12:	80 83       	st	Z, r24
    1a14:	91 83       	std	Z+1, r25	; 0x01
    1a16:	a2 83       	std	Z+2, r26	; 0x02
    1a18:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a1a:	fe 01       	movw	r30, r28
    1a1c:	e3 5b       	subi	r30, 0xB3	; 179
    1a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a20:	60 81       	ld	r22, Z
    1a22:	71 81       	ldd	r23, Z+1	; 0x01
    1a24:	82 81       	ldd	r24, Z+2	; 0x02
    1a26:	93 81       	ldd	r25, Z+3	; 0x03
    1a28:	20 e0       	ldi	r18, 0x00	; 0
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	40 e8       	ldi	r20, 0x80	; 128
    1a2e:	5f e3       	ldi	r21, 0x3F	; 63
    1a30:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a34:	88 23       	and	r24, r24
    1a36:	44 f4       	brge	.+16     	; 0x1a48 <LCD_vidInit+0x21e>
		__ticks = 1;
    1a38:	fe 01       	movw	r30, r28
    1a3a:	e5 5b       	subi	r30, 0xB5	; 181
    1a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	91 83       	std	Z+1, r25	; 0x01
    1a44:	80 83       	st	Z, r24
    1a46:	64 c0       	rjmp	.+200    	; 0x1b10 <LCD_vidInit+0x2e6>
	else if (__tmp > 65535)
    1a48:	fe 01       	movw	r30, r28
    1a4a:	e3 5b       	subi	r30, 0xB3	; 179
    1a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4e:	60 81       	ld	r22, Z
    1a50:	71 81       	ldd	r23, Z+1	; 0x01
    1a52:	82 81       	ldd	r24, Z+2	; 0x02
    1a54:	93 81       	ldd	r25, Z+3	; 0x03
    1a56:	20 e0       	ldi	r18, 0x00	; 0
    1a58:	3f ef       	ldi	r19, 0xFF	; 255
    1a5a:	4f e7       	ldi	r20, 0x7F	; 127
    1a5c:	57 e4       	ldi	r21, 0x47	; 71
    1a5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a62:	18 16       	cp	r1, r24
    1a64:	0c f0       	brlt	.+2      	; 0x1a68 <LCD_vidInit+0x23e>
    1a66:	43 c0       	rjmp	.+134    	; 0x1aee <LCD_vidInit+0x2c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a68:	fe 01       	movw	r30, r28
    1a6a:	ef 5a       	subi	r30, 0xAF	; 175
    1a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6e:	60 81       	ld	r22, Z
    1a70:	71 81       	ldd	r23, Z+1	; 0x01
    1a72:	82 81       	ldd	r24, Z+2	; 0x02
    1a74:	93 81       	ldd	r25, Z+3	; 0x03
    1a76:	20 e0       	ldi	r18, 0x00	; 0
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	40 e2       	ldi	r20, 0x20	; 32
    1a7c:	51 e4       	ldi	r21, 0x41	; 65
    1a7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a82:	dc 01       	movw	r26, r24
    1a84:	cb 01       	movw	r24, r22
    1a86:	8e 01       	movw	r16, r28
    1a88:	05 5b       	subi	r16, 0xB5	; 181
    1a8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a8c:	bc 01       	movw	r22, r24
    1a8e:	cd 01       	movw	r24, r26
    1a90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a94:	dc 01       	movw	r26, r24
    1a96:	cb 01       	movw	r24, r22
    1a98:	f8 01       	movw	r30, r16
    1a9a:	91 83       	std	Z+1, r25	; 0x01
    1a9c:	80 83       	st	Z, r24
    1a9e:	1f c0       	rjmp	.+62     	; 0x1ade <LCD_vidInit+0x2b4>
    1aa0:	fe 01       	movw	r30, r28
    1aa2:	e7 5b       	subi	r30, 0xB7	; 183
    1aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa6:	80 e9       	ldi	r24, 0x90	; 144
    1aa8:	91 e0       	ldi	r25, 0x01	; 1
    1aaa:	91 83       	std	Z+1, r25	; 0x01
    1aac:	80 83       	st	Z, r24
    1aae:	fe 01       	movw	r30, r28
    1ab0:	e7 5b       	subi	r30, 0xB7	; 183
    1ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab4:	80 81       	ld	r24, Z
    1ab6:	91 81       	ldd	r25, Z+1	; 0x01
    1ab8:	01 97       	sbiw	r24, 0x01	; 1
    1aba:	f1 f7       	brne	.-4      	; 0x1ab8 <LCD_vidInit+0x28e>
    1abc:	fe 01       	movw	r30, r28
    1abe:	e7 5b       	subi	r30, 0xB7	; 183
    1ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac2:	91 83       	std	Z+1, r25	; 0x01
    1ac4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ac6:	de 01       	movw	r26, r28
    1ac8:	a5 5b       	subi	r26, 0xB5	; 181
    1aca:	bf 4f       	sbci	r27, 0xFF	; 255
    1acc:	fe 01       	movw	r30, r28
    1ace:	e5 5b       	subi	r30, 0xB5	; 181
    1ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad2:	80 81       	ld	r24, Z
    1ad4:	91 81       	ldd	r25, Z+1	; 0x01
    1ad6:	01 97       	sbiw	r24, 0x01	; 1
    1ad8:	11 96       	adiw	r26, 0x01	; 1
    1ada:	9c 93       	st	X, r25
    1adc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ade:	fe 01       	movw	r30, r28
    1ae0:	e5 5b       	subi	r30, 0xB5	; 181
    1ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae4:	80 81       	ld	r24, Z
    1ae6:	91 81       	ldd	r25, Z+1	; 0x01
    1ae8:	00 97       	sbiw	r24, 0x00	; 0
    1aea:	d1 f6       	brne	.-76     	; 0x1aa0 <LCD_vidInit+0x276>
    1aec:	27 c0       	rjmp	.+78     	; 0x1b3c <LCD_vidInit+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aee:	8e 01       	movw	r16, r28
    1af0:	05 5b       	subi	r16, 0xB5	; 181
    1af2:	1f 4f       	sbci	r17, 0xFF	; 255
    1af4:	fe 01       	movw	r30, r28
    1af6:	e3 5b       	subi	r30, 0xB3	; 179
    1af8:	ff 4f       	sbci	r31, 0xFF	; 255
    1afa:	60 81       	ld	r22, Z
    1afc:	71 81       	ldd	r23, Z+1	; 0x01
    1afe:	82 81       	ldd	r24, Z+2	; 0x02
    1b00:	93 81       	ldd	r25, Z+3	; 0x03
    1b02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b06:	dc 01       	movw	r26, r24
    1b08:	cb 01       	movw	r24, r22
    1b0a:	f8 01       	movw	r30, r16
    1b0c:	91 83       	std	Z+1, r25	; 0x01
    1b0e:	80 83       	st	Z, r24
    1b10:	de 01       	movw	r26, r28
    1b12:	a9 5b       	subi	r26, 0xB9	; 185
    1b14:	bf 4f       	sbci	r27, 0xFF	; 255
    1b16:	fe 01       	movw	r30, r28
    1b18:	e5 5b       	subi	r30, 0xB5	; 181
    1b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1c:	80 81       	ld	r24, Z
    1b1e:	91 81       	ldd	r25, Z+1	; 0x01
    1b20:	8d 93       	st	X+, r24
    1b22:	9c 93       	st	X, r25
    1b24:	fe 01       	movw	r30, r28
    1b26:	e9 5b       	subi	r30, 0xB9	; 185
    1b28:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2a:	80 81       	ld	r24, Z
    1b2c:	91 81       	ldd	r25, Z+1	; 0x01
    1b2e:	01 97       	sbiw	r24, 0x01	; 1
    1b30:	f1 f7       	brne	.-4      	; 0x1b2e <LCD_vidInit+0x304>
    1b32:	fe 01       	movw	r30, r28
    1b34:	e9 5b       	subi	r30, 0xB9	; 185
    1b36:	ff 4f       	sbci	r31, 0xFF	; 255
    1b38:	91 83       	std	Z+1, r25	; 0x01
    1b3a:	80 83       	st	Z, r24
	_delay_ms(2);
	LCD_vidSendEnable();
    1b3c:	0e 94 86 0b 	call	0x170c	; 0x170c <LCD_vidSendEnable>

	DIO_enuSetPinValue(LCD_u8_D4_PORT, LCD_u8_D4_PIN, DIO_u8_LOW);
    1b40:	82 e0       	ldi	r24, 0x02	; 2
    1b42:	64 e0       	ldi	r22, 0x04	; 4
    1b44:	40 e0       	ldi	r20, 0x00	; 0
    1b46:	0e 94 51 09 	call	0x12a2	; 0x12a2 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(LCD_u8_D5_PORT, LCD_u8_D5_PIN, DIO_u8_HIGH);
    1b4a:	82 e0       	ldi	r24, 0x02	; 2
    1b4c:	65 e0       	ldi	r22, 0x05	; 5
    1b4e:	41 e0       	ldi	r20, 0x01	; 1
    1b50:	0e 94 51 09 	call	0x12a2	; 0x12a2 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(LCD_u8_D6_PORT, LCD_u8_D6_PIN, DIO_u8_LOW);
    1b54:	82 e0       	ldi	r24, 0x02	; 2
    1b56:	66 e0       	ldi	r22, 0x06	; 6
    1b58:	40 e0       	ldi	r20, 0x00	; 0
    1b5a:	0e 94 51 09 	call	0x12a2	; 0x12a2 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(LCD_u8_D7_PORT, LCD_u8_D7_PIN, DIO_u8_LOW);
    1b5e:	82 e0       	ldi	r24, 0x02	; 2
    1b60:	67 e0       	ldi	r22, 0x07	; 7
    1b62:	40 e0       	ldi	r20, 0x00	; 0
    1b64:	0e 94 51 09 	call	0x12a2	; 0x12a2 <DIO_enuSetPinValue>
    1b68:	fe 01       	movw	r30, r28
    1b6a:	ed 5b       	subi	r30, 0xBD	; 189
    1b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6e:	80 e0       	ldi	r24, 0x00	; 0
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	a0 e0       	ldi	r26, 0x00	; 0
    1b74:	b0 e4       	ldi	r27, 0x40	; 64
    1b76:	80 83       	st	Z, r24
    1b78:	91 83       	std	Z+1, r25	; 0x01
    1b7a:	a2 83       	std	Z+2, r26	; 0x02
    1b7c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b7e:	8e 01       	movw	r16, r28
    1b80:	01 5c       	subi	r16, 0xC1	; 193
    1b82:	1f 4f       	sbci	r17, 0xFF	; 255
    1b84:	fe 01       	movw	r30, r28
    1b86:	ed 5b       	subi	r30, 0xBD	; 189
    1b88:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8a:	60 81       	ld	r22, Z
    1b8c:	71 81       	ldd	r23, Z+1	; 0x01
    1b8e:	82 81       	ldd	r24, Z+2	; 0x02
    1b90:	93 81       	ldd	r25, Z+3	; 0x03
    1b92:	20 e0       	ldi	r18, 0x00	; 0
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	4a e7       	ldi	r20, 0x7A	; 122
    1b98:	55 e4       	ldi	r21, 0x45	; 69
    1b9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b9e:	dc 01       	movw	r26, r24
    1ba0:	cb 01       	movw	r24, r22
    1ba2:	f8 01       	movw	r30, r16
    1ba4:	80 83       	st	Z, r24
    1ba6:	91 83       	std	Z+1, r25	; 0x01
    1ba8:	a2 83       	std	Z+2, r26	; 0x02
    1baa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bac:	fe 01       	movw	r30, r28
    1bae:	ff 96       	adiw	r30, 0x3f	; 63
    1bb0:	60 81       	ld	r22, Z
    1bb2:	71 81       	ldd	r23, Z+1	; 0x01
    1bb4:	82 81       	ldd	r24, Z+2	; 0x02
    1bb6:	93 81       	ldd	r25, Z+3	; 0x03
    1bb8:	20 e0       	ldi	r18, 0x00	; 0
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	40 e8       	ldi	r20, 0x80	; 128
    1bbe:	5f e3       	ldi	r21, 0x3F	; 63
    1bc0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bc4:	88 23       	and	r24, r24
    1bc6:	2c f4       	brge	.+10     	; 0x1bd2 <LCD_vidInit+0x3a8>
		__ticks = 1;
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	9e af       	std	Y+62, r25	; 0x3e
    1bce:	8d af       	std	Y+61, r24	; 0x3d
    1bd0:	46 c0       	rjmp	.+140    	; 0x1c5e <LCD_vidInit+0x434>
	else if (__tmp > 65535)
    1bd2:	fe 01       	movw	r30, r28
    1bd4:	ff 96       	adiw	r30, 0x3f	; 63
    1bd6:	60 81       	ld	r22, Z
    1bd8:	71 81       	ldd	r23, Z+1	; 0x01
    1bda:	82 81       	ldd	r24, Z+2	; 0x02
    1bdc:	93 81       	ldd	r25, Z+3	; 0x03
    1bde:	20 e0       	ldi	r18, 0x00	; 0
    1be0:	3f ef       	ldi	r19, 0xFF	; 255
    1be2:	4f e7       	ldi	r20, 0x7F	; 127
    1be4:	57 e4       	ldi	r21, 0x47	; 71
    1be6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bea:	18 16       	cp	r1, r24
    1bec:	64 f5       	brge	.+88     	; 0x1c46 <LCD_vidInit+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bee:	fe 01       	movw	r30, r28
    1bf0:	ed 5b       	subi	r30, 0xBD	; 189
    1bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf4:	60 81       	ld	r22, Z
    1bf6:	71 81       	ldd	r23, Z+1	; 0x01
    1bf8:	82 81       	ldd	r24, Z+2	; 0x02
    1bfa:	93 81       	ldd	r25, Z+3	; 0x03
    1bfc:	20 e0       	ldi	r18, 0x00	; 0
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	40 e2       	ldi	r20, 0x20	; 32
    1c02:	51 e4       	ldi	r21, 0x41	; 65
    1c04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c08:	dc 01       	movw	r26, r24
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	bc 01       	movw	r22, r24
    1c0e:	cd 01       	movw	r24, r26
    1c10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	9e af       	std	Y+62, r25	; 0x3e
    1c1a:	8d af       	std	Y+61, r24	; 0x3d
    1c1c:	0f c0       	rjmp	.+30     	; 0x1c3c <LCD_vidInit+0x412>
    1c1e:	80 e9       	ldi	r24, 0x90	; 144
    1c20:	91 e0       	ldi	r25, 0x01	; 1
    1c22:	9c af       	std	Y+60, r25	; 0x3c
    1c24:	8b af       	std	Y+59, r24	; 0x3b
    1c26:	8b ad       	ldd	r24, Y+59	; 0x3b
    1c28:	9c ad       	ldd	r25, Y+60	; 0x3c
    1c2a:	01 97       	sbiw	r24, 0x01	; 1
    1c2c:	f1 f7       	brne	.-4      	; 0x1c2a <LCD_vidInit+0x400>
    1c2e:	9c af       	std	Y+60, r25	; 0x3c
    1c30:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c32:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c34:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c36:	01 97       	sbiw	r24, 0x01	; 1
    1c38:	9e af       	std	Y+62, r25	; 0x3e
    1c3a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c3c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c3e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c40:	00 97       	sbiw	r24, 0x00	; 0
    1c42:	69 f7       	brne	.-38     	; 0x1c1e <LCD_vidInit+0x3f4>
    1c44:	16 c0       	rjmp	.+44     	; 0x1c72 <LCD_vidInit+0x448>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c46:	fe 01       	movw	r30, r28
    1c48:	ff 96       	adiw	r30, 0x3f	; 63
    1c4a:	60 81       	ld	r22, Z
    1c4c:	71 81       	ldd	r23, Z+1	; 0x01
    1c4e:	82 81       	ldd	r24, Z+2	; 0x02
    1c50:	93 81       	ldd	r25, Z+3	; 0x03
    1c52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c56:	dc 01       	movw	r26, r24
    1c58:	cb 01       	movw	r24, r22
    1c5a:	9e af       	std	Y+62, r25	; 0x3e
    1c5c:	8d af       	std	Y+61, r24	; 0x3d
    1c5e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c60:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c62:	9a af       	std	Y+58, r25	; 0x3a
    1c64:	89 af       	std	Y+57, r24	; 0x39
    1c66:	89 ad       	ldd	r24, Y+57	; 0x39
    1c68:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c6a:	01 97       	sbiw	r24, 0x01	; 1
    1c6c:	f1 f7       	brne	.-4      	; 0x1c6a <LCD_vidInit+0x440>
    1c6e:	9a af       	std	Y+58, r25	; 0x3a
    1c70:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(2);
	LCD_vidSendEnable();
    1c72:	0e 94 86 0b 	call	0x170c	; 0x170c <LCD_vidSendEnable>

	DIO_enuSetPinValue(LCD_u8_D6_PORT, LCD_u8_D6_PIN, GET_BIT(LCD_u8_FONT_SIZE, DIO_u8_PIN2));
    1c76:	82 e0       	ldi	r24, 0x02	; 2
    1c78:	66 e0       	ldi	r22, 0x06	; 6
    1c7a:	40 e0       	ldi	r20, 0x00	; 0
    1c7c:	0e 94 51 09 	call	0x12a2	; 0x12a2 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(LCD_u8_D7_PORT, LCD_u8_D7_PIN, GET_BIT(LCD_u8_NUMBER_OF_LINES, DIO_u8_PIN3));
    1c80:	82 e0       	ldi	r24, 0x02	; 2
    1c82:	67 e0       	ldi	r22, 0x07	; 7
    1c84:	41 e0       	ldi	r20, 0x01	; 1
    1c86:	0e 94 51 09 	call	0x12a2	; 0x12a2 <DIO_enuSetPinValue>
    1c8a:	80 e0       	ldi	r24, 0x00	; 0
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	a0 e0       	ldi	r26, 0x00	; 0
    1c90:	b0 e4       	ldi	r27, 0x40	; 64
    1c92:	8d ab       	std	Y+53, r24	; 0x35
    1c94:	9e ab       	std	Y+54, r25	; 0x36
    1c96:	af ab       	std	Y+55, r26	; 0x37
    1c98:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c9a:	6d a9       	ldd	r22, Y+53	; 0x35
    1c9c:	7e a9       	ldd	r23, Y+54	; 0x36
    1c9e:	8f a9       	ldd	r24, Y+55	; 0x37
    1ca0:	98 ad       	ldd	r25, Y+56	; 0x38
    1ca2:	20 e0       	ldi	r18, 0x00	; 0
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	4a e7       	ldi	r20, 0x7A	; 122
    1ca8:	55 e4       	ldi	r21, 0x45	; 69
    1caa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cae:	dc 01       	movw	r26, r24
    1cb0:	cb 01       	movw	r24, r22
    1cb2:	89 ab       	std	Y+49, r24	; 0x31
    1cb4:	9a ab       	std	Y+50, r25	; 0x32
    1cb6:	ab ab       	std	Y+51, r26	; 0x33
    1cb8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1cba:	69 a9       	ldd	r22, Y+49	; 0x31
    1cbc:	7a a9       	ldd	r23, Y+50	; 0x32
    1cbe:	8b a9       	ldd	r24, Y+51	; 0x33
    1cc0:	9c a9       	ldd	r25, Y+52	; 0x34
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	40 e8       	ldi	r20, 0x80	; 128
    1cc8:	5f e3       	ldi	r21, 0x3F	; 63
    1cca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cce:	88 23       	and	r24, r24
    1cd0:	2c f4       	brge	.+10     	; 0x1cdc <LCD_vidInit+0x4b2>
		__ticks = 1;
    1cd2:	81 e0       	ldi	r24, 0x01	; 1
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	98 ab       	std	Y+48, r25	; 0x30
    1cd8:	8f a7       	std	Y+47, r24	; 0x2f
    1cda:	3f c0       	rjmp	.+126    	; 0x1d5a <LCD_vidInit+0x530>
	else if (__tmp > 65535)
    1cdc:	69 a9       	ldd	r22, Y+49	; 0x31
    1cde:	7a a9       	ldd	r23, Y+50	; 0x32
    1ce0:	8b a9       	ldd	r24, Y+51	; 0x33
    1ce2:	9c a9       	ldd	r25, Y+52	; 0x34
    1ce4:	20 e0       	ldi	r18, 0x00	; 0
    1ce6:	3f ef       	ldi	r19, 0xFF	; 255
    1ce8:	4f e7       	ldi	r20, 0x7F	; 127
    1cea:	57 e4       	ldi	r21, 0x47	; 71
    1cec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cf0:	18 16       	cp	r1, r24
    1cf2:	4c f5       	brge	.+82     	; 0x1d46 <LCD_vidInit+0x51c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cf4:	6d a9       	ldd	r22, Y+53	; 0x35
    1cf6:	7e a9       	ldd	r23, Y+54	; 0x36
    1cf8:	8f a9       	ldd	r24, Y+55	; 0x37
    1cfa:	98 ad       	ldd	r25, Y+56	; 0x38
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	40 e2       	ldi	r20, 0x20	; 32
    1d02:	51 e4       	ldi	r21, 0x41	; 65
    1d04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d08:	dc 01       	movw	r26, r24
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	bc 01       	movw	r22, r24
    1d0e:	cd 01       	movw	r24, r26
    1d10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d14:	dc 01       	movw	r26, r24
    1d16:	cb 01       	movw	r24, r22
    1d18:	98 ab       	std	Y+48, r25	; 0x30
    1d1a:	8f a7       	std	Y+47, r24	; 0x2f
    1d1c:	0f c0       	rjmp	.+30     	; 0x1d3c <LCD_vidInit+0x512>
    1d1e:	80 e9       	ldi	r24, 0x90	; 144
    1d20:	91 e0       	ldi	r25, 0x01	; 1
    1d22:	9e a7       	std	Y+46, r25	; 0x2e
    1d24:	8d a7       	std	Y+45, r24	; 0x2d
    1d26:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d28:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d2a:	01 97       	sbiw	r24, 0x01	; 1
    1d2c:	f1 f7       	brne	.-4      	; 0x1d2a <LCD_vidInit+0x500>
    1d2e:	9e a7       	std	Y+46, r25	; 0x2e
    1d30:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d32:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d34:	98 a9       	ldd	r25, Y+48	; 0x30
    1d36:	01 97       	sbiw	r24, 0x01	; 1
    1d38:	98 ab       	std	Y+48, r25	; 0x30
    1d3a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d3c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d3e:	98 a9       	ldd	r25, Y+48	; 0x30
    1d40:	00 97       	sbiw	r24, 0x00	; 0
    1d42:	69 f7       	brne	.-38     	; 0x1d1e <LCD_vidInit+0x4f4>
    1d44:	14 c0       	rjmp	.+40     	; 0x1d6e <LCD_vidInit+0x544>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d46:	69 a9       	ldd	r22, Y+49	; 0x31
    1d48:	7a a9       	ldd	r23, Y+50	; 0x32
    1d4a:	8b a9       	ldd	r24, Y+51	; 0x33
    1d4c:	9c a9       	ldd	r25, Y+52	; 0x34
    1d4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d52:	dc 01       	movw	r26, r24
    1d54:	cb 01       	movw	r24, r22
    1d56:	98 ab       	std	Y+48, r25	; 0x30
    1d58:	8f a7       	std	Y+47, r24	; 0x2f
    1d5a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d5c:	98 a9       	ldd	r25, Y+48	; 0x30
    1d5e:	9c a7       	std	Y+44, r25	; 0x2c
    1d60:	8b a7       	std	Y+43, r24	; 0x2b
    1d62:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d64:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d66:	01 97       	sbiw	r24, 0x01	; 1
    1d68:	f1 f7       	brne	.-4      	; 0x1d66 <LCD_vidInit+0x53c>
    1d6a:	9c a7       	std	Y+44, r25	; 0x2c
    1d6c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	LCD_vidSendEnable();
    1d6e:	0e 94 86 0b 	call	0x170c	; 0x170c <LCD_vidSendEnable>

	/*display control init*/
	LCD_enuSendInstruction(LCD_u8_DISPLAY_CONTROL);
    1d72:	8c e0       	ldi	r24, 0x0C	; 12
    1d74:	0e 94 11 11 	call	0x2222	; 0x2222 <LCD_enuSendInstruction>
    1d78:	80 e0       	ldi	r24, 0x00	; 0
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	a0 e0       	ldi	r26, 0x00	; 0
    1d7e:	b0 e4       	ldi	r27, 0x40	; 64
    1d80:	8f a3       	std	Y+39, r24	; 0x27
    1d82:	98 a7       	std	Y+40, r25	; 0x28
    1d84:	a9 a7       	std	Y+41, r26	; 0x29
    1d86:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d88:	6f a1       	ldd	r22, Y+39	; 0x27
    1d8a:	78 a5       	ldd	r23, Y+40	; 0x28
    1d8c:	89 a5       	ldd	r24, Y+41	; 0x29
    1d8e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d90:	20 e0       	ldi	r18, 0x00	; 0
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	4a e7       	ldi	r20, 0x7A	; 122
    1d96:	55 e4       	ldi	r21, 0x45	; 69
    1d98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d9c:	dc 01       	movw	r26, r24
    1d9e:	cb 01       	movw	r24, r22
    1da0:	8b a3       	std	Y+35, r24	; 0x23
    1da2:	9c a3       	std	Y+36, r25	; 0x24
    1da4:	ad a3       	std	Y+37, r26	; 0x25
    1da6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1da8:	6b a1       	ldd	r22, Y+35	; 0x23
    1daa:	7c a1       	ldd	r23, Y+36	; 0x24
    1dac:	8d a1       	ldd	r24, Y+37	; 0x25
    1dae:	9e a1       	ldd	r25, Y+38	; 0x26
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	40 e8       	ldi	r20, 0x80	; 128
    1db6:	5f e3       	ldi	r21, 0x3F	; 63
    1db8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dbc:	88 23       	and	r24, r24
    1dbe:	2c f4       	brge	.+10     	; 0x1dca <LCD_vidInit+0x5a0>
		__ticks = 1;
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	9a a3       	std	Y+34, r25	; 0x22
    1dc6:	89 a3       	std	Y+33, r24	; 0x21
    1dc8:	3f c0       	rjmp	.+126    	; 0x1e48 <LCD_vidInit+0x61e>
	else if (__tmp > 65535)
    1dca:	6b a1       	ldd	r22, Y+35	; 0x23
    1dcc:	7c a1       	ldd	r23, Y+36	; 0x24
    1dce:	8d a1       	ldd	r24, Y+37	; 0x25
    1dd0:	9e a1       	ldd	r25, Y+38	; 0x26
    1dd2:	20 e0       	ldi	r18, 0x00	; 0
    1dd4:	3f ef       	ldi	r19, 0xFF	; 255
    1dd6:	4f e7       	ldi	r20, 0x7F	; 127
    1dd8:	57 e4       	ldi	r21, 0x47	; 71
    1dda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dde:	18 16       	cp	r1, r24
    1de0:	4c f5       	brge	.+82     	; 0x1e34 <LCD_vidInit+0x60a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1de2:	6f a1       	ldd	r22, Y+39	; 0x27
    1de4:	78 a5       	ldd	r23, Y+40	; 0x28
    1de6:	89 a5       	ldd	r24, Y+41	; 0x29
    1de8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dea:	20 e0       	ldi	r18, 0x00	; 0
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	40 e2       	ldi	r20, 0x20	; 32
    1df0:	51 e4       	ldi	r21, 0x41	; 65
    1df2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df6:	dc 01       	movw	r26, r24
    1df8:	cb 01       	movw	r24, r22
    1dfa:	bc 01       	movw	r22, r24
    1dfc:	cd 01       	movw	r24, r26
    1dfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e02:	dc 01       	movw	r26, r24
    1e04:	cb 01       	movw	r24, r22
    1e06:	9a a3       	std	Y+34, r25	; 0x22
    1e08:	89 a3       	std	Y+33, r24	; 0x21
    1e0a:	0f c0       	rjmp	.+30     	; 0x1e2a <LCD_vidInit+0x600>
    1e0c:	80 e9       	ldi	r24, 0x90	; 144
    1e0e:	91 e0       	ldi	r25, 0x01	; 1
    1e10:	98 a3       	std	Y+32, r25	; 0x20
    1e12:	8f 8f       	std	Y+31, r24	; 0x1f
    1e14:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e16:	98 a1       	ldd	r25, Y+32	; 0x20
    1e18:	01 97       	sbiw	r24, 0x01	; 1
    1e1a:	f1 f7       	brne	.-4      	; 0x1e18 <LCD_vidInit+0x5ee>
    1e1c:	98 a3       	std	Y+32, r25	; 0x20
    1e1e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e20:	89 a1       	ldd	r24, Y+33	; 0x21
    1e22:	9a a1       	ldd	r25, Y+34	; 0x22
    1e24:	01 97       	sbiw	r24, 0x01	; 1
    1e26:	9a a3       	std	Y+34, r25	; 0x22
    1e28:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e2a:	89 a1       	ldd	r24, Y+33	; 0x21
    1e2c:	9a a1       	ldd	r25, Y+34	; 0x22
    1e2e:	00 97       	sbiw	r24, 0x00	; 0
    1e30:	69 f7       	brne	.-38     	; 0x1e0c <LCD_vidInit+0x5e2>
    1e32:	14 c0       	rjmp	.+40     	; 0x1e5c <LCD_vidInit+0x632>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e34:	6b a1       	ldd	r22, Y+35	; 0x23
    1e36:	7c a1       	ldd	r23, Y+36	; 0x24
    1e38:	8d a1       	ldd	r24, Y+37	; 0x25
    1e3a:	9e a1       	ldd	r25, Y+38	; 0x26
    1e3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e40:	dc 01       	movw	r26, r24
    1e42:	cb 01       	movw	r24, r22
    1e44:	9a a3       	std	Y+34, r25	; 0x22
    1e46:	89 a3       	std	Y+33, r24	; 0x21
    1e48:	89 a1       	ldd	r24, Y+33	; 0x21
    1e4a:	9a a1       	ldd	r25, Y+34	; 0x22
    1e4c:	9e 8f       	std	Y+30, r25	; 0x1e
    1e4e:	8d 8f       	std	Y+29, r24	; 0x1d
    1e50:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e52:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e54:	01 97       	sbiw	r24, 0x01	; 1
    1e56:	f1 f7       	brne	.-4      	; 0x1e54 <LCD_vidInit+0x62a>
    1e58:	9e 8f       	std	Y+30, r25	; 0x1e
    1e5a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);

	/*clear display*/
	LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	0e 94 11 11 	call	0x2222	; 0x2222 <LCD_enuSendInstruction>
    1e62:	80 e0       	ldi	r24, 0x00	; 0
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	a0 e0       	ldi	r26, 0x00	; 0
    1e68:	b0 e4       	ldi	r27, 0x40	; 64
    1e6a:	89 8f       	std	Y+25, r24	; 0x19
    1e6c:	9a 8f       	std	Y+26, r25	; 0x1a
    1e6e:	ab 8f       	std	Y+27, r26	; 0x1b
    1e70:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e72:	69 8d       	ldd	r22, Y+25	; 0x19
    1e74:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e7a:	20 e0       	ldi	r18, 0x00	; 0
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	4a e7       	ldi	r20, 0x7A	; 122
    1e80:	55 e4       	ldi	r21, 0x45	; 69
    1e82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e86:	dc 01       	movw	r26, r24
    1e88:	cb 01       	movw	r24, r22
    1e8a:	8d 8b       	std	Y+21, r24	; 0x15
    1e8c:	9e 8b       	std	Y+22, r25	; 0x16
    1e8e:	af 8b       	std	Y+23, r26	; 0x17
    1e90:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e92:	6d 89       	ldd	r22, Y+21	; 0x15
    1e94:	7e 89       	ldd	r23, Y+22	; 0x16
    1e96:	8f 89       	ldd	r24, Y+23	; 0x17
    1e98:	98 8d       	ldd	r25, Y+24	; 0x18
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	40 e8       	ldi	r20, 0x80	; 128
    1ea0:	5f e3       	ldi	r21, 0x3F	; 63
    1ea2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ea6:	88 23       	and	r24, r24
    1ea8:	2c f4       	brge	.+10     	; 0x1eb4 <LCD_vidInit+0x68a>
		__ticks = 1;
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	9c 8b       	std	Y+20, r25	; 0x14
    1eb0:	8b 8b       	std	Y+19, r24	; 0x13
    1eb2:	3f c0       	rjmp	.+126    	; 0x1f32 <LCD_vidInit+0x708>
	else if (__tmp > 65535)
    1eb4:	6d 89       	ldd	r22, Y+21	; 0x15
    1eb6:	7e 89       	ldd	r23, Y+22	; 0x16
    1eb8:	8f 89       	ldd	r24, Y+23	; 0x17
    1eba:	98 8d       	ldd	r25, Y+24	; 0x18
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	3f ef       	ldi	r19, 0xFF	; 255
    1ec0:	4f e7       	ldi	r20, 0x7F	; 127
    1ec2:	57 e4       	ldi	r21, 0x47	; 71
    1ec4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ec8:	18 16       	cp	r1, r24
    1eca:	4c f5       	brge	.+82     	; 0x1f1e <LCD_vidInit+0x6f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ecc:	69 8d       	ldd	r22, Y+25	; 0x19
    1ece:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ed0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ed2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	40 e2       	ldi	r20, 0x20	; 32
    1eda:	51 e4       	ldi	r21, 0x41	; 65
    1edc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	bc 01       	movw	r22, r24
    1ee6:	cd 01       	movw	r24, r26
    1ee8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eec:	dc 01       	movw	r26, r24
    1eee:	cb 01       	movw	r24, r22
    1ef0:	9c 8b       	std	Y+20, r25	; 0x14
    1ef2:	8b 8b       	std	Y+19, r24	; 0x13
    1ef4:	0f c0       	rjmp	.+30     	; 0x1f14 <LCD_vidInit+0x6ea>
    1ef6:	80 e9       	ldi	r24, 0x90	; 144
    1ef8:	91 e0       	ldi	r25, 0x01	; 1
    1efa:	9a 8b       	std	Y+18, r25	; 0x12
    1efc:	89 8b       	std	Y+17, r24	; 0x11
    1efe:	89 89       	ldd	r24, Y+17	; 0x11
    1f00:	9a 89       	ldd	r25, Y+18	; 0x12
    1f02:	01 97       	sbiw	r24, 0x01	; 1
    1f04:	f1 f7       	brne	.-4      	; 0x1f02 <LCD_vidInit+0x6d8>
    1f06:	9a 8b       	std	Y+18, r25	; 0x12
    1f08:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f0a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f0c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f0e:	01 97       	sbiw	r24, 0x01	; 1
    1f10:	9c 8b       	std	Y+20, r25	; 0x14
    1f12:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f14:	8b 89       	ldd	r24, Y+19	; 0x13
    1f16:	9c 89       	ldd	r25, Y+20	; 0x14
    1f18:	00 97       	sbiw	r24, 0x00	; 0
    1f1a:	69 f7       	brne	.-38     	; 0x1ef6 <LCD_vidInit+0x6cc>
    1f1c:	14 c0       	rjmp	.+40     	; 0x1f46 <LCD_vidInit+0x71c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f1e:	6d 89       	ldd	r22, Y+21	; 0x15
    1f20:	7e 89       	ldd	r23, Y+22	; 0x16
    1f22:	8f 89       	ldd	r24, Y+23	; 0x17
    1f24:	98 8d       	ldd	r25, Y+24	; 0x18
    1f26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	9c 8b       	std	Y+20, r25	; 0x14
    1f30:	8b 8b       	std	Y+19, r24	; 0x13
    1f32:	8b 89       	ldd	r24, Y+19	; 0x13
    1f34:	9c 89       	ldd	r25, Y+20	; 0x14
    1f36:	98 8b       	std	Y+16, r25	; 0x10
    1f38:	8f 87       	std	Y+15, r24	; 0x0f
    1f3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f3c:	98 89       	ldd	r25, Y+16	; 0x10
    1f3e:	01 97       	sbiw	r24, 0x01	; 1
    1f40:	f1 f7       	brne	.-4      	; 0x1f3e <LCD_vidInit+0x714>
    1f42:	98 8b       	std	Y+16, r25	; 0x10
    1f44:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);

	/*entry mode set init */
	LCD_enuSendInstruction(LCD_u8_ENTRY_MODE_SET);
    1f46:	86 e0       	ldi	r24, 0x06	; 6
    1f48:	0e 94 11 11 	call	0x2222	; 0x2222 <LCD_enuSendInstruction>
    1f4c:	80 e0       	ldi	r24, 0x00	; 0
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	a0 e0       	ldi	r26, 0x00	; 0
    1f52:	b0 e4       	ldi	r27, 0x40	; 64
    1f54:	8b 87       	std	Y+11, r24	; 0x0b
    1f56:	9c 87       	std	Y+12, r25	; 0x0c
    1f58:	ad 87       	std	Y+13, r26	; 0x0d
    1f5a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f60:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f62:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f64:	20 e0       	ldi	r18, 0x00	; 0
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	4a e7       	ldi	r20, 0x7A	; 122
    1f6a:	55 e4       	ldi	r21, 0x45	; 69
    1f6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	8f 83       	std	Y+7, r24	; 0x07
    1f76:	98 87       	std	Y+8, r25	; 0x08
    1f78:	a9 87       	std	Y+9, r26	; 0x09
    1f7a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f7c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f7e:	78 85       	ldd	r23, Y+8	; 0x08
    1f80:	89 85       	ldd	r24, Y+9	; 0x09
    1f82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f84:	20 e0       	ldi	r18, 0x00	; 0
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	40 e8       	ldi	r20, 0x80	; 128
    1f8a:	5f e3       	ldi	r21, 0x3F	; 63
    1f8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f90:	88 23       	and	r24, r24
    1f92:	2c f4       	brge	.+10     	; 0x1f9e <LCD_vidInit+0x774>
		__ticks = 1;
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	9e 83       	std	Y+6, r25	; 0x06
    1f9a:	8d 83       	std	Y+5, r24	; 0x05
    1f9c:	3f c0       	rjmp	.+126    	; 0x201c <LCD_vidInit+0x7f2>
	else if (__tmp > 65535)
    1f9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1fa0:	78 85       	ldd	r23, Y+8	; 0x08
    1fa2:	89 85       	ldd	r24, Y+9	; 0x09
    1fa4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fa6:	20 e0       	ldi	r18, 0x00	; 0
    1fa8:	3f ef       	ldi	r19, 0xFF	; 255
    1faa:	4f e7       	ldi	r20, 0x7F	; 127
    1fac:	57 e4       	ldi	r21, 0x47	; 71
    1fae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fb2:	18 16       	cp	r1, r24
    1fb4:	4c f5       	brge	.+82     	; 0x2008 <LCD_vidInit+0x7de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fba:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	40 e2       	ldi	r20, 0x20	; 32
    1fc4:	51 e4       	ldi	r21, 0x41	; 65
    1fc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fca:	dc 01       	movw	r26, r24
    1fcc:	cb 01       	movw	r24, r22
    1fce:	bc 01       	movw	r22, r24
    1fd0:	cd 01       	movw	r24, r26
    1fd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	9e 83       	std	Y+6, r25	; 0x06
    1fdc:	8d 83       	std	Y+5, r24	; 0x05
    1fde:	0f c0       	rjmp	.+30     	; 0x1ffe <LCD_vidInit+0x7d4>
    1fe0:	80 e9       	ldi	r24, 0x90	; 144
    1fe2:	91 e0       	ldi	r25, 0x01	; 1
    1fe4:	9c 83       	std	Y+4, r25	; 0x04
    1fe6:	8b 83       	std	Y+3, r24	; 0x03
    1fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fea:	9c 81       	ldd	r25, Y+4	; 0x04
    1fec:	01 97       	sbiw	r24, 0x01	; 1
    1fee:	f1 f7       	brne	.-4      	; 0x1fec <LCD_vidInit+0x7c2>
    1ff0:	9c 83       	std	Y+4, r25	; 0x04
    1ff2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff8:	01 97       	sbiw	r24, 0x01	; 1
    1ffa:	9e 83       	std	Y+6, r25	; 0x06
    1ffc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    2000:	9e 81       	ldd	r25, Y+6	; 0x06
    2002:	00 97       	sbiw	r24, 0x00	; 0
    2004:	69 f7       	brne	.-38     	; 0x1fe0 <LCD_vidInit+0x7b6>
    2006:	14 c0       	rjmp	.+40     	; 0x2030 <LCD_vidInit+0x806>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2008:	6f 81       	ldd	r22, Y+7	; 0x07
    200a:	78 85       	ldd	r23, Y+8	; 0x08
    200c:	89 85       	ldd	r24, Y+9	; 0x09
    200e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2010:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2014:	dc 01       	movw	r26, r24
    2016:	cb 01       	movw	r24, r22
    2018:	9e 83       	std	Y+6, r25	; 0x06
    201a:	8d 83       	std	Y+5, r24	; 0x05
    201c:	8d 81       	ldd	r24, Y+5	; 0x05
    201e:	9e 81       	ldd	r25, Y+6	; 0x06
    2020:	9a 83       	std	Y+2, r25	; 0x02
    2022:	89 83       	std	Y+1, r24	; 0x01
    2024:	89 81       	ldd	r24, Y+1	; 0x01
    2026:	9a 81       	ldd	r25, Y+2	; 0x02
    2028:	01 97       	sbiw	r24, 0x01	; 1
    202a:	f1 f7       	brne	.-4      	; 0x2028 <LCD_vidInit+0x7fe>
    202c:	9a 83       	std	Y+2, r25	; 0x02
    202e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
#endif
}
    2030:	ce 59       	subi	r28, 0x9E	; 158
    2032:	df 4f       	sbci	r29, 0xFF	; 255
    2034:	0f b6       	in	r0, 0x3f	; 63
    2036:	f8 94       	cli
    2038:	de bf       	out	0x3e, r29	; 62
    203a:	0f be       	out	0x3f, r0	; 63
    203c:	cd bf       	out	0x3d, r28	; 61
    203e:	cf 91       	pop	r28
    2040:	df 91       	pop	r29
    2042:	1f 91       	pop	r17
    2044:	0f 91       	pop	r16
    2046:	08 95       	ret

00002048 <LCD_enuSendCharacter>:
 * Description: Send character to be displayed on LCD
 * Arguments: 	First Argument : Copy_u8Character, options(any character on ASCII table)
 * Return :	  	LCD_tenu_ErrorStatus
 * */
LCD_tenu_ErrorStatus LCD_enuSendCharacter(u8 Copy_u8Character)
{
    2048:	df 93       	push	r29
    204a:	cf 93       	push	r28
    204c:	cd b7       	in	r28, 0x3d	; 61
    204e:	de b7       	in	r29, 0x3e	; 62
    2050:	60 97       	sbiw	r28, 0x10	; 16
    2052:	0f b6       	in	r0, 0x3f	; 63
    2054:	f8 94       	cli
    2056:	de bf       	out	0x3e, r29	; 62
    2058:	0f be       	out	0x3f, r0	; 63
    205a:	cd bf       	out	0x3d, r28	; 61
    205c:	88 8b       	std	Y+16, r24	; 0x10
	LCD_tenu_ErrorStatus Local_enuErrorStatus = LCD_OK;
    205e:	1f 86       	std	Y+15, r1	; 0x0f

	if (Copy_u8Character > 127)
    2060:	88 89       	ldd	r24, Y+16	; 0x10
    2062:	88 23       	and	r24, r24
    2064:	1c f4       	brge	.+6      	; 0x206c <LCD_enuSendCharacter+0x24>
	{
		Local_enuErrorStatus = LCD_NOK;
    2066:	81 e0       	ldi	r24, 0x01	; 1
    2068:	8f 87       	std	Y+15, r24	; 0x0f
    206a:	d1 c0       	rjmp	.+418    	; 0x220e <LCD_enuSendCharacter+0x1c6>
		/*Send Enable*/
		LCD_vidSendEnable();
#elif LCD_u8_DATA_LENGTH ==LCD_u8_4_BIT_MODE

		/*RS pin ---> High*/
		DIO_enuSetPinValue(LCD_u8_RS_PORT, LCD_u8_RS_PIN, DIO_u8_HIGH);
    206c:	82 e0       	ldi	r24, 0x02	; 2
    206e:	61 e0       	ldi	r22, 0x01	; 1
    2070:	41 e0       	ldi	r20, 0x01	; 1
    2072:	0e 94 51 09 	call	0x12a2	; 0x12a2 <DIO_enuSetPinValue>

		/*RW pin ---> low*/
		DIO_enuSetPinValue(LCD_u8_RW_PORT, LCD_u8_RW_PIN, DIO_u8_LOW);
    2076:	82 e0       	ldi	r24, 0x02	; 2
    2078:	62 e0       	ldi	r22, 0x02	; 2
    207a:	40 e0       	ldi	r20, 0x00	; 0
    207c:	0e 94 51 09 	call	0x12a2	; 0x12a2 <DIO_enuSetPinValue>
		/*Send instruction*/

		DIO_enuSetPinValue(LCD_u8_D4_PORT, LCD_u8_D4_PIN, GET_BIT(Copy_u8Character, DIO_u8_PIN4));
    2080:	88 89       	ldd	r24, Y+16	; 0x10
    2082:	82 95       	swap	r24
    2084:	8f 70       	andi	r24, 0x0F	; 15
    2086:	98 2f       	mov	r25, r24
    2088:	91 70       	andi	r25, 0x01	; 1
    208a:	82 e0       	ldi	r24, 0x02	; 2
    208c:	64 e0       	ldi	r22, 0x04	; 4
    208e:	49 2f       	mov	r20, r25
    2090:	0e 94 51 09 	call	0x12a2	; 0x12a2 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(LCD_u8_D5_PORT, LCD_u8_D5_PIN, GET_BIT(Copy_u8Character, DIO_u8_PIN5));
    2094:	88 89       	ldd	r24, Y+16	; 0x10
    2096:	82 95       	swap	r24
    2098:	86 95       	lsr	r24
    209a:	87 70       	andi	r24, 0x07	; 7
    209c:	98 2f       	mov	r25, r24
    209e:	91 70       	andi	r25, 0x01	; 1
    20a0:	82 e0       	ldi	r24, 0x02	; 2
    20a2:	65 e0       	ldi	r22, 0x05	; 5
    20a4:	49 2f       	mov	r20, r25
    20a6:	0e 94 51 09 	call	0x12a2	; 0x12a2 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(LCD_u8_D6_PORT, LCD_u8_D6_PIN, GET_BIT(Copy_u8Character, DIO_u8_PIN6));
    20aa:	88 89       	ldd	r24, Y+16	; 0x10
    20ac:	82 95       	swap	r24
    20ae:	86 95       	lsr	r24
    20b0:	86 95       	lsr	r24
    20b2:	83 70       	andi	r24, 0x03	; 3
    20b4:	98 2f       	mov	r25, r24
    20b6:	91 70       	andi	r25, 0x01	; 1
    20b8:	82 e0       	ldi	r24, 0x02	; 2
    20ba:	66 e0       	ldi	r22, 0x06	; 6
    20bc:	49 2f       	mov	r20, r25
    20be:	0e 94 51 09 	call	0x12a2	; 0x12a2 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(LCD_u8_D7_PORT, LCD_u8_D7_PIN, GET_BIT(Copy_u8Character, DIO_u8_PIN7));
    20c2:	88 89       	ldd	r24, Y+16	; 0x10
    20c4:	98 2f       	mov	r25, r24
    20c6:	99 1f       	adc	r25, r25
    20c8:	99 27       	eor	r25, r25
    20ca:	99 1f       	adc	r25, r25
    20cc:	82 e0       	ldi	r24, 0x02	; 2
    20ce:	67 e0       	ldi	r22, 0x07	; 7
    20d0:	49 2f       	mov	r20, r25
    20d2:	0e 94 51 09 	call	0x12a2	; 0x12a2 <DIO_enuSetPinValue>
		LCD_vidSendEnable();
    20d6:	0e 94 86 0b 	call	0x170c	; 0x170c <LCD_vidSendEnable>
    20da:	80 e0       	ldi	r24, 0x00	; 0
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	a0 e0       	ldi	r26, 0x00	; 0
    20e0:	b0 e4       	ldi	r27, 0x40	; 64
    20e2:	8b 87       	std	Y+11, r24	; 0x0b
    20e4:	9c 87       	std	Y+12, r25	; 0x0c
    20e6:	ad 87       	std	Y+13, r26	; 0x0d
    20e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    20ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    20ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    20f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    20f2:	20 e0       	ldi	r18, 0x00	; 0
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	4a e7       	ldi	r20, 0x7A	; 122
    20f8:	55 e4       	ldi	r21, 0x45	; 69
    20fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20fe:	dc 01       	movw	r26, r24
    2100:	cb 01       	movw	r24, r22
    2102:	8f 83       	std	Y+7, r24	; 0x07
    2104:	98 87       	std	Y+8, r25	; 0x08
    2106:	a9 87       	std	Y+9, r26	; 0x09
    2108:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    210a:	6f 81       	ldd	r22, Y+7	; 0x07
    210c:	78 85       	ldd	r23, Y+8	; 0x08
    210e:	89 85       	ldd	r24, Y+9	; 0x09
    2110:	9a 85       	ldd	r25, Y+10	; 0x0a
    2112:	20 e0       	ldi	r18, 0x00	; 0
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	40 e8       	ldi	r20, 0x80	; 128
    2118:	5f e3       	ldi	r21, 0x3F	; 63
    211a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    211e:	88 23       	and	r24, r24
    2120:	2c f4       	brge	.+10     	; 0x212c <LCD_enuSendCharacter+0xe4>
		__ticks = 1;
    2122:	81 e0       	ldi	r24, 0x01	; 1
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	9e 83       	std	Y+6, r25	; 0x06
    2128:	8d 83       	std	Y+5, r24	; 0x05
    212a:	3f c0       	rjmp	.+126    	; 0x21aa <LCD_enuSendCharacter+0x162>
	else if (__tmp > 65535)
    212c:	6f 81       	ldd	r22, Y+7	; 0x07
    212e:	78 85       	ldd	r23, Y+8	; 0x08
    2130:	89 85       	ldd	r24, Y+9	; 0x09
    2132:	9a 85       	ldd	r25, Y+10	; 0x0a
    2134:	20 e0       	ldi	r18, 0x00	; 0
    2136:	3f ef       	ldi	r19, 0xFF	; 255
    2138:	4f e7       	ldi	r20, 0x7F	; 127
    213a:	57 e4       	ldi	r21, 0x47	; 71
    213c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2140:	18 16       	cp	r1, r24
    2142:	4c f5       	brge	.+82     	; 0x2196 <LCD_enuSendCharacter+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2144:	6b 85       	ldd	r22, Y+11	; 0x0b
    2146:	7c 85       	ldd	r23, Y+12	; 0x0c
    2148:	8d 85       	ldd	r24, Y+13	; 0x0d
    214a:	9e 85       	ldd	r25, Y+14	; 0x0e
    214c:	20 e0       	ldi	r18, 0x00	; 0
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	40 e2       	ldi	r20, 0x20	; 32
    2152:	51 e4       	ldi	r21, 0x41	; 65
    2154:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2158:	dc 01       	movw	r26, r24
    215a:	cb 01       	movw	r24, r22
    215c:	bc 01       	movw	r22, r24
    215e:	cd 01       	movw	r24, r26
    2160:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2164:	dc 01       	movw	r26, r24
    2166:	cb 01       	movw	r24, r22
    2168:	9e 83       	std	Y+6, r25	; 0x06
    216a:	8d 83       	std	Y+5, r24	; 0x05
    216c:	0f c0       	rjmp	.+30     	; 0x218c <LCD_enuSendCharacter+0x144>
    216e:	80 e9       	ldi	r24, 0x90	; 144
    2170:	91 e0       	ldi	r25, 0x01	; 1
    2172:	9c 83       	std	Y+4, r25	; 0x04
    2174:	8b 83       	std	Y+3, r24	; 0x03
    2176:	8b 81       	ldd	r24, Y+3	; 0x03
    2178:	9c 81       	ldd	r25, Y+4	; 0x04
    217a:	01 97       	sbiw	r24, 0x01	; 1
    217c:	f1 f7       	brne	.-4      	; 0x217a <LCD_enuSendCharacter+0x132>
    217e:	9c 83       	std	Y+4, r25	; 0x04
    2180:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2182:	8d 81       	ldd	r24, Y+5	; 0x05
    2184:	9e 81       	ldd	r25, Y+6	; 0x06
    2186:	01 97       	sbiw	r24, 0x01	; 1
    2188:	9e 83       	std	Y+6, r25	; 0x06
    218a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    218c:	8d 81       	ldd	r24, Y+5	; 0x05
    218e:	9e 81       	ldd	r25, Y+6	; 0x06
    2190:	00 97       	sbiw	r24, 0x00	; 0
    2192:	69 f7       	brne	.-38     	; 0x216e <LCD_enuSendCharacter+0x126>
    2194:	14 c0       	rjmp	.+40     	; 0x21be <LCD_enuSendCharacter+0x176>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2196:	6f 81       	ldd	r22, Y+7	; 0x07
    2198:	78 85       	ldd	r23, Y+8	; 0x08
    219a:	89 85       	ldd	r24, Y+9	; 0x09
    219c:	9a 85       	ldd	r25, Y+10	; 0x0a
    219e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a2:	dc 01       	movw	r26, r24
    21a4:	cb 01       	movw	r24, r22
    21a6:	9e 83       	std	Y+6, r25	; 0x06
    21a8:	8d 83       	std	Y+5, r24	; 0x05
    21aa:	8d 81       	ldd	r24, Y+5	; 0x05
    21ac:	9e 81       	ldd	r25, Y+6	; 0x06
    21ae:	9a 83       	std	Y+2, r25	; 0x02
    21b0:	89 83       	std	Y+1, r24	; 0x01
    21b2:	89 81       	ldd	r24, Y+1	; 0x01
    21b4:	9a 81       	ldd	r25, Y+2	; 0x02
    21b6:	01 97       	sbiw	r24, 0x01	; 1
    21b8:	f1 f7       	brne	.-4      	; 0x21b6 <LCD_enuSendCharacter+0x16e>
    21ba:	9a 83       	std	Y+2, r25	; 0x02
    21bc:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);

		DIO_enuSetPinValue(LCD_u8_D4_PORT, LCD_u8_D4_PIN, GET_BIT(Copy_u8Character, DIO_u8_PIN0));
    21be:	88 89       	ldd	r24, Y+16	; 0x10
    21c0:	98 2f       	mov	r25, r24
    21c2:	91 70       	andi	r25, 0x01	; 1
    21c4:	82 e0       	ldi	r24, 0x02	; 2
    21c6:	64 e0       	ldi	r22, 0x04	; 4
    21c8:	49 2f       	mov	r20, r25
    21ca:	0e 94 51 09 	call	0x12a2	; 0x12a2 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(LCD_u8_D5_PORT, LCD_u8_D5_PIN, GET_BIT(Copy_u8Character, DIO_u8_PIN1));
    21ce:	88 89       	ldd	r24, Y+16	; 0x10
    21d0:	86 95       	lsr	r24
    21d2:	98 2f       	mov	r25, r24
    21d4:	91 70       	andi	r25, 0x01	; 1
    21d6:	82 e0       	ldi	r24, 0x02	; 2
    21d8:	65 e0       	ldi	r22, 0x05	; 5
    21da:	49 2f       	mov	r20, r25
    21dc:	0e 94 51 09 	call	0x12a2	; 0x12a2 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(LCD_u8_D6_PORT, LCD_u8_D6_PIN, GET_BIT(Copy_u8Character, DIO_u8_PIN2));
    21e0:	88 89       	ldd	r24, Y+16	; 0x10
    21e2:	86 95       	lsr	r24
    21e4:	86 95       	lsr	r24
    21e6:	98 2f       	mov	r25, r24
    21e8:	91 70       	andi	r25, 0x01	; 1
    21ea:	82 e0       	ldi	r24, 0x02	; 2
    21ec:	66 e0       	ldi	r22, 0x06	; 6
    21ee:	49 2f       	mov	r20, r25
    21f0:	0e 94 51 09 	call	0x12a2	; 0x12a2 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(LCD_u8_D7_PORT, LCD_u8_D7_PIN, GET_BIT(Copy_u8Character, DIO_u8_PIN3));
    21f4:	88 89       	ldd	r24, Y+16	; 0x10
    21f6:	86 95       	lsr	r24
    21f8:	86 95       	lsr	r24
    21fa:	86 95       	lsr	r24
    21fc:	98 2f       	mov	r25, r24
    21fe:	91 70       	andi	r25, 0x01	; 1
    2200:	82 e0       	ldi	r24, 0x02	; 2
    2202:	67 e0       	ldi	r22, 0x07	; 7
    2204:	49 2f       	mov	r20, r25
    2206:	0e 94 51 09 	call	0x12a2	; 0x12a2 <DIO_enuSetPinValue>
		/*Send Enable*/
		LCD_vidSendEnable();
    220a:	0e 94 86 0b 	call	0x170c	; 0x170c <LCD_vidSendEnable>
#endif
	}
	return Local_enuErrorStatus;
    220e:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    2210:	60 96       	adiw	r28, 0x10	; 16
    2212:	0f b6       	in	r0, 0x3f	; 63
    2214:	f8 94       	cli
    2216:	de bf       	out	0x3e, r29	; 62
    2218:	0f be       	out	0x3f, r0	; 63
    221a:	cd bf       	out	0x3d, r28	; 61
    221c:	cf 91       	pop	r28
    221e:	df 91       	pop	r29
    2220:	08 95       	ret

00002222 <LCD_enuSendInstruction>:
 * Description: Send instruction LCD controller
 * Arguments: 	First Argument : Copy_u8Instruction, options(any Instruction deriven from datasheet)
 * Return :	  	LCD_tenu_ErrorStatus
 * */
LCD_tenu_ErrorStatus LCD_enuSendInstruction(u8 Copy_u8Instruction)
{
    2222:	df 93       	push	r29
    2224:	cf 93       	push	r28
    2226:	cd b7       	in	r28, 0x3d	; 61
    2228:	de b7       	in	r29, 0x3e	; 62
    222a:	60 97       	sbiw	r28, 0x10	; 16
    222c:	0f b6       	in	r0, 0x3f	; 63
    222e:	f8 94       	cli
    2230:	de bf       	out	0x3e, r29	; 62
    2232:	0f be       	out	0x3f, r0	; 63
    2234:	cd bf       	out	0x3d, r28	; 61
    2236:	88 8b       	std	Y+16, r24	; 0x10
	LCD_tenu_ErrorStatus Local_enuErrorStatus = LCD_OK;
    2238:	1f 86       	std	Y+15, r1	; 0x0f
		
		/*Send Enable*/
		LCD_vidSendEnable();
#elif LCD_u8_DATA_LENGTH ==LCD_u8_4_BIT_MODE
		/*RS pin ---> low*/
		DIO_enuSetPinValue(LCD_u8_RS_PORT, LCD_u8_RS_PIN, DIO_u8_LOW);
    223a:	82 e0       	ldi	r24, 0x02	; 2
    223c:	61 e0       	ldi	r22, 0x01	; 1
    223e:	40 e0       	ldi	r20, 0x00	; 0
    2240:	0e 94 51 09 	call	0x12a2	; 0x12a2 <DIO_enuSetPinValue>

		/*RW pin ---> low*/
		DIO_enuSetPinValue(LCD_u8_RW_PORT, LCD_u8_RW_PIN, DIO_u8_LOW);
    2244:	82 e0       	ldi	r24, 0x02	; 2
    2246:	62 e0       	ldi	r22, 0x02	; 2
    2248:	40 e0       	ldi	r20, 0x00	; 0
    224a:	0e 94 51 09 	call	0x12a2	; 0x12a2 <DIO_enuSetPinValue>
		/*Send instruction*/

		DIO_enuSetPinValue(LCD_u8_D4_PORT, LCD_u8_D4_PIN, GET_BIT(Copy_u8Instruction, DIO_u8_PIN4));
    224e:	88 89       	ldd	r24, Y+16	; 0x10
    2250:	82 95       	swap	r24
    2252:	8f 70       	andi	r24, 0x0F	; 15
    2254:	98 2f       	mov	r25, r24
    2256:	91 70       	andi	r25, 0x01	; 1
    2258:	82 e0       	ldi	r24, 0x02	; 2
    225a:	64 e0       	ldi	r22, 0x04	; 4
    225c:	49 2f       	mov	r20, r25
    225e:	0e 94 51 09 	call	0x12a2	; 0x12a2 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(LCD_u8_D5_PORT, LCD_u8_D5_PIN, GET_BIT(Copy_u8Instruction, DIO_u8_PIN5));
    2262:	88 89       	ldd	r24, Y+16	; 0x10
    2264:	82 95       	swap	r24
    2266:	86 95       	lsr	r24
    2268:	87 70       	andi	r24, 0x07	; 7
    226a:	98 2f       	mov	r25, r24
    226c:	91 70       	andi	r25, 0x01	; 1
    226e:	82 e0       	ldi	r24, 0x02	; 2
    2270:	65 e0       	ldi	r22, 0x05	; 5
    2272:	49 2f       	mov	r20, r25
    2274:	0e 94 51 09 	call	0x12a2	; 0x12a2 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(LCD_u8_D6_PORT, LCD_u8_D6_PIN, GET_BIT(Copy_u8Instruction, DIO_u8_PIN6));
    2278:	88 89       	ldd	r24, Y+16	; 0x10
    227a:	82 95       	swap	r24
    227c:	86 95       	lsr	r24
    227e:	86 95       	lsr	r24
    2280:	83 70       	andi	r24, 0x03	; 3
    2282:	98 2f       	mov	r25, r24
    2284:	91 70       	andi	r25, 0x01	; 1
    2286:	82 e0       	ldi	r24, 0x02	; 2
    2288:	66 e0       	ldi	r22, 0x06	; 6
    228a:	49 2f       	mov	r20, r25
    228c:	0e 94 51 09 	call	0x12a2	; 0x12a2 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(LCD_u8_D7_PORT, LCD_u8_D7_PIN, GET_BIT(Copy_u8Instruction, DIO_u8_PIN7));
    2290:	88 89       	ldd	r24, Y+16	; 0x10
    2292:	98 2f       	mov	r25, r24
    2294:	99 1f       	adc	r25, r25
    2296:	99 27       	eor	r25, r25
    2298:	99 1f       	adc	r25, r25
    229a:	82 e0       	ldi	r24, 0x02	; 2
    229c:	67 e0       	ldi	r22, 0x07	; 7
    229e:	49 2f       	mov	r20, r25
    22a0:	0e 94 51 09 	call	0x12a2	; 0x12a2 <DIO_enuSetPinValue>
		LCD_vidSendEnable();
    22a4:	0e 94 86 0b 	call	0x170c	; 0x170c <LCD_vidSendEnable>
    22a8:	80 e0       	ldi	r24, 0x00	; 0
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	a0 e0       	ldi	r26, 0x00	; 0
    22ae:	b0 e4       	ldi	r27, 0x40	; 64
    22b0:	8b 87       	std	Y+11, r24	; 0x0b
    22b2:	9c 87       	std	Y+12, r25	; 0x0c
    22b4:	ad 87       	std	Y+13, r26	; 0x0d
    22b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    22ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    22bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    22be:	9e 85       	ldd	r25, Y+14	; 0x0e
    22c0:	20 e0       	ldi	r18, 0x00	; 0
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	4a e7       	ldi	r20, 0x7A	; 122
    22c6:	55 e4       	ldi	r21, 0x45	; 69
    22c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22cc:	dc 01       	movw	r26, r24
    22ce:	cb 01       	movw	r24, r22
    22d0:	8f 83       	std	Y+7, r24	; 0x07
    22d2:	98 87       	std	Y+8, r25	; 0x08
    22d4:	a9 87       	std	Y+9, r26	; 0x09
    22d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22d8:	6f 81       	ldd	r22, Y+7	; 0x07
    22da:	78 85       	ldd	r23, Y+8	; 0x08
    22dc:	89 85       	ldd	r24, Y+9	; 0x09
    22de:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e0:	20 e0       	ldi	r18, 0x00	; 0
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	40 e8       	ldi	r20, 0x80	; 128
    22e6:	5f e3       	ldi	r21, 0x3F	; 63
    22e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22ec:	88 23       	and	r24, r24
    22ee:	2c f4       	brge	.+10     	; 0x22fa <LCD_enuSendInstruction+0xd8>
		__ticks = 1;
    22f0:	81 e0       	ldi	r24, 0x01	; 1
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	9e 83       	std	Y+6, r25	; 0x06
    22f6:	8d 83       	std	Y+5, r24	; 0x05
    22f8:	3f c0       	rjmp	.+126    	; 0x2378 <LCD_enuSendInstruction+0x156>
	else if (__tmp > 65535)
    22fa:	6f 81       	ldd	r22, Y+7	; 0x07
    22fc:	78 85       	ldd	r23, Y+8	; 0x08
    22fe:	89 85       	ldd	r24, Y+9	; 0x09
    2300:	9a 85       	ldd	r25, Y+10	; 0x0a
    2302:	20 e0       	ldi	r18, 0x00	; 0
    2304:	3f ef       	ldi	r19, 0xFF	; 255
    2306:	4f e7       	ldi	r20, 0x7F	; 127
    2308:	57 e4       	ldi	r21, 0x47	; 71
    230a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    230e:	18 16       	cp	r1, r24
    2310:	4c f5       	brge	.+82     	; 0x2364 <LCD_enuSendInstruction+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2312:	6b 85       	ldd	r22, Y+11	; 0x0b
    2314:	7c 85       	ldd	r23, Y+12	; 0x0c
    2316:	8d 85       	ldd	r24, Y+13	; 0x0d
    2318:	9e 85       	ldd	r25, Y+14	; 0x0e
    231a:	20 e0       	ldi	r18, 0x00	; 0
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	40 e2       	ldi	r20, 0x20	; 32
    2320:	51 e4       	ldi	r21, 0x41	; 65
    2322:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2326:	dc 01       	movw	r26, r24
    2328:	cb 01       	movw	r24, r22
    232a:	bc 01       	movw	r22, r24
    232c:	cd 01       	movw	r24, r26
    232e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2332:	dc 01       	movw	r26, r24
    2334:	cb 01       	movw	r24, r22
    2336:	9e 83       	std	Y+6, r25	; 0x06
    2338:	8d 83       	std	Y+5, r24	; 0x05
    233a:	0f c0       	rjmp	.+30     	; 0x235a <LCD_enuSendInstruction+0x138>
    233c:	80 e9       	ldi	r24, 0x90	; 144
    233e:	91 e0       	ldi	r25, 0x01	; 1
    2340:	9c 83       	std	Y+4, r25	; 0x04
    2342:	8b 83       	std	Y+3, r24	; 0x03
    2344:	8b 81       	ldd	r24, Y+3	; 0x03
    2346:	9c 81       	ldd	r25, Y+4	; 0x04
    2348:	01 97       	sbiw	r24, 0x01	; 1
    234a:	f1 f7       	brne	.-4      	; 0x2348 <LCD_enuSendInstruction+0x126>
    234c:	9c 83       	std	Y+4, r25	; 0x04
    234e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2350:	8d 81       	ldd	r24, Y+5	; 0x05
    2352:	9e 81       	ldd	r25, Y+6	; 0x06
    2354:	01 97       	sbiw	r24, 0x01	; 1
    2356:	9e 83       	std	Y+6, r25	; 0x06
    2358:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    235a:	8d 81       	ldd	r24, Y+5	; 0x05
    235c:	9e 81       	ldd	r25, Y+6	; 0x06
    235e:	00 97       	sbiw	r24, 0x00	; 0
    2360:	69 f7       	brne	.-38     	; 0x233c <LCD_enuSendInstruction+0x11a>
    2362:	14 c0       	rjmp	.+40     	; 0x238c <LCD_enuSendInstruction+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2364:	6f 81       	ldd	r22, Y+7	; 0x07
    2366:	78 85       	ldd	r23, Y+8	; 0x08
    2368:	89 85       	ldd	r24, Y+9	; 0x09
    236a:	9a 85       	ldd	r25, Y+10	; 0x0a
    236c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2370:	dc 01       	movw	r26, r24
    2372:	cb 01       	movw	r24, r22
    2374:	9e 83       	std	Y+6, r25	; 0x06
    2376:	8d 83       	std	Y+5, r24	; 0x05
    2378:	8d 81       	ldd	r24, Y+5	; 0x05
    237a:	9e 81       	ldd	r25, Y+6	; 0x06
    237c:	9a 83       	std	Y+2, r25	; 0x02
    237e:	89 83       	std	Y+1, r24	; 0x01
    2380:	89 81       	ldd	r24, Y+1	; 0x01
    2382:	9a 81       	ldd	r25, Y+2	; 0x02
    2384:	01 97       	sbiw	r24, 0x01	; 1
    2386:	f1 f7       	brne	.-4      	; 0x2384 <LCD_enuSendInstruction+0x162>
    2388:	9a 83       	std	Y+2, r25	; 0x02
    238a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		DIO_enuSetPinValue(LCD_u8_D4_PORT, LCD_u8_D4_PIN, GET_BIT(Copy_u8Instruction, DIO_u8_PIN0));
    238c:	88 89       	ldd	r24, Y+16	; 0x10
    238e:	98 2f       	mov	r25, r24
    2390:	91 70       	andi	r25, 0x01	; 1
    2392:	82 e0       	ldi	r24, 0x02	; 2
    2394:	64 e0       	ldi	r22, 0x04	; 4
    2396:	49 2f       	mov	r20, r25
    2398:	0e 94 51 09 	call	0x12a2	; 0x12a2 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(LCD_u8_D5_PORT, LCD_u8_D5_PIN, GET_BIT(Copy_u8Instruction, DIO_u8_PIN1));
    239c:	88 89       	ldd	r24, Y+16	; 0x10
    239e:	86 95       	lsr	r24
    23a0:	98 2f       	mov	r25, r24
    23a2:	91 70       	andi	r25, 0x01	; 1
    23a4:	82 e0       	ldi	r24, 0x02	; 2
    23a6:	65 e0       	ldi	r22, 0x05	; 5
    23a8:	49 2f       	mov	r20, r25
    23aa:	0e 94 51 09 	call	0x12a2	; 0x12a2 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(LCD_u8_D6_PORT, LCD_u8_D6_PIN, GET_BIT(Copy_u8Instruction, DIO_u8_PIN2));
    23ae:	88 89       	ldd	r24, Y+16	; 0x10
    23b0:	86 95       	lsr	r24
    23b2:	86 95       	lsr	r24
    23b4:	98 2f       	mov	r25, r24
    23b6:	91 70       	andi	r25, 0x01	; 1
    23b8:	82 e0       	ldi	r24, 0x02	; 2
    23ba:	66 e0       	ldi	r22, 0x06	; 6
    23bc:	49 2f       	mov	r20, r25
    23be:	0e 94 51 09 	call	0x12a2	; 0x12a2 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(LCD_u8_D7_PORT, LCD_u8_D7_PIN, GET_BIT(Copy_u8Instruction, DIO_u8_PIN3));
    23c2:	88 89       	ldd	r24, Y+16	; 0x10
    23c4:	86 95       	lsr	r24
    23c6:	86 95       	lsr	r24
    23c8:	86 95       	lsr	r24
    23ca:	98 2f       	mov	r25, r24
    23cc:	91 70       	andi	r25, 0x01	; 1
    23ce:	82 e0       	ldi	r24, 0x02	; 2
    23d0:	67 e0       	ldi	r22, 0x07	; 7
    23d2:	49 2f       	mov	r20, r25
    23d4:	0e 94 51 09 	call	0x12a2	; 0x12a2 <DIO_enuSetPinValue>

		/*Send Enable*/
		LCD_vidSendEnable();
    23d8:	0e 94 86 0b 	call	0x170c	; 0x170c <LCD_vidSendEnable>
#endif
	}
	return Local_enuErrorStatus;
    23dc:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    23de:	60 96       	adiw	r28, 0x10	; 16
    23e0:	0f b6       	in	r0, 0x3f	; 63
    23e2:	f8 94       	cli
    23e4:	de bf       	out	0x3e, r29	; 62
    23e6:	0f be       	out	0x3f, r0	; 63
    23e8:	cd bf       	out	0x3d, r28	; 61
    23ea:	cf 91       	pop	r28
    23ec:	df 91       	pop	r29
    23ee:	08 95       	ret

000023f0 <LCD_enuSendString>:
 * Description: Send string to be displayed on LCD
 * Arguments: 	First Argument : Add_pu8String, options(Any non NULL pointer to string)
 * Return :	  	LCD_tenu_ErrorStatus
 * */
LCD_tenu_ErrorStatus LCD_enuSendString(u8 *Add_pu8String)
{
    23f0:	df 93       	push	r29
    23f2:	cf 93       	push	r28
    23f4:	00 d0       	rcall	.+0      	; 0x23f6 <LCD_enuSendString+0x6>
    23f6:	0f 92       	push	r0
    23f8:	cd b7       	in	r28, 0x3d	; 61
    23fa:	de b7       	in	r29, 0x3e	; 62
    23fc:	9b 83       	std	Y+3, r25	; 0x03
    23fe:	8a 83       	std	Y+2, r24	; 0x02
	LCD_tenu_ErrorStatus Local_enuErrorStatus = LCD_OK;
    2400:	19 82       	std	Y+1, r1	; 0x01

	if (Add_pu8String == NULL)
    2402:	8a 81       	ldd	r24, Y+2	; 0x02
    2404:	9b 81       	ldd	r25, Y+3	; 0x03
    2406:	00 97       	sbiw	r24, 0x00	; 0
    2408:	69 f4       	brne	.+26     	; 0x2424 <LCD_enuSendString+0x34>
	{
		Local_enuErrorStatus = LCD_NOK;
    240a:	81 e0       	ldi	r24, 0x01	; 1
    240c:	89 83       	std	Y+1, r24	; 0x01
    240e:	0f c0       	rjmp	.+30     	; 0x242e <LCD_enuSendString+0x3e>
	}
	else
	{
		while (*Add_pu8String != '\0')
		{
			LCD_enuSendCharacter(*Add_pu8String);
    2410:	ea 81       	ldd	r30, Y+2	; 0x02
    2412:	fb 81       	ldd	r31, Y+3	; 0x03
    2414:	80 81       	ld	r24, Z
    2416:	0e 94 24 10 	call	0x2048	; 0x2048 <LCD_enuSendCharacter>

			Add_pu8String++;
    241a:	8a 81       	ldd	r24, Y+2	; 0x02
    241c:	9b 81       	ldd	r25, Y+3	; 0x03
    241e:	01 96       	adiw	r24, 0x01	; 1
    2420:	9b 83       	std	Y+3, r25	; 0x03
    2422:	8a 83       	std	Y+2, r24	; 0x02
	{
		Local_enuErrorStatus = LCD_NOK;
	}
	else
	{
		while (*Add_pu8String != '\0')
    2424:	ea 81       	ldd	r30, Y+2	; 0x02
    2426:	fb 81       	ldd	r31, Y+3	; 0x03
    2428:	80 81       	ld	r24, Z
    242a:	88 23       	and	r24, r24
    242c:	89 f7       	brne	.-30     	; 0x2410 <LCD_enuSendString+0x20>

			Add_pu8String++;
		}

	}
	return Local_enuErrorStatus;
    242e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2430:	0f 90       	pop	r0
    2432:	0f 90       	pop	r0
    2434:	0f 90       	pop	r0
    2436:	cf 91       	pop	r28
    2438:	df 91       	pop	r29
    243a:	08 95       	ret

0000243c <LCD_enuChangePosition>:
 * Arguments: 	First Argument : Copy_u8Row,     options (LCD_u8_ROW0 , LCD_u8_ROW1)
 * 				Second Argument : Copy_u8Column, options(LCD_u8_Column0 to LCD_u8_Column15)
 * Return :	  	LCD_tenu_ErrorStatus
 * */
LCD_tenu_ErrorStatus LCD_enuChangePosition(u8 Copy_u8Row, u8 Copy_u8Column)
{
    243c:	df 93       	push	r29
    243e:	cf 93       	push	r28
    2440:	cd b7       	in	r28, 0x3d	; 61
    2442:	de b7       	in	r29, 0x3e	; 62
    2444:	63 97       	sbiw	r28, 0x13	; 19
    2446:	0f b6       	in	r0, 0x3f	; 63
    2448:	f8 94       	cli
    244a:	de bf       	out	0x3e, r29	; 62
    244c:	0f be       	out	0x3f, r0	; 63
    244e:	cd bf       	out	0x3d, r28	; 61
    2450:	88 8b       	std	Y+16, r24	; 0x10
    2452:	69 8b       	std	Y+17, r22	; 0x11
    2454:	80 e0       	ldi	r24, 0x00	; 0
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	a0 e2       	ldi	r26, 0x20	; 32
    245a:	b2 e4       	ldi	r27, 0x42	; 66
    245c:	8b 87       	std	Y+11, r24	; 0x0b
    245e:	9c 87       	std	Y+12, r25	; 0x0c
    2460:	ad 87       	std	Y+13, r26	; 0x0d
    2462:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2464:	6b 85       	ldd	r22, Y+11	; 0x0b
    2466:	7c 85       	ldd	r23, Y+12	; 0x0c
    2468:	8d 85       	ldd	r24, Y+13	; 0x0d
    246a:	9e 85       	ldd	r25, Y+14	; 0x0e
    246c:	20 e0       	ldi	r18, 0x00	; 0
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	4a e7       	ldi	r20, 0x7A	; 122
    2472:	55 e4       	ldi	r21, 0x45	; 69
    2474:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2478:	dc 01       	movw	r26, r24
    247a:	cb 01       	movw	r24, r22
    247c:	8f 83       	std	Y+7, r24	; 0x07
    247e:	98 87       	std	Y+8, r25	; 0x08
    2480:	a9 87       	std	Y+9, r26	; 0x09
    2482:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2484:	6f 81       	ldd	r22, Y+7	; 0x07
    2486:	78 85       	ldd	r23, Y+8	; 0x08
    2488:	89 85       	ldd	r24, Y+9	; 0x09
    248a:	9a 85       	ldd	r25, Y+10	; 0x0a
    248c:	20 e0       	ldi	r18, 0x00	; 0
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	40 e8       	ldi	r20, 0x80	; 128
    2492:	5f e3       	ldi	r21, 0x3F	; 63
    2494:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2498:	88 23       	and	r24, r24
    249a:	2c f4       	brge	.+10     	; 0x24a6 <LCD_enuChangePosition+0x6a>
		__ticks = 1;
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	9e 83       	std	Y+6, r25	; 0x06
    24a2:	8d 83       	std	Y+5, r24	; 0x05
    24a4:	3f c0       	rjmp	.+126    	; 0x2524 <LCD_enuChangePosition+0xe8>
	else if (__tmp > 65535)
    24a6:	6f 81       	ldd	r22, Y+7	; 0x07
    24a8:	78 85       	ldd	r23, Y+8	; 0x08
    24aa:	89 85       	ldd	r24, Y+9	; 0x09
    24ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ae:	20 e0       	ldi	r18, 0x00	; 0
    24b0:	3f ef       	ldi	r19, 0xFF	; 255
    24b2:	4f e7       	ldi	r20, 0x7F	; 127
    24b4:	57 e4       	ldi	r21, 0x47	; 71
    24b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24ba:	18 16       	cp	r1, r24
    24bc:	4c f5       	brge	.+82     	; 0x2510 <LCD_enuChangePosition+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24be:	6b 85       	ldd	r22, Y+11	; 0x0b
    24c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    24c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    24c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    24c6:	20 e0       	ldi	r18, 0x00	; 0
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	40 e2       	ldi	r20, 0x20	; 32
    24cc:	51 e4       	ldi	r21, 0x41	; 65
    24ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d2:	dc 01       	movw	r26, r24
    24d4:	cb 01       	movw	r24, r22
    24d6:	bc 01       	movw	r22, r24
    24d8:	cd 01       	movw	r24, r26
    24da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24de:	dc 01       	movw	r26, r24
    24e0:	cb 01       	movw	r24, r22
    24e2:	9e 83       	std	Y+6, r25	; 0x06
    24e4:	8d 83       	std	Y+5, r24	; 0x05
    24e6:	0f c0       	rjmp	.+30     	; 0x2506 <LCD_enuChangePosition+0xca>
    24e8:	80 e9       	ldi	r24, 0x90	; 144
    24ea:	91 e0       	ldi	r25, 0x01	; 1
    24ec:	9c 83       	std	Y+4, r25	; 0x04
    24ee:	8b 83       	std	Y+3, r24	; 0x03
    24f0:	8b 81       	ldd	r24, Y+3	; 0x03
    24f2:	9c 81       	ldd	r25, Y+4	; 0x04
    24f4:	01 97       	sbiw	r24, 0x01	; 1
    24f6:	f1 f7       	brne	.-4      	; 0x24f4 <LCD_enuChangePosition+0xb8>
    24f8:	9c 83       	std	Y+4, r25	; 0x04
    24fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24fc:	8d 81       	ldd	r24, Y+5	; 0x05
    24fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2500:	01 97       	sbiw	r24, 0x01	; 1
    2502:	9e 83       	std	Y+6, r25	; 0x06
    2504:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2506:	8d 81       	ldd	r24, Y+5	; 0x05
    2508:	9e 81       	ldd	r25, Y+6	; 0x06
    250a:	00 97       	sbiw	r24, 0x00	; 0
    250c:	69 f7       	brne	.-38     	; 0x24e8 <LCD_enuChangePosition+0xac>
    250e:	14 c0       	rjmp	.+40     	; 0x2538 <LCD_enuChangePosition+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2510:	6f 81       	ldd	r22, Y+7	; 0x07
    2512:	78 85       	ldd	r23, Y+8	; 0x08
    2514:	89 85       	ldd	r24, Y+9	; 0x09
    2516:	9a 85       	ldd	r25, Y+10	; 0x0a
    2518:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    251c:	dc 01       	movw	r26, r24
    251e:	cb 01       	movw	r24, r22
    2520:	9e 83       	std	Y+6, r25	; 0x06
    2522:	8d 83       	std	Y+5, r24	; 0x05
    2524:	8d 81       	ldd	r24, Y+5	; 0x05
    2526:	9e 81       	ldd	r25, Y+6	; 0x06
    2528:	9a 83       	std	Y+2, r25	; 0x02
    252a:	89 83       	std	Y+1, r24	; 0x01
    252c:	89 81       	ldd	r24, Y+1	; 0x01
    252e:	9a 81       	ldd	r25, Y+2	; 0x02
    2530:	01 97       	sbiw	r24, 0x01	; 1
    2532:	f1 f7       	brne	.-4      	; 0x2530 <LCD_enuChangePosition+0xf4>
    2534:	9a 83       	std	Y+2, r25	; 0x02
    2536:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(40);
	LCD_tenu_ErrorStatus Local_enuErrorStatus = LCD_OK;
    2538:	1f 86       	std	Y+15, r1	; 0x0f

	if (Copy_u8Row > LCD_u8_ROW1 || Copy_u8Column > LCD_u8_Column15)
    253a:	88 89       	ldd	r24, Y+16	; 0x10
    253c:	82 30       	cpi	r24, 0x02	; 2
    253e:	18 f4       	brcc	.+6      	; 0x2546 <LCD_enuChangePosition+0x10a>
    2540:	89 89       	ldd	r24, Y+17	; 0x11
    2542:	80 31       	cpi	r24, 0x10	; 16
    2544:	18 f0       	brcs	.+6      	; 0x254c <LCD_enuChangePosition+0x110>
	{
		Local_enuErrorStatus = LCD_NOK;
    2546:	81 e0       	ldi	r24, 0x01	; 1
    2548:	8f 87       	std	Y+15, r24	; 0x0f
    254a:	18 c0       	rjmp	.+48     	; 0x257c <LCD_enuChangePosition+0x140>
	}
	else
	{
		switch (Copy_u8Row)
    254c:	88 89       	ldd	r24, Y+16	; 0x10
    254e:	28 2f       	mov	r18, r24
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	3b 8b       	std	Y+19, r19	; 0x13
    2554:	2a 8b       	std	Y+18, r18	; 0x12
    2556:	8a 89       	ldd	r24, Y+18	; 0x12
    2558:	9b 89       	ldd	r25, Y+19	; 0x13
    255a:	00 97       	sbiw	r24, 0x00	; 0
    255c:	31 f0       	breq	.+12     	; 0x256a <LCD_enuChangePosition+0x12e>
    255e:	2a 89       	ldd	r18, Y+18	; 0x12
    2560:	3b 89       	ldd	r19, Y+19	; 0x13
    2562:	21 30       	cpi	r18, 0x01	; 1
    2564:	31 05       	cpc	r19, r1
    2566:	31 f0       	breq	.+12     	; 0x2574 <LCD_enuChangePosition+0x138>
    2568:	09 c0       	rjmp	.+18     	; 0x257c <LCD_enuChangePosition+0x140>
		{
		case LCD_u8_ROW0:
			LCD_enuSendInstruction(LCD_u8_FIRST_DDRAM_ADDRESS + Copy_u8Column);
    256a:	89 89       	ldd	r24, Y+17	; 0x11
    256c:	80 58       	subi	r24, 0x80	; 128
    256e:	0e 94 11 11 	call	0x2222	; 0x2222 <LCD_enuSendInstruction>
    2572:	04 c0       	rjmp	.+8      	; 0x257c <LCD_enuChangePosition+0x140>
			break;
		case LCD_u8_ROW1:
			LCD_enuSendInstruction((LCD_u8_FIRST_DDRAM_ADDRESS + LCD_u8_SECOND_LINE_INIT) | (Copy_u8Column));
    2574:	89 89       	ldd	r24, Y+17	; 0x11
    2576:	80 6c       	ori	r24, 0xC0	; 192
    2578:	0e 94 11 11 	call	0x2222	; 0x2222 <LCD_enuSendInstruction>
			break;
		}
	}

	return Local_enuErrorStatus;
    257c:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    257e:	63 96       	adiw	r28, 0x13	; 19
    2580:	0f b6       	in	r0, 0x3f	; 63
    2582:	f8 94       	cli
    2584:	de bf       	out	0x3e, r29	; 62
    2586:	0f be       	out	0x3f, r0	; 63
    2588:	cd bf       	out	0x3d, r28	; 61
    258a:	cf 91       	pop	r28
    258c:	df 91       	pop	r29
    258e:	08 95       	ret

00002590 <LCD_enuSendCustomCharacter>:
 * 				Fourth Argument : Copy_u8Column, options(LCD_u8_Column0 to LCD_u8_Column15)
 * 				
 * Return :	  	LCD_tenu_ErrorStatus
 * */
LCD_tenu_ErrorStatus LCD_enuSendCustomCharacter(u8 *Add_pu8Pattern, u8 Copy_BlockNumberu8, u8 Copy_u8Row, u8 Copy_u8Column)
{
    2590:	df 93       	push	r29
    2592:	cf 93       	push	r28
    2594:	cd b7       	in	r28, 0x3d	; 61
    2596:	de b7       	in	r29, 0x3e	; 62
    2598:	65 97       	sbiw	r28, 0x15	; 21
    259a:	0f b6       	in	r0, 0x3f	; 63
    259c:	f8 94       	cli
    259e:	de bf       	out	0x3e, r29	; 62
    25a0:	0f be       	out	0x3f, r0	; 63
    25a2:	cd bf       	out	0x3d, r28	; 61
    25a4:	9a 8b       	std	Y+18, r25	; 0x12
    25a6:	89 8b       	std	Y+17, r24	; 0x11
    25a8:	6b 8b       	std	Y+19, r22	; 0x13
    25aa:	4c 8b       	std	Y+20, r20	; 0x14
    25ac:	2d 8b       	std	Y+21, r18	; 0x15
	u8 Local_u8Iterator;
	LCD_tenu_ErrorStatus Local_enuErrorStatus = LCD_OK;
    25ae:	1f 86       	std	Y+15, r1	; 0x0f

	if (Add_pu8Pattern == NULL || Copy_u8Row > LCD_u8_ROW1 || Copy_u8Column > LCD_u8_Column15 || Copy_BlockNumberu8 > 80)
    25b0:	89 89       	ldd	r24, Y+17	; 0x11
    25b2:	9a 89       	ldd	r25, Y+18	; 0x12
    25b4:	00 97       	sbiw	r24, 0x00	; 0
    25b6:	49 f0       	breq	.+18     	; 0x25ca <LCD_enuSendCustomCharacter+0x3a>
    25b8:	8c 89       	ldd	r24, Y+20	; 0x14
    25ba:	82 30       	cpi	r24, 0x02	; 2
    25bc:	30 f4       	brcc	.+12     	; 0x25ca <LCD_enuSendCustomCharacter+0x3a>
    25be:	8d 89       	ldd	r24, Y+21	; 0x15
    25c0:	80 31       	cpi	r24, 0x10	; 16
    25c2:	18 f4       	brcc	.+6      	; 0x25ca <LCD_enuSendCustomCharacter+0x3a>
    25c4:	8b 89       	ldd	r24, Y+19	; 0x13
    25c6:	81 35       	cpi	r24, 0x51	; 81
    25c8:	18 f0       	brcs	.+6      	; 0x25d0 <LCD_enuSendCustomCharacter+0x40>
	{
		Local_enuErrorStatus = LCD_NOK;
    25ca:	81 e0       	ldi	r24, 0x01	; 1
    25cc:	8f 87       	std	Y+15, r24	; 0x0f
    25ce:	99 c0       	rjmp	.+306    	; 0x2702 <LCD_enuSendCustomCharacter+0x172>
	}
	else
	{
		LCD_enuSendInstruction(LCD_u8_FIRST_CGRAM_ADDRESS + (Copy_BlockNumberu8 * 8));
    25d0:	8b 89       	ldd	r24, Y+19	; 0x13
    25d2:	88 2f       	mov	r24, r24
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	08 96       	adiw	r24, 0x08	; 8
    25d8:	88 0f       	add	r24, r24
    25da:	99 1f       	adc	r25, r25
    25dc:	88 0f       	add	r24, r24
    25de:	99 1f       	adc	r25, r25
    25e0:	88 0f       	add	r24, r24
    25e2:	99 1f       	adc	r25, r25
    25e4:	0e 94 11 11 	call	0x2222	; 0x2222 <LCD_enuSendInstruction>
		for (Local_u8Iterator = 0; Local_u8Iterator < 8; Local_u8Iterator++)
    25e8:	18 8a       	std	Y+16, r1	; 0x10
    25ea:	80 c0       	rjmp	.+256    	; 0x26ec <LCD_enuSendCustomCharacter+0x15c>
		{
			LCD_enuSendCharacter(Add_pu8Pattern[Local_u8Iterator]);
    25ec:	88 89       	ldd	r24, Y+16	; 0x10
    25ee:	28 2f       	mov	r18, r24
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	89 89       	ldd	r24, Y+17	; 0x11
    25f4:	9a 89       	ldd	r25, Y+18	; 0x12
    25f6:	fc 01       	movw	r30, r24
    25f8:	e2 0f       	add	r30, r18
    25fa:	f3 1f       	adc	r31, r19
    25fc:	80 81       	ld	r24, Z
    25fe:	0e 94 24 10 	call	0x2048	; 0x2048 <LCD_enuSendCharacter>
    2602:	80 e0       	ldi	r24, 0x00	; 0
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	a0 e8       	ldi	r26, 0x80	; 128
    2608:	bf e3       	ldi	r27, 0x3F	; 63
    260a:	8b 87       	std	Y+11, r24	; 0x0b
    260c:	9c 87       	std	Y+12, r25	; 0x0c
    260e:	ad 87       	std	Y+13, r26	; 0x0d
    2610:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2612:	6b 85       	ldd	r22, Y+11	; 0x0b
    2614:	7c 85       	ldd	r23, Y+12	; 0x0c
    2616:	8d 85       	ldd	r24, Y+13	; 0x0d
    2618:	9e 85       	ldd	r25, Y+14	; 0x0e
    261a:	20 e0       	ldi	r18, 0x00	; 0
    261c:	30 e0       	ldi	r19, 0x00	; 0
    261e:	4a e7       	ldi	r20, 0x7A	; 122
    2620:	55 e4       	ldi	r21, 0x45	; 69
    2622:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2626:	dc 01       	movw	r26, r24
    2628:	cb 01       	movw	r24, r22
    262a:	8f 83       	std	Y+7, r24	; 0x07
    262c:	98 87       	std	Y+8, r25	; 0x08
    262e:	a9 87       	std	Y+9, r26	; 0x09
    2630:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2632:	6f 81       	ldd	r22, Y+7	; 0x07
    2634:	78 85       	ldd	r23, Y+8	; 0x08
    2636:	89 85       	ldd	r24, Y+9	; 0x09
    2638:	9a 85       	ldd	r25, Y+10	; 0x0a
    263a:	20 e0       	ldi	r18, 0x00	; 0
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	40 e8       	ldi	r20, 0x80	; 128
    2640:	5f e3       	ldi	r21, 0x3F	; 63
    2642:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2646:	88 23       	and	r24, r24
    2648:	2c f4       	brge	.+10     	; 0x2654 <LCD_enuSendCustomCharacter+0xc4>
		__ticks = 1;
    264a:	81 e0       	ldi	r24, 0x01	; 1
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	9e 83       	std	Y+6, r25	; 0x06
    2650:	8d 83       	std	Y+5, r24	; 0x05
    2652:	3f c0       	rjmp	.+126    	; 0x26d2 <LCD_enuSendCustomCharacter+0x142>
	else if (__tmp > 65535)
    2654:	6f 81       	ldd	r22, Y+7	; 0x07
    2656:	78 85       	ldd	r23, Y+8	; 0x08
    2658:	89 85       	ldd	r24, Y+9	; 0x09
    265a:	9a 85       	ldd	r25, Y+10	; 0x0a
    265c:	20 e0       	ldi	r18, 0x00	; 0
    265e:	3f ef       	ldi	r19, 0xFF	; 255
    2660:	4f e7       	ldi	r20, 0x7F	; 127
    2662:	57 e4       	ldi	r21, 0x47	; 71
    2664:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2668:	18 16       	cp	r1, r24
    266a:	4c f5       	brge	.+82     	; 0x26be <LCD_enuSendCustomCharacter+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    266c:	6b 85       	ldd	r22, Y+11	; 0x0b
    266e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2670:	8d 85       	ldd	r24, Y+13	; 0x0d
    2672:	9e 85       	ldd	r25, Y+14	; 0x0e
    2674:	20 e0       	ldi	r18, 0x00	; 0
    2676:	30 e0       	ldi	r19, 0x00	; 0
    2678:	40 e2       	ldi	r20, 0x20	; 32
    267a:	51 e4       	ldi	r21, 0x41	; 65
    267c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2680:	dc 01       	movw	r26, r24
    2682:	cb 01       	movw	r24, r22
    2684:	bc 01       	movw	r22, r24
    2686:	cd 01       	movw	r24, r26
    2688:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    268c:	dc 01       	movw	r26, r24
    268e:	cb 01       	movw	r24, r22
    2690:	9e 83       	std	Y+6, r25	; 0x06
    2692:	8d 83       	std	Y+5, r24	; 0x05
    2694:	0f c0       	rjmp	.+30     	; 0x26b4 <LCD_enuSendCustomCharacter+0x124>
    2696:	80 e9       	ldi	r24, 0x90	; 144
    2698:	91 e0       	ldi	r25, 0x01	; 1
    269a:	9c 83       	std	Y+4, r25	; 0x04
    269c:	8b 83       	std	Y+3, r24	; 0x03
    269e:	8b 81       	ldd	r24, Y+3	; 0x03
    26a0:	9c 81       	ldd	r25, Y+4	; 0x04
    26a2:	01 97       	sbiw	r24, 0x01	; 1
    26a4:	f1 f7       	brne	.-4      	; 0x26a2 <LCD_enuSendCustomCharacter+0x112>
    26a6:	9c 83       	std	Y+4, r25	; 0x04
    26a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26aa:	8d 81       	ldd	r24, Y+5	; 0x05
    26ac:	9e 81       	ldd	r25, Y+6	; 0x06
    26ae:	01 97       	sbiw	r24, 0x01	; 1
    26b0:	9e 83       	std	Y+6, r25	; 0x06
    26b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b4:	8d 81       	ldd	r24, Y+5	; 0x05
    26b6:	9e 81       	ldd	r25, Y+6	; 0x06
    26b8:	00 97       	sbiw	r24, 0x00	; 0
    26ba:	69 f7       	brne	.-38     	; 0x2696 <LCD_enuSendCustomCharacter+0x106>
    26bc:	14 c0       	rjmp	.+40     	; 0x26e6 <LCD_enuSendCustomCharacter+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26be:	6f 81       	ldd	r22, Y+7	; 0x07
    26c0:	78 85       	ldd	r23, Y+8	; 0x08
    26c2:	89 85       	ldd	r24, Y+9	; 0x09
    26c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    26c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ca:	dc 01       	movw	r26, r24
    26cc:	cb 01       	movw	r24, r22
    26ce:	9e 83       	std	Y+6, r25	; 0x06
    26d0:	8d 83       	std	Y+5, r24	; 0x05
    26d2:	8d 81       	ldd	r24, Y+5	; 0x05
    26d4:	9e 81       	ldd	r25, Y+6	; 0x06
    26d6:	9a 83       	std	Y+2, r25	; 0x02
    26d8:	89 83       	std	Y+1, r24	; 0x01
    26da:	89 81       	ldd	r24, Y+1	; 0x01
    26dc:	9a 81       	ldd	r25, Y+2	; 0x02
    26de:	01 97       	sbiw	r24, 0x01	; 1
    26e0:	f1 f7       	brne	.-4      	; 0x26de <LCD_enuSendCustomCharacter+0x14e>
    26e2:	9a 83       	std	Y+2, r25	; 0x02
    26e4:	89 83       	std	Y+1, r24	; 0x01
		Local_enuErrorStatus = LCD_NOK;
	}
	else
	{
		LCD_enuSendInstruction(LCD_u8_FIRST_CGRAM_ADDRESS + (Copy_BlockNumberu8 * 8));
		for (Local_u8Iterator = 0; Local_u8Iterator < 8; Local_u8Iterator++)
    26e6:	88 89       	ldd	r24, Y+16	; 0x10
    26e8:	8f 5f       	subi	r24, 0xFF	; 255
    26ea:	88 8b       	std	Y+16, r24	; 0x10
    26ec:	88 89       	ldd	r24, Y+16	; 0x10
    26ee:	88 30       	cpi	r24, 0x08	; 8
    26f0:	08 f4       	brcc	.+2      	; 0x26f4 <LCD_enuSendCustomCharacter+0x164>
    26f2:	7c cf       	rjmp	.-264    	; 0x25ec <LCD_enuSendCustomCharacter+0x5c>
		{
			LCD_enuSendCharacter(Add_pu8Pattern[Local_u8Iterator]);
			_delay_ms(1);
		}
		LCD_enuChangePosition(Copy_u8Row, Copy_u8Column);
    26f4:	8c 89       	ldd	r24, Y+20	; 0x14
    26f6:	6d 89       	ldd	r22, Y+21	; 0x15
    26f8:	0e 94 1e 12 	call	0x243c	; 0x243c <LCD_enuChangePosition>
		LCD_enuSendCharacter(Copy_BlockNumberu8);
    26fc:	8b 89       	ldd	r24, Y+19	; 0x13
    26fe:	0e 94 24 10 	call	0x2048	; 0x2048 <LCD_enuSendCharacter>
	}

	return Local_enuErrorStatus;
    2702:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    2704:	65 96       	adiw	r28, 0x15	; 21
    2706:	0f b6       	in	r0, 0x3f	; 63
    2708:	f8 94       	cli
    270a:	de bf       	out	0x3e, r29	; 62
    270c:	0f be       	out	0x3f, r0	; 63
    270e:	cd bf       	out	0x3d, r28	; 61
    2710:	cf 91       	pop	r28
    2712:	df 91       	pop	r29
    2714:	08 95       	ret

00002716 <LCD_enuSendNumber>:
 * Arguments: 	First Argument : Copy_u16Number,     options (any integer number from 0 to 65535)
 * Return :	  	LCD_tenu_ErrorStatus
 * */

LCD_tenu_ErrorStatus LCD_enuSendNumber(u32 Copy_u32Number)
{
    2716:	df 93       	push	r29
    2718:	cf 93       	push	r28
    271a:	cd b7       	in	r28, 0x3d	; 61
    271c:	de b7       	in	r29, 0x3e	; 62
    271e:	63 97       	sbiw	r28, 0x13	; 19
    2720:	0f b6       	in	r0, 0x3f	; 63
    2722:	f8 94       	cli
    2724:	de bf       	out	0x3e, r29	; 62
    2726:	0f be       	out	0x3f, r0	; 63
    2728:	cd bf       	out	0x3d, r28	; 61
    272a:	6d 87       	std	Y+13, r22	; 0x0d
    272c:	7e 87       	std	Y+14, r23	; 0x0e
    272e:	8f 87       	std	Y+15, r24	; 0x0f
    2730:	98 8b       	std	Y+16, r25	; 0x10
	u8 Local_u8Arr[10];
	s8 Local_s8Iterator = 0;
    2732:	1a 82       	std	Y+2, r1	; 0x02
	LCD_tenu_ErrorStatus Local_enuErrorStatus = LCD_OK;
    2734:	19 82       	std	Y+1, r1	; 0x01
	{

	}
	else
	{
		if (Copy_u32Number == 0)
    2736:	8d 85       	ldd	r24, Y+13	; 0x0d
    2738:	9e 85       	ldd	r25, Y+14	; 0x0e
    273a:	af 85       	ldd	r26, Y+15	; 0x0f
    273c:	b8 89       	ldd	r27, Y+16	; 0x10
    273e:	00 97       	sbiw	r24, 0x00	; 0
    2740:	a1 05       	cpc	r26, r1
    2742:	b1 05       	cpc	r27, r1
    2744:	09 f0       	breq	.+2      	; 0x2748 <LCD_enuSendNumber+0x32>
    2746:	4e c0       	rjmp	.+156    	; 0x27e4 <LCD_enuSendNumber+0xce>
		{
			LCD_enuSendCharacter('0');
    2748:	80 e3       	ldi	r24, 0x30	; 48
    274a:	0e 94 24 10 	call	0x2048	; 0x2048 <LCD_enuSendCharacter>
    274e:	6a c0       	rjmp	.+212    	; 0x2824 <LCD_enuSendNumber+0x10e>
		}
		else
		{
			while (Copy_u32Number > 0)
			{
				Local_u8Arr[Local_s8Iterator++] = ((Copy_u32Number % 10) == 0) ? (48) : ((Copy_u32Number % 10) + 48);
    2750:	8a 81       	ldd	r24, Y+2	; 0x02
    2752:	28 2f       	mov	r18, r24
    2754:	33 27       	eor	r19, r19
    2756:	27 fd       	sbrc	r18, 7
    2758:	30 95       	com	r19
    275a:	3b 8b       	std	Y+19, r19	; 0x13
    275c:	2a 8b       	std	Y+18, r18	; 0x12
    275e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2760:	9e 85       	ldd	r25, Y+14	; 0x0e
    2762:	af 85       	ldd	r26, Y+15	; 0x0f
    2764:	b8 89       	ldd	r27, Y+16	; 0x10
    2766:	2a e0       	ldi	r18, 0x0A	; 10
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	40 e0       	ldi	r20, 0x00	; 0
    276c:	50 e0       	ldi	r21, 0x00	; 0
    276e:	bc 01       	movw	r22, r24
    2770:	cd 01       	movw	r24, r26
    2772:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__udivmodsi4>
    2776:	dc 01       	movw	r26, r24
    2778:	cb 01       	movw	r24, r22
    277a:	00 97       	sbiw	r24, 0x00	; 0
    277c:	a1 05       	cpc	r26, r1
    277e:	b1 05       	cpc	r27, r1
    2780:	91 f0       	breq	.+36     	; 0x27a6 <LCD_enuSendNumber+0x90>
    2782:	8d 85       	ldd	r24, Y+13	; 0x0d
    2784:	9e 85       	ldd	r25, Y+14	; 0x0e
    2786:	af 85       	ldd	r26, Y+15	; 0x0f
    2788:	b8 89       	ldd	r27, Y+16	; 0x10
    278a:	2a e0       	ldi	r18, 0x0A	; 10
    278c:	30 e0       	ldi	r19, 0x00	; 0
    278e:	40 e0       	ldi	r20, 0x00	; 0
    2790:	50 e0       	ldi	r21, 0x00	; 0
    2792:	bc 01       	movw	r22, r24
    2794:	cd 01       	movw	r24, r26
    2796:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__udivmodsi4>
    279a:	dc 01       	movw	r26, r24
    279c:	cb 01       	movw	r24, r22
    279e:	38 2f       	mov	r19, r24
    27a0:	30 5d       	subi	r19, 0xD0	; 208
    27a2:	39 8b       	std	Y+17, r19	; 0x11
    27a4:	02 c0       	rjmp	.+4      	; 0x27aa <LCD_enuSendNumber+0x94>
    27a6:	80 e3       	ldi	r24, 0x30	; 48
    27a8:	89 8b       	std	Y+17, r24	; 0x11
    27aa:	ce 01       	movw	r24, r28
    27ac:	03 96       	adiw	r24, 0x03	; 3
    27ae:	ea 89       	ldd	r30, Y+18	; 0x12
    27b0:	fb 89       	ldd	r31, Y+19	; 0x13
    27b2:	e8 0f       	add	r30, r24
    27b4:	f9 1f       	adc	r31, r25
    27b6:	99 89       	ldd	r25, Y+17	; 0x11
    27b8:	90 83       	st	Z, r25
    27ba:	8a 81       	ldd	r24, Y+2	; 0x02
    27bc:	8f 5f       	subi	r24, 0xFF	; 255
    27be:	8a 83       	std	Y+2, r24	; 0x02
				Copy_u32Number /= 10;
    27c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    27c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    27c4:	af 85       	ldd	r26, Y+15	; 0x0f
    27c6:	b8 89       	ldd	r27, Y+16	; 0x10
    27c8:	2a e0       	ldi	r18, 0x0A	; 10
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	40 e0       	ldi	r20, 0x00	; 0
    27ce:	50 e0       	ldi	r21, 0x00	; 0
    27d0:	bc 01       	movw	r22, r24
    27d2:	cd 01       	movw	r24, r26
    27d4:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__udivmodsi4>
    27d8:	da 01       	movw	r26, r20
    27da:	c9 01       	movw	r24, r18
    27dc:	8d 87       	std	Y+13, r24	; 0x0d
    27de:	9e 87       	std	Y+14, r25	; 0x0e
    27e0:	af 87       	std	Y+15, r26	; 0x0f
    27e2:	b8 8b       	std	Y+16, r27	; 0x10
		{
			LCD_enuSendCharacter('0');
		}
		else
		{
			while (Copy_u32Number > 0)
    27e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    27e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    27e8:	af 85       	ldd	r26, Y+15	; 0x0f
    27ea:	b8 89       	ldd	r27, Y+16	; 0x10
    27ec:	00 97       	sbiw	r24, 0x00	; 0
    27ee:	a1 05       	cpc	r26, r1
    27f0:	b1 05       	cpc	r27, r1
    27f2:	09 f0       	breq	.+2      	; 0x27f6 <LCD_enuSendNumber+0xe0>
    27f4:	ad cf       	rjmp	.-166    	; 0x2750 <LCD_enuSendNumber+0x3a>
			{
				Local_u8Arr[Local_s8Iterator++] = ((Copy_u32Number % 10) == 0) ? (48) : ((Copy_u32Number % 10) + 48);
				Copy_u32Number /= 10;
			}

			Local_s8Iterator--;
    27f6:	8a 81       	ldd	r24, Y+2	; 0x02
    27f8:	81 50       	subi	r24, 0x01	; 1
    27fa:	8a 83       	std	Y+2, r24	; 0x02
    27fc:	10 c0       	rjmp	.+32     	; 0x281e <LCD_enuSendNumber+0x108>

			while (Local_s8Iterator >= 0)
			{
				LCD_enuSendCharacter(Local_u8Arr[Local_s8Iterator]);
    27fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2800:	28 2f       	mov	r18, r24
    2802:	33 27       	eor	r19, r19
    2804:	27 fd       	sbrc	r18, 7
    2806:	30 95       	com	r19
    2808:	ce 01       	movw	r24, r28
    280a:	03 96       	adiw	r24, 0x03	; 3
    280c:	fc 01       	movw	r30, r24
    280e:	e2 0f       	add	r30, r18
    2810:	f3 1f       	adc	r31, r19
    2812:	80 81       	ld	r24, Z
    2814:	0e 94 24 10 	call	0x2048	; 0x2048 <LCD_enuSendCharacter>
				Local_s8Iterator--;
    2818:	8a 81       	ldd	r24, Y+2	; 0x02
    281a:	81 50       	subi	r24, 0x01	; 1
    281c:	8a 83       	std	Y+2, r24	; 0x02
				Copy_u32Number /= 10;
			}

			Local_s8Iterator--;

			while (Local_s8Iterator >= 0)
    281e:	8a 81       	ldd	r24, Y+2	; 0x02
    2820:	88 23       	and	r24, r24
    2822:	6c f7       	brge	.-38     	; 0x27fe <LCD_enuSendNumber+0xe8>
				Local_s8Iterator--;
			}
		}

	}
	return Local_enuErrorStatus;
    2824:	89 81       	ldd	r24, Y+1	; 0x01
}
    2826:	63 96       	adiw	r28, 0x13	; 19
    2828:	0f b6       	in	r0, 0x3f	; 63
    282a:	f8 94       	cli
    282c:	de bf       	out	0x3e, r29	; 62
    282e:	0f be       	out	0x3f, r0	; 63
    2830:	cd bf       	out	0x3d, r28	; 61
    2832:	cf 91       	pop	r28
    2834:	df 91       	pop	r29
    2836:	08 95       	ret

00002838 <LCD_Clear_Display>:
 * Description: Clear any data on LCD display
 * Arguments: 	vid
 * Return :	  	vid
 * */
void LCD_Clear_Display(void)
{
    2838:	df 93       	push	r29
    283a:	cf 93       	push	r28
    283c:	cd b7       	in	r28, 0x3d	; 61
    283e:	de b7       	in	r29, 0x3e	; 62
    2840:	6c 97       	sbiw	r28, 0x1c	; 28
    2842:	0f b6       	in	r0, 0x3f	; 63
    2844:	f8 94       	cli
    2846:	de bf       	out	0x3e, r29	; 62
    2848:	0f be       	out	0x3f, r0	; 63
    284a:	cd bf       	out	0x3d, r28	; 61
    284c:	80 e0       	ldi	r24, 0x00	; 0
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	a0 e2       	ldi	r26, 0x20	; 32
    2852:	b2 e4       	ldi	r27, 0x42	; 66
    2854:	89 8f       	std	Y+25, r24	; 0x19
    2856:	9a 8f       	std	Y+26, r25	; 0x1a
    2858:	ab 8f       	std	Y+27, r26	; 0x1b
    285a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    285c:	69 8d       	ldd	r22, Y+25	; 0x19
    285e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2860:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2862:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2864:	20 e0       	ldi	r18, 0x00	; 0
    2866:	30 e0       	ldi	r19, 0x00	; 0
    2868:	4a e7       	ldi	r20, 0x7A	; 122
    286a:	55 e4       	ldi	r21, 0x45	; 69
    286c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2870:	dc 01       	movw	r26, r24
    2872:	cb 01       	movw	r24, r22
    2874:	8d 8b       	std	Y+21, r24	; 0x15
    2876:	9e 8b       	std	Y+22, r25	; 0x16
    2878:	af 8b       	std	Y+23, r26	; 0x17
    287a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    287c:	6d 89       	ldd	r22, Y+21	; 0x15
    287e:	7e 89       	ldd	r23, Y+22	; 0x16
    2880:	8f 89       	ldd	r24, Y+23	; 0x17
    2882:	98 8d       	ldd	r25, Y+24	; 0x18
    2884:	20 e0       	ldi	r18, 0x00	; 0
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	40 e8       	ldi	r20, 0x80	; 128
    288a:	5f e3       	ldi	r21, 0x3F	; 63
    288c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2890:	88 23       	and	r24, r24
    2892:	2c f4       	brge	.+10     	; 0x289e <LCD_Clear_Display+0x66>
		__ticks = 1;
    2894:	81 e0       	ldi	r24, 0x01	; 1
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	9c 8b       	std	Y+20, r25	; 0x14
    289a:	8b 8b       	std	Y+19, r24	; 0x13
    289c:	3f c0       	rjmp	.+126    	; 0x291c <LCD_Clear_Display+0xe4>
	else if (__tmp > 65535)
    289e:	6d 89       	ldd	r22, Y+21	; 0x15
    28a0:	7e 89       	ldd	r23, Y+22	; 0x16
    28a2:	8f 89       	ldd	r24, Y+23	; 0x17
    28a4:	98 8d       	ldd	r25, Y+24	; 0x18
    28a6:	20 e0       	ldi	r18, 0x00	; 0
    28a8:	3f ef       	ldi	r19, 0xFF	; 255
    28aa:	4f e7       	ldi	r20, 0x7F	; 127
    28ac:	57 e4       	ldi	r21, 0x47	; 71
    28ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28b2:	18 16       	cp	r1, r24
    28b4:	4c f5       	brge	.+82     	; 0x2908 <LCD_Clear_Display+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28b6:	69 8d       	ldd	r22, Y+25	; 0x19
    28b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28be:	20 e0       	ldi	r18, 0x00	; 0
    28c0:	30 e0       	ldi	r19, 0x00	; 0
    28c2:	40 e2       	ldi	r20, 0x20	; 32
    28c4:	51 e4       	ldi	r21, 0x41	; 65
    28c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ca:	dc 01       	movw	r26, r24
    28cc:	cb 01       	movw	r24, r22
    28ce:	bc 01       	movw	r22, r24
    28d0:	cd 01       	movw	r24, r26
    28d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d6:	dc 01       	movw	r26, r24
    28d8:	cb 01       	movw	r24, r22
    28da:	9c 8b       	std	Y+20, r25	; 0x14
    28dc:	8b 8b       	std	Y+19, r24	; 0x13
    28de:	0f c0       	rjmp	.+30     	; 0x28fe <LCD_Clear_Display+0xc6>
    28e0:	80 e9       	ldi	r24, 0x90	; 144
    28e2:	91 e0       	ldi	r25, 0x01	; 1
    28e4:	9a 8b       	std	Y+18, r25	; 0x12
    28e6:	89 8b       	std	Y+17, r24	; 0x11
    28e8:	89 89       	ldd	r24, Y+17	; 0x11
    28ea:	9a 89       	ldd	r25, Y+18	; 0x12
    28ec:	01 97       	sbiw	r24, 0x01	; 1
    28ee:	f1 f7       	brne	.-4      	; 0x28ec <LCD_Clear_Display+0xb4>
    28f0:	9a 8b       	std	Y+18, r25	; 0x12
    28f2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28f4:	8b 89       	ldd	r24, Y+19	; 0x13
    28f6:	9c 89       	ldd	r25, Y+20	; 0x14
    28f8:	01 97       	sbiw	r24, 0x01	; 1
    28fa:	9c 8b       	std	Y+20, r25	; 0x14
    28fc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2900:	9c 89       	ldd	r25, Y+20	; 0x14
    2902:	00 97       	sbiw	r24, 0x00	; 0
    2904:	69 f7       	brne	.-38     	; 0x28e0 <LCD_Clear_Display+0xa8>
    2906:	14 c0       	rjmp	.+40     	; 0x2930 <LCD_Clear_Display+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2908:	6d 89       	ldd	r22, Y+21	; 0x15
    290a:	7e 89       	ldd	r23, Y+22	; 0x16
    290c:	8f 89       	ldd	r24, Y+23	; 0x17
    290e:	98 8d       	ldd	r25, Y+24	; 0x18
    2910:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2914:	dc 01       	movw	r26, r24
    2916:	cb 01       	movw	r24, r22
    2918:	9c 8b       	std	Y+20, r25	; 0x14
    291a:	8b 8b       	std	Y+19, r24	; 0x13
    291c:	8b 89       	ldd	r24, Y+19	; 0x13
    291e:	9c 89       	ldd	r25, Y+20	; 0x14
    2920:	98 8b       	std	Y+16, r25	; 0x10
    2922:	8f 87       	std	Y+15, r24	; 0x0f
    2924:	8f 85       	ldd	r24, Y+15	; 0x0f
    2926:	98 89       	ldd	r25, Y+16	; 0x10
    2928:	01 97       	sbiw	r24, 0x01	; 1
    292a:	f1 f7       	brne	.-4      	; 0x2928 <LCD_Clear_Display+0xf0>
    292c:	98 8b       	std	Y+16, r25	; 0x10
    292e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(40);
	LCD_enuSendInstruction(LCD_u8_CLEAR_DISPLAY);
    2930:	81 e0       	ldi	r24, 0x01	; 1
    2932:	0e 94 11 11 	call	0x2222	; 0x2222 <LCD_enuSendInstruction>
    2936:	80 e0       	ldi	r24, 0x00	; 0
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	a0 e2       	ldi	r26, 0x20	; 32
    293c:	b2 e4       	ldi	r27, 0x42	; 66
    293e:	8b 87       	std	Y+11, r24	; 0x0b
    2940:	9c 87       	std	Y+12, r25	; 0x0c
    2942:	ad 87       	std	Y+13, r26	; 0x0d
    2944:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2946:	6b 85       	ldd	r22, Y+11	; 0x0b
    2948:	7c 85       	ldd	r23, Y+12	; 0x0c
    294a:	8d 85       	ldd	r24, Y+13	; 0x0d
    294c:	9e 85       	ldd	r25, Y+14	; 0x0e
    294e:	20 e0       	ldi	r18, 0x00	; 0
    2950:	30 e0       	ldi	r19, 0x00	; 0
    2952:	4a e7       	ldi	r20, 0x7A	; 122
    2954:	55 e4       	ldi	r21, 0x45	; 69
    2956:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    295a:	dc 01       	movw	r26, r24
    295c:	cb 01       	movw	r24, r22
    295e:	8f 83       	std	Y+7, r24	; 0x07
    2960:	98 87       	std	Y+8, r25	; 0x08
    2962:	a9 87       	std	Y+9, r26	; 0x09
    2964:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2966:	6f 81       	ldd	r22, Y+7	; 0x07
    2968:	78 85       	ldd	r23, Y+8	; 0x08
    296a:	89 85       	ldd	r24, Y+9	; 0x09
    296c:	9a 85       	ldd	r25, Y+10	; 0x0a
    296e:	20 e0       	ldi	r18, 0x00	; 0
    2970:	30 e0       	ldi	r19, 0x00	; 0
    2972:	40 e8       	ldi	r20, 0x80	; 128
    2974:	5f e3       	ldi	r21, 0x3F	; 63
    2976:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    297a:	88 23       	and	r24, r24
    297c:	2c f4       	brge	.+10     	; 0x2988 <LCD_Clear_Display+0x150>
		__ticks = 1;
    297e:	81 e0       	ldi	r24, 0x01	; 1
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	9e 83       	std	Y+6, r25	; 0x06
    2984:	8d 83       	std	Y+5, r24	; 0x05
    2986:	3f c0       	rjmp	.+126    	; 0x2a06 <LCD_Clear_Display+0x1ce>
	else if (__tmp > 65535)
    2988:	6f 81       	ldd	r22, Y+7	; 0x07
    298a:	78 85       	ldd	r23, Y+8	; 0x08
    298c:	89 85       	ldd	r24, Y+9	; 0x09
    298e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2990:	20 e0       	ldi	r18, 0x00	; 0
    2992:	3f ef       	ldi	r19, 0xFF	; 255
    2994:	4f e7       	ldi	r20, 0x7F	; 127
    2996:	57 e4       	ldi	r21, 0x47	; 71
    2998:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    299c:	18 16       	cp	r1, r24
    299e:	4c f5       	brge	.+82     	; 0x29f2 <LCD_Clear_Display+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    29a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    29a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    29a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    29a8:	20 e0       	ldi	r18, 0x00	; 0
    29aa:	30 e0       	ldi	r19, 0x00	; 0
    29ac:	40 e2       	ldi	r20, 0x20	; 32
    29ae:	51 e4       	ldi	r21, 0x41	; 65
    29b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b4:	dc 01       	movw	r26, r24
    29b6:	cb 01       	movw	r24, r22
    29b8:	bc 01       	movw	r22, r24
    29ba:	cd 01       	movw	r24, r26
    29bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c0:	dc 01       	movw	r26, r24
    29c2:	cb 01       	movw	r24, r22
    29c4:	9e 83       	std	Y+6, r25	; 0x06
    29c6:	8d 83       	std	Y+5, r24	; 0x05
    29c8:	0f c0       	rjmp	.+30     	; 0x29e8 <LCD_Clear_Display+0x1b0>
    29ca:	80 e9       	ldi	r24, 0x90	; 144
    29cc:	91 e0       	ldi	r25, 0x01	; 1
    29ce:	9c 83       	std	Y+4, r25	; 0x04
    29d0:	8b 83       	std	Y+3, r24	; 0x03
    29d2:	8b 81       	ldd	r24, Y+3	; 0x03
    29d4:	9c 81       	ldd	r25, Y+4	; 0x04
    29d6:	01 97       	sbiw	r24, 0x01	; 1
    29d8:	f1 f7       	brne	.-4      	; 0x29d6 <LCD_Clear_Display+0x19e>
    29da:	9c 83       	std	Y+4, r25	; 0x04
    29dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29de:	8d 81       	ldd	r24, Y+5	; 0x05
    29e0:	9e 81       	ldd	r25, Y+6	; 0x06
    29e2:	01 97       	sbiw	r24, 0x01	; 1
    29e4:	9e 83       	std	Y+6, r25	; 0x06
    29e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29e8:	8d 81       	ldd	r24, Y+5	; 0x05
    29ea:	9e 81       	ldd	r25, Y+6	; 0x06
    29ec:	00 97       	sbiw	r24, 0x00	; 0
    29ee:	69 f7       	brne	.-38     	; 0x29ca <LCD_Clear_Display+0x192>
    29f0:	14 c0       	rjmp	.+40     	; 0x2a1a <LCD_Clear_Display+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29f2:	6f 81       	ldd	r22, Y+7	; 0x07
    29f4:	78 85       	ldd	r23, Y+8	; 0x08
    29f6:	89 85       	ldd	r24, Y+9	; 0x09
    29f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    29fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29fe:	dc 01       	movw	r26, r24
    2a00:	cb 01       	movw	r24, r22
    2a02:	9e 83       	std	Y+6, r25	; 0x06
    2a04:	8d 83       	std	Y+5, r24	; 0x05
    2a06:	8d 81       	ldd	r24, Y+5	; 0x05
    2a08:	9e 81       	ldd	r25, Y+6	; 0x06
    2a0a:	9a 83       	std	Y+2, r25	; 0x02
    2a0c:	89 83       	std	Y+1, r24	; 0x01
    2a0e:	89 81       	ldd	r24, Y+1	; 0x01
    2a10:	9a 81       	ldd	r25, Y+2	; 0x02
    2a12:	01 97       	sbiw	r24, 0x01	; 1
    2a14:	f1 f7       	brne	.-4      	; 0x2a12 <LCD_Clear_Display+0x1da>
    2a16:	9a 83       	std	Y+2, r25	; 0x02
    2a18:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(40);
}
    2a1a:	6c 96       	adiw	r28, 0x1c	; 28
    2a1c:	0f b6       	in	r0, 0x3f	; 63
    2a1e:	f8 94       	cli
    2a20:	de bf       	out	0x3e, r29	; 62
    2a22:	0f be       	out	0x3f, r0	; 63
    2a24:	cd bf       	out	0x3d, r28	; 61
    2a26:	cf 91       	pop	r28
    2a28:	df 91       	pop	r29
    2a2a:	08 95       	ret

00002a2c <KEYPAD_vidInit>:
 * Description: Initialize MCU Pins for Keypad
 * Arguments: 	void
 * Return :	  	void
 * */
void KEYPAD_vidInit(void)
{
    2a2c:	df 93       	push	r29
    2a2e:	cf 93       	push	r28
    2a30:	cd b7       	in	r28, 0x3d	; 61
    2a32:	de b7       	in	r29, 0x3e	; 62
	DIO_vidInit();
    2a34:	0e 94 2b 09 	call	0x1256	; 0x1256 <DIO_vidInit>
}
    2a38:	cf 91       	pop	r28
    2a3a:	df 91       	pop	r29
    2a3c:	08 95       	ret

00002a3e <KEYPAD_vidGetPressedKey>:
 * Description: Get value of pressed Key on keypad
 * Arguments: 	Address of variable to assign input in 
 * Return :	  	void
 * */
void KEYPAD_vidGetPressedKey(u8 *Add_pu8KeyValue)
{
    2a3e:	df 93       	push	r29
    2a40:	cf 93       	push	r28
    2a42:	00 d0       	rcall	.+0      	; 0x2a44 <KEYPAD_vidGetPressedKey+0x6>
    2a44:	00 d0       	rcall	.+0      	; 0x2a46 <KEYPAD_vidGetPressedKey+0x8>
    2a46:	0f 92       	push	r0
    2a48:	cd b7       	in	r28, 0x3d	; 61
    2a4a:	de b7       	in	r29, 0x3e	; 62
    2a4c:	9d 83       	std	Y+5, r25	; 0x05
    2a4e:	8c 83       	std	Y+4, r24	; 0x04

	/*check arguments*/

	u8 Local_u8ColsIterator = 0;
    2a50:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8RowsIterator = 0;
    2a52:	19 82       	std	Y+1, r1	; 0x01
	u8 Local_u8PinValue = 0;
    2a54:	1b 82       	std	Y+3, r1	; 0x03
	for (Local_u8ColsIterator = 0; Local_u8ColsIterator < KEYPAD_COLS_NUM; Local_u8ColsIterator++)
    2a56:	1a 82       	std	Y+2, r1	; 0x02
    2a58:	5e c0       	rjmp	.+188    	; 0x2b16 <KEYPAD_vidGetPressedKey+0xd8>
	{

		DIO_enuSetPinValue(KEYPAD_COL_PORT, KEYPAD_u8ArrColsPins[Local_u8ColsIterator], DIO_u8_LOW);
    2a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a5c:	88 2f       	mov	r24, r24
    2a5e:	90 e0       	ldi	r25, 0x00	; 0
    2a60:	fc 01       	movw	r30, r24
    2a62:	e0 5d       	subi	r30, 0xD0	; 208
    2a64:	fc 4f       	sbci	r31, 0xFC	; 252
    2a66:	90 81       	ld	r25, Z
    2a68:	80 e0       	ldi	r24, 0x00	; 0
    2a6a:	69 2f       	mov	r22, r25
    2a6c:	40 e0       	ldi	r20, 0x00	; 0
    2a6e:	0e 94 51 09 	call	0x12a2	; 0x12a2 <DIO_enuSetPinValue>
		for (Local_u8RowsIterator = 0; Local_u8RowsIterator < KEYPAD_ROWS_NUM;
    2a72:	19 82       	std	Y+1, r1	; 0x01
    2a74:	3d c0       	rjmp	.+122    	; 0x2af0 <KEYPAD_vidGetPressedKey+0xb2>
				Local_u8RowsIterator++)
		{

			DIO_enuGetPinValue(KEYPAD_ROW_PORT, KEYPAD_u8ArrRowsPins[Local_u8RowsIterator],
    2a76:	89 81       	ldd	r24, Y+1	; 0x01
    2a78:	88 2f       	mov	r24, r24
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	fc 01       	movw	r30, r24
    2a7e:	ec 5c       	subi	r30, 0xCC	; 204
    2a80:	fc 4f       	sbci	r31, 0xFC	; 252
    2a82:	90 81       	ld	r25, Z
    2a84:	9e 01       	movw	r18, r28
    2a86:	2d 5f       	subi	r18, 0xFD	; 253
    2a88:	3f 4f       	sbci	r19, 0xFF	; 255
    2a8a:	80 e0       	ldi	r24, 0x00	; 0
    2a8c:	69 2f       	mov	r22, r25
    2a8e:	a9 01       	movw	r20, r18
    2a90:	0e 94 4c 0a 	call	0x1498	; 0x1498 <DIO_enuGetPinValue>
					&Local_u8PinValue);

			if (Local_u8PinValue == 0)
    2a94:	8b 81       	ldd	r24, Y+3	; 0x03
    2a96:	88 23       	and	r24, r24
    2a98:	41 f5       	brne	.+80     	; 0x2aea <KEYPAD_vidGetPressedKey+0xac>
			{

				*Add_pu8KeyValue = KEYPAD_u8KeysValue[Local_u8RowsIterator][Local_u8ColsIterator];
    2a9a:	89 81       	ldd	r24, Y+1	; 0x01
    2a9c:	48 2f       	mov	r20, r24
    2a9e:	50 e0       	ldi	r21, 0x00	; 0
    2aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa2:	28 2f       	mov	r18, r24
    2aa4:	30 e0       	ldi	r19, 0x00	; 0
    2aa6:	ca 01       	movw	r24, r20
    2aa8:	88 0f       	add	r24, r24
    2aaa:	99 1f       	adc	r25, r25
    2aac:	88 0f       	add	r24, r24
    2aae:	99 1f       	adc	r25, r25
    2ab0:	82 0f       	add	r24, r18
    2ab2:	93 1f       	adc	r25, r19
    2ab4:	fc 01       	movw	r30, r24
    2ab6:	e0 5e       	subi	r30, 0xE0	; 224
    2ab8:	fc 4f       	sbci	r31, 0xFC	; 252
    2aba:	80 81       	ld	r24, Z
    2abc:	ec 81       	ldd	r30, Y+4	; 0x04
    2abe:	fd 81       	ldd	r31, Y+5	; 0x05
    2ac0:	80 83       	st	Z, r24
    2ac2:	0f c0       	rjmp	.+30     	; 0x2ae2 <KEYPAD_vidGetPressedKey+0xa4>
				while (Local_u8PinValue == DIO_u8_LOW)
				{
					DIO_enuGetPinValue(KEYPAD_ROW_PORT, KEYPAD_u8ArrRowsPins[Local_u8RowsIterator],
    2ac4:	89 81       	ldd	r24, Y+1	; 0x01
    2ac6:	88 2f       	mov	r24, r24
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	fc 01       	movw	r30, r24
    2acc:	ec 5c       	subi	r30, 0xCC	; 204
    2ace:	fc 4f       	sbci	r31, 0xFC	; 252
    2ad0:	90 81       	ld	r25, Z
    2ad2:	9e 01       	movw	r18, r28
    2ad4:	2d 5f       	subi	r18, 0xFD	; 253
    2ad6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ad8:	80 e0       	ldi	r24, 0x00	; 0
    2ada:	69 2f       	mov	r22, r25
    2adc:	a9 01       	movw	r20, r18
    2ade:	0e 94 4c 0a 	call	0x1498	; 0x1498 <DIO_enuGetPinValue>

			if (Local_u8PinValue == 0)
			{

				*Add_pu8KeyValue = KEYPAD_u8KeysValue[Local_u8RowsIterator][Local_u8ColsIterator];
				while (Local_u8PinValue == DIO_u8_LOW)
    2ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae4:	88 23       	and	r24, r24
    2ae6:	71 f3       	breq	.-36     	; 0x2ac4 <KEYPAD_vidGetPressedKey+0x86>
    2ae8:	1d c0       	rjmp	.+58     	; 0x2b24 <KEYPAD_vidGetPressedKey+0xe6>
	for (Local_u8ColsIterator = 0; Local_u8ColsIterator < KEYPAD_COLS_NUM; Local_u8ColsIterator++)
	{

		DIO_enuSetPinValue(KEYPAD_COL_PORT, KEYPAD_u8ArrColsPins[Local_u8ColsIterator], DIO_u8_LOW);
		for (Local_u8RowsIterator = 0; Local_u8RowsIterator < KEYPAD_ROWS_NUM;
				Local_u8RowsIterator++)
    2aea:	89 81       	ldd	r24, Y+1	; 0x01
    2aec:	8f 5f       	subi	r24, 0xFF	; 255
    2aee:	89 83       	std	Y+1, r24	; 0x01
	u8 Local_u8PinValue = 0;
	for (Local_u8ColsIterator = 0; Local_u8ColsIterator < KEYPAD_COLS_NUM; Local_u8ColsIterator++)
	{

		DIO_enuSetPinValue(KEYPAD_COL_PORT, KEYPAD_u8ArrColsPins[Local_u8ColsIterator], DIO_u8_LOW);
		for (Local_u8RowsIterator = 0; Local_u8RowsIterator < KEYPAD_ROWS_NUM;
    2af0:	89 81       	ldd	r24, Y+1	; 0x01
    2af2:	84 30       	cpi	r24, 0x04	; 4
    2af4:	08 f4       	brcc	.+2      	; 0x2af8 <KEYPAD_vidGetPressedKey+0xba>
    2af6:	bf cf       	rjmp	.-130    	; 0x2a76 <KEYPAD_vidGetPressedKey+0x38>
				return;
			}

		}

		DIO_enuSetPinValue(KEYPAD_COL_PORT, KEYPAD_u8ArrColsPins[Local_u8ColsIterator],
    2af8:	8a 81       	ldd	r24, Y+2	; 0x02
    2afa:	88 2f       	mov	r24, r24
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	fc 01       	movw	r30, r24
    2b00:	e0 5d       	subi	r30, 0xD0	; 208
    2b02:	fc 4f       	sbci	r31, 0xFC	; 252
    2b04:	90 81       	ld	r25, Z
    2b06:	80 e0       	ldi	r24, 0x00	; 0
    2b08:	69 2f       	mov	r22, r25
    2b0a:	41 e0       	ldi	r20, 0x01	; 1
    2b0c:	0e 94 51 09 	call	0x12a2	; 0x12a2 <DIO_enuSetPinValue>
	/*check arguments*/

	u8 Local_u8ColsIterator = 0;
	u8 Local_u8RowsIterator = 0;
	u8 Local_u8PinValue = 0;
	for (Local_u8ColsIterator = 0; Local_u8ColsIterator < KEYPAD_COLS_NUM; Local_u8ColsIterator++)
    2b10:	8a 81       	ldd	r24, Y+2	; 0x02
    2b12:	8f 5f       	subi	r24, 0xFF	; 255
    2b14:	8a 83       	std	Y+2, r24	; 0x02
    2b16:	8a 81       	ldd	r24, Y+2	; 0x02
    2b18:	84 30       	cpi	r24, 0x04	; 4
    2b1a:	08 f4       	brcc	.+2      	; 0x2b1e <KEYPAD_vidGetPressedKey+0xe0>
    2b1c:	9e cf       	rjmp	.-196    	; 0x2a5a <KEYPAD_vidGetPressedKey+0x1c>

		DIO_enuSetPinValue(KEYPAD_COL_PORT, KEYPAD_u8ArrColsPins[Local_u8ColsIterator],
		DIO_u8_HIGH);
	}

	*Add_pu8KeyValue = KEYPAD_NOT_PRESSED;
    2b1e:	ec 81       	ldd	r30, Y+4	; 0x04
    2b20:	fd 81       	ldd	r31, Y+5	; 0x05
    2b22:	10 82       	st	Z, r1
}
    2b24:	0f 90       	pop	r0
    2b26:	0f 90       	pop	r0
    2b28:	0f 90       	pop	r0
    2b2a:	0f 90       	pop	r0
    2b2c:	0f 90       	pop	r0
    2b2e:	cf 91       	pop	r28
    2b30:	df 91       	pop	r29
    2b32:	08 95       	ret

00002b34 <SECURITY_APP_vidStartCheck>:
#include<util/delay.h>
u8 Global_u8Iterator = 0;
u8 SECURITY_u8ArrPassword[4] =
{ 0 };
void SECURITY_APP_vidStartCheck(void)
{
    2b34:	df 93       	push	r29
    2b36:	cf 93       	push	r28
    2b38:	cd b7       	in	r28, 0x3d	; 61
    2b3a:	de b7       	in	r29, 0x3e	; 62
    2b3c:	6d 97       	sbiw	r28, 0x1d	; 29
    2b3e:	0f b6       	in	r0, 0x3f	; 63
    2b40:	f8 94       	cli
    2b42:	de bf       	out	0x3e, r29	; 62
    2b44:	0f be       	out	0x3f, r0	; 63
    2b46:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8PswrdTries = 0;
    2b48:	1d 8e       	std	Y+29, r1	; 0x1d
	//===================start checking=========================
	if (SECURITY_u8CheckForSetPassword() == NO_PASSSWORD_SET)
    2b4a:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <SECURITY_u8CheckForSetPassword>
    2b4e:	8f 3f       	cpi	r24, 0xFF	; 255
    2b50:	09 f0       	breq	.+2      	; 0x2b54 <SECURITY_APP_vidStartCheck+0x20>
    2b52:	7b c0       	rjmp	.+246    	; 0x2c4a <SECURITY_APP_vidStartCheck+0x116>
	{
		// its first time : ask user to set new password
		LCD_enuSendString("First Time :)");
    2b54:	80 e6       	ldi	r24, 0x60	; 96
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
    2b5c:	80 e0       	ldi	r24, 0x00	; 0
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	aa e7       	ldi	r26, 0x7A	; 122
    2b62:	b4 e4       	ldi	r27, 0x44	; 68
    2b64:	89 8f       	std	Y+25, r24	; 0x19
    2b66:	9a 8f       	std	Y+26, r25	; 0x1a
    2b68:	ab 8f       	std	Y+27, r26	; 0x1b
    2b6a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b6c:	69 8d       	ldd	r22, Y+25	; 0x19
    2b6e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b70:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b72:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b74:	20 e0       	ldi	r18, 0x00	; 0
    2b76:	30 e0       	ldi	r19, 0x00	; 0
    2b78:	4a e7       	ldi	r20, 0x7A	; 122
    2b7a:	55 e4       	ldi	r21, 0x45	; 69
    2b7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b80:	dc 01       	movw	r26, r24
    2b82:	cb 01       	movw	r24, r22
    2b84:	8d 8b       	std	Y+21, r24	; 0x15
    2b86:	9e 8b       	std	Y+22, r25	; 0x16
    2b88:	af 8b       	std	Y+23, r26	; 0x17
    2b8a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b8c:	6d 89       	ldd	r22, Y+21	; 0x15
    2b8e:	7e 89       	ldd	r23, Y+22	; 0x16
    2b90:	8f 89       	ldd	r24, Y+23	; 0x17
    2b92:	98 8d       	ldd	r25, Y+24	; 0x18
    2b94:	20 e0       	ldi	r18, 0x00	; 0
    2b96:	30 e0       	ldi	r19, 0x00	; 0
    2b98:	40 e8       	ldi	r20, 0x80	; 128
    2b9a:	5f e3       	ldi	r21, 0x3F	; 63
    2b9c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ba0:	88 23       	and	r24, r24
    2ba2:	2c f4       	brge	.+10     	; 0x2bae <SECURITY_APP_vidStartCheck+0x7a>
		__ticks = 1;
    2ba4:	81 e0       	ldi	r24, 0x01	; 1
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
    2ba8:	9c 8b       	std	Y+20, r25	; 0x14
    2baa:	8b 8b       	std	Y+19, r24	; 0x13
    2bac:	3f c0       	rjmp	.+126    	; 0x2c2c <SECURITY_APP_vidStartCheck+0xf8>
	else if (__tmp > 65535)
    2bae:	6d 89       	ldd	r22, Y+21	; 0x15
    2bb0:	7e 89       	ldd	r23, Y+22	; 0x16
    2bb2:	8f 89       	ldd	r24, Y+23	; 0x17
    2bb4:	98 8d       	ldd	r25, Y+24	; 0x18
    2bb6:	20 e0       	ldi	r18, 0x00	; 0
    2bb8:	3f ef       	ldi	r19, 0xFF	; 255
    2bba:	4f e7       	ldi	r20, 0x7F	; 127
    2bbc:	57 e4       	ldi	r21, 0x47	; 71
    2bbe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bc2:	18 16       	cp	r1, r24
    2bc4:	4c f5       	brge	.+82     	; 0x2c18 <SECURITY_APP_vidStartCheck+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bc6:	69 8d       	ldd	r22, Y+25	; 0x19
    2bc8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bcc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bce:	20 e0       	ldi	r18, 0x00	; 0
    2bd0:	30 e0       	ldi	r19, 0x00	; 0
    2bd2:	40 e2       	ldi	r20, 0x20	; 32
    2bd4:	51 e4       	ldi	r21, 0x41	; 65
    2bd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bda:	dc 01       	movw	r26, r24
    2bdc:	cb 01       	movw	r24, r22
    2bde:	bc 01       	movw	r22, r24
    2be0:	cd 01       	movw	r24, r26
    2be2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2be6:	dc 01       	movw	r26, r24
    2be8:	cb 01       	movw	r24, r22
    2bea:	9c 8b       	std	Y+20, r25	; 0x14
    2bec:	8b 8b       	std	Y+19, r24	; 0x13
    2bee:	0f c0       	rjmp	.+30     	; 0x2c0e <SECURITY_APP_vidStartCheck+0xda>
    2bf0:	80 e9       	ldi	r24, 0x90	; 144
    2bf2:	91 e0       	ldi	r25, 0x01	; 1
    2bf4:	9a 8b       	std	Y+18, r25	; 0x12
    2bf6:	89 8b       	std	Y+17, r24	; 0x11
    2bf8:	89 89       	ldd	r24, Y+17	; 0x11
    2bfa:	9a 89       	ldd	r25, Y+18	; 0x12
    2bfc:	01 97       	sbiw	r24, 0x01	; 1
    2bfe:	f1 f7       	brne	.-4      	; 0x2bfc <SECURITY_APP_vidStartCheck+0xc8>
    2c00:	9a 8b       	std	Y+18, r25	; 0x12
    2c02:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c04:	8b 89       	ldd	r24, Y+19	; 0x13
    2c06:	9c 89       	ldd	r25, Y+20	; 0x14
    2c08:	01 97       	sbiw	r24, 0x01	; 1
    2c0a:	9c 8b       	std	Y+20, r25	; 0x14
    2c0c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c0e:	8b 89       	ldd	r24, Y+19	; 0x13
    2c10:	9c 89       	ldd	r25, Y+20	; 0x14
    2c12:	00 97       	sbiw	r24, 0x00	; 0
    2c14:	69 f7       	brne	.-38     	; 0x2bf0 <SECURITY_APP_vidStartCheck+0xbc>
    2c16:	14 c0       	rjmp	.+40     	; 0x2c40 <SECURITY_APP_vidStartCheck+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c18:	6d 89       	ldd	r22, Y+21	; 0x15
    2c1a:	7e 89       	ldd	r23, Y+22	; 0x16
    2c1c:	8f 89       	ldd	r24, Y+23	; 0x17
    2c1e:	98 8d       	ldd	r25, Y+24	; 0x18
    2c20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c24:	dc 01       	movw	r26, r24
    2c26:	cb 01       	movw	r24, r22
    2c28:	9c 8b       	std	Y+20, r25	; 0x14
    2c2a:	8b 8b       	std	Y+19, r24	; 0x13
    2c2c:	8b 89       	ldd	r24, Y+19	; 0x13
    2c2e:	9c 89       	ldd	r25, Y+20	; 0x14
    2c30:	98 8b       	std	Y+16, r25	; 0x10
    2c32:	8f 87       	std	Y+15, r24	; 0x0f
    2c34:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c36:	98 89       	ldd	r25, Y+16	; 0x10
    2c38:	01 97       	sbiw	r24, 0x01	; 1
    2c3a:	f1 f7       	brne	.-4      	; 0x2c38 <SECURITY_APP_vidStartCheck+0x104>
    2c3c:	98 8b       	std	Y+16, r25	; 0x10
    2c3e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		SECURITY_vidSetNewPassword();
    2c40:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <SECURITY_vidSetNewPassword>
		//recall function
		SECURITY_APP_vidStartCheck();
    2c44:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <SECURITY_APP_vidStartCheck>
    2c48:	c8 c0       	rjmp	.+400    	; 0x2dda <SECURITY_APP_vidStartCheck+0x2a6>
	}
	else
	{
		// Password is set already
		// first check for violation
		if (SECURITY_u8CheckForViolation() == VOLATED)
    2c4a:	0e 94 c2 19 	call	0x3384	; 0x3384 <SECURITY_u8CheckForViolation>
    2c4e:	88 23       	and	r24, r24
    2c50:	79 f4       	brne	.+30     	; 0x2c70 <SECURITY_APP_vidStartCheck+0x13c>
		{
			LCD_Clear_Display();
    2c52:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_Clear_Display>
			LCD_enuSendString("Can't open");
    2c56:	8e e6       	ldi	r24, 0x6E	; 110
    2c58:	90 e0       	ldi	r25, 0x00	; 0
    2c5a:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
			LCD_enuChangePosition(1, 0);
    2c5e:	81 e0       	ldi	r24, 0x01	; 1
    2c60:	60 e0       	ldi	r22, 0x00	; 0
    2c62:	0e 94 1e 12 	call	0x243c	; 0x243c <LCD_enuChangePosition>
			LCD_enuSendString("Call maintenance");
    2c66:	89 e7       	ldi	r24, 0x79	; 121
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
    2c6e:	ff cf       	rjmp	.-2      	; 0x2c6e <SECURITY_APP_vidStartCheck+0x13a>
		}
		else
		{
			// not violated before
			// fetch password from EEPROM
			LCD_enuSendString("Enter Your");
    2c70:	8a e8       	ldi	r24, 0x8A	; 138
    2c72:	90 e0       	ldi	r25, 0x00	; 0
    2c74:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
			LCD_enuChangePosition(1, 0);
    2c78:	81 e0       	ldi	r24, 0x01	; 1
    2c7a:	60 e0       	ldi	r22, 0x00	; 0
    2c7c:	0e 94 1e 12 	call	0x243c	; 0x243c <LCD_enuChangePosition>
			LCD_enuSendString("Password :");
    2c80:	85 e9       	ldi	r24, 0x95	; 149
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
			do
			{
				GetPassword(~PSWRD_INDICATOR_1ST_TIME);
    2c88:	8f ef       	ldi	r24, 0xFF	; 255
    2c8a:	0e 94 f6 16 	call	0x2dec	; 0x2dec <GetPassword>
				Local_u8PswrdTries++;
    2c8e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c90:	8f 5f       	subi	r24, 0xFF	; 255
    2c92:	8d 8f       	std	Y+29, r24	; 0x1d
				// check for password
				if (SECURITY_vidCheckEnterdPassword() == CORRECT_PASSWORD)
    2c94:	0e 94 94 19 	call	0x3328	; 0x3328 <SECURITY_vidCheckEnterdPassword>
    2c98:	88 23       	and	r24, r24
    2c9a:	09 f0       	breq	.+2      	; 0x2c9e <SECURITY_APP_vidStartCheck+0x16a>
    2c9c:	79 c0       	rjmp	.+242    	; 0x2d90 <SECURITY_APP_vidStartCheck+0x25c>
				{
					// password correct
					//===============correct password===============
					LCD_Clear_Display();
    2c9e:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_Clear_Display>
					LCD_enuSendString("    Welcome");
    2ca2:	80 ea       	ldi	r24, 0xA0	; 160
    2ca4:	90 e0       	ldi	r25, 0x00	; 0
    2ca6:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
    2caa:	80 e0       	ldi	r24, 0x00	; 0
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	aa ef       	ldi	r26, 0xFA	; 250
    2cb0:	b3 e4       	ldi	r27, 0x43	; 67
    2cb2:	8b 87       	std	Y+11, r24	; 0x0b
    2cb4:	9c 87       	std	Y+12, r25	; 0x0c
    2cb6:	ad 87       	std	Y+13, r26	; 0x0d
    2cb8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cba:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cbc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cc2:	20 e0       	ldi	r18, 0x00	; 0
    2cc4:	30 e0       	ldi	r19, 0x00	; 0
    2cc6:	4a e7       	ldi	r20, 0x7A	; 122
    2cc8:	55 e4       	ldi	r21, 0x45	; 69
    2cca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cce:	dc 01       	movw	r26, r24
    2cd0:	cb 01       	movw	r24, r22
    2cd2:	8f 83       	std	Y+7, r24	; 0x07
    2cd4:	98 87       	std	Y+8, r25	; 0x08
    2cd6:	a9 87       	std	Y+9, r26	; 0x09
    2cd8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cda:	6f 81       	ldd	r22, Y+7	; 0x07
    2cdc:	78 85       	ldd	r23, Y+8	; 0x08
    2cde:	89 85       	ldd	r24, Y+9	; 0x09
    2ce0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ce2:	20 e0       	ldi	r18, 0x00	; 0
    2ce4:	30 e0       	ldi	r19, 0x00	; 0
    2ce6:	40 e8       	ldi	r20, 0x80	; 128
    2ce8:	5f e3       	ldi	r21, 0x3F	; 63
    2cea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cee:	88 23       	and	r24, r24
    2cf0:	2c f4       	brge	.+10     	; 0x2cfc <SECURITY_APP_vidStartCheck+0x1c8>
		__ticks = 1;
    2cf2:	81 e0       	ldi	r24, 0x01	; 1
    2cf4:	90 e0       	ldi	r25, 0x00	; 0
    2cf6:	9e 83       	std	Y+6, r25	; 0x06
    2cf8:	8d 83       	std	Y+5, r24	; 0x05
    2cfa:	3f c0       	rjmp	.+126    	; 0x2d7a <SECURITY_APP_vidStartCheck+0x246>
	else if (__tmp > 65535)
    2cfc:	6f 81       	ldd	r22, Y+7	; 0x07
    2cfe:	78 85       	ldd	r23, Y+8	; 0x08
    2d00:	89 85       	ldd	r24, Y+9	; 0x09
    2d02:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d04:	20 e0       	ldi	r18, 0x00	; 0
    2d06:	3f ef       	ldi	r19, 0xFF	; 255
    2d08:	4f e7       	ldi	r20, 0x7F	; 127
    2d0a:	57 e4       	ldi	r21, 0x47	; 71
    2d0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d10:	18 16       	cp	r1, r24
    2d12:	4c f5       	brge	.+82     	; 0x2d66 <SECURITY_APP_vidStartCheck+0x232>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d14:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d16:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d18:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d1c:	20 e0       	ldi	r18, 0x00	; 0
    2d1e:	30 e0       	ldi	r19, 0x00	; 0
    2d20:	40 e2       	ldi	r20, 0x20	; 32
    2d22:	51 e4       	ldi	r21, 0x41	; 65
    2d24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d28:	dc 01       	movw	r26, r24
    2d2a:	cb 01       	movw	r24, r22
    2d2c:	bc 01       	movw	r22, r24
    2d2e:	cd 01       	movw	r24, r26
    2d30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d34:	dc 01       	movw	r26, r24
    2d36:	cb 01       	movw	r24, r22
    2d38:	9e 83       	std	Y+6, r25	; 0x06
    2d3a:	8d 83       	std	Y+5, r24	; 0x05
    2d3c:	0f c0       	rjmp	.+30     	; 0x2d5c <SECURITY_APP_vidStartCheck+0x228>
    2d3e:	80 e9       	ldi	r24, 0x90	; 144
    2d40:	91 e0       	ldi	r25, 0x01	; 1
    2d42:	9c 83       	std	Y+4, r25	; 0x04
    2d44:	8b 83       	std	Y+3, r24	; 0x03
    2d46:	8b 81       	ldd	r24, Y+3	; 0x03
    2d48:	9c 81       	ldd	r25, Y+4	; 0x04
    2d4a:	01 97       	sbiw	r24, 0x01	; 1
    2d4c:	f1 f7       	brne	.-4      	; 0x2d4a <SECURITY_APP_vidStartCheck+0x216>
    2d4e:	9c 83       	std	Y+4, r25	; 0x04
    2d50:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d52:	8d 81       	ldd	r24, Y+5	; 0x05
    2d54:	9e 81       	ldd	r25, Y+6	; 0x06
    2d56:	01 97       	sbiw	r24, 0x01	; 1
    2d58:	9e 83       	std	Y+6, r25	; 0x06
    2d5a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d5e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d60:	00 97       	sbiw	r24, 0x00	; 0
    2d62:	69 f7       	brne	.-38     	; 0x2d3e <SECURITY_APP_vidStartCheck+0x20a>
    2d64:	3a c0       	rjmp	.+116    	; 0x2dda <SECURITY_APP_vidStartCheck+0x2a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d66:	6f 81       	ldd	r22, Y+7	; 0x07
    2d68:	78 85       	ldd	r23, Y+8	; 0x08
    2d6a:	89 85       	ldd	r24, Y+9	; 0x09
    2d6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d72:	dc 01       	movw	r26, r24
    2d74:	cb 01       	movw	r24, r22
    2d76:	9e 83       	std	Y+6, r25	; 0x06
    2d78:	8d 83       	std	Y+5, r24	; 0x05
    2d7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d7c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d7e:	9a 83       	std	Y+2, r25	; 0x02
    2d80:	89 83       	std	Y+1, r24	; 0x01
    2d82:	89 81       	ldd	r24, Y+1	; 0x01
    2d84:	9a 81       	ldd	r25, Y+2	; 0x02
    2d86:	01 97       	sbiw	r24, 0x01	; 1
    2d88:	f1 f7       	brne	.-4      	; 0x2d86 <SECURITY_APP_vidStartCheck+0x252>
    2d8a:	9a 83       	std	Y+2, r25	; 0x02
    2d8c:	89 83       	std	Y+1, r24	; 0x01
    2d8e:	25 c0       	rjmp	.+74     	; 0x2dda <SECURITY_APP_vidStartCheck+0x2a6>
					break;
				}
				else
				{
					// password not correct
					if (Local_u8PswrdTries < 3)
    2d90:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d92:	83 30       	cpi	r24, 0x03	; 3
    2d94:	78 f4       	brcc	.+30     	; 0x2db4 <SECURITY_APP_vidStartCheck+0x280>
					{
						// not exceeded number of tries
						LCD_Clear_Display();
    2d96:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_Clear_Display>
						LCD_enuSendString("Try again");
    2d9a:	8c ea       	ldi	r24, 0xAC	; 172
    2d9c:	90 e0       	ldi	r25, 0x00	; 0
    2d9e:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
						LCD_enuChangePosition(1, 0);
    2da2:	81 e0       	ldi	r24, 0x01	; 1
    2da4:	60 e0       	ldi	r22, 0x00	; 0
    2da6:	0e 94 1e 12 	call	0x243c	; 0x243c <LCD_enuChangePosition>
						LCD_enuSendString(": ");
    2daa:	86 eb       	ldi	r24, 0xB6	; 182
    2dac:	90 e0       	ldi	r25, 0x00	; 0
    2dae:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
    2db2:	6a cf       	rjmp	.-300    	; 0x2c88 <SECURITY_APP_vidStartCheck+0x154>
					}
					else
					{
						// if exceeded number of tries
						LCD_Clear_Display();
    2db4:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_Clear_Display>
						LCD_enuSendString("Can't open");
    2db8:	8e e6       	ldi	r24, 0x6E	; 110
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
						LCD_enuChangePosition(1, 0);
    2dc0:	81 e0       	ldi	r24, 0x01	; 1
    2dc2:	60 e0       	ldi	r22, 0x00	; 0
    2dc4:	0e 94 1e 12 	call	0x243c	; 0x243c <LCD_enuChangePosition>
						LCD_enuSendString("CallingEmergancy");
    2dc8:	89 eb       	ldi	r24, 0xB9	; 185
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
						// mark on eeprom for violation
						SECURITY_vidMarkViolated();
    2dd0:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <SECURITY_vidMarkViolated>
						// and call emergancy
						CallEmergancy();
    2dd4:	0e 94 cd 19 	call	0x339a	; 0x339a <CallEmergancy>
    2dd8:	ff cf       	rjmp	.-2      	; 0x2dd8 <SECURITY_APP_vidStartCheck+0x2a4>
				}
			} while (1);
			//=======================================================================================================================================================================================
		}
	}
}
    2dda:	6d 96       	adiw	r28, 0x1d	; 29
    2ddc:	0f b6       	in	r0, 0x3f	; 63
    2dde:	f8 94       	cli
    2de0:	de bf       	out	0x3e, r29	; 62
    2de2:	0f be       	out	0x3f, r0	; 63
    2de4:	cd bf       	out	0x3d, r28	; 61
    2de6:	cf 91       	pop	r28
    2de8:	df 91       	pop	r29
    2dea:	08 95       	ret

00002dec <GetPassword>:
void GetPassword(u8 Local_u8Indicator)
{
    2dec:	df 93       	push	r29
    2dee:	cf 93       	push	r28
    2df0:	00 d0       	rcall	.+0      	; 0x2df2 <GetPassword+0x6>
    2df2:	cd b7       	in	r28, 0x3d	; 61
    2df4:	de b7       	in	r29, 0x3e	; 62
    2df6:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8_PressedKey = 0;
    2df8:	19 82       	std	Y+1, r1	; 0x01
	for (Global_u8Iterator = 0; Global_u8Iterator < 4; Global_u8Iterator++)
    2dfa:	10 92 3b 03 	sts	0x033B, r1
    2dfe:	22 c0       	rjmp	.+68     	; 0x2e44 <GetPassword+0x58>
	{
		do
		{
			KEYPAD_vidGetPressedKey(&Local_u8_PressedKey);
    2e00:	ce 01       	movw	r24, r28
    2e02:	01 96       	adiw	r24, 0x01	; 1
    2e04:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <KEYPAD_vidGetPressedKey>
		} while (Local_u8_PressedKey == 0);
    2e08:	89 81       	ldd	r24, Y+1	; 0x01
    2e0a:	88 23       	and	r24, r24
    2e0c:	c9 f3       	breq	.-14     	; 0x2e00 <GetPassword+0x14>

		if (Local_u8_PressedKey != 0)
    2e0e:	89 81       	ldd	r24, Y+1	; 0x01
    2e10:	88 23       	and	r24, r24
    2e12:	99 f0       	breq	.+38     	; 0x2e3a <GetPassword+0x4e>
		{
			SECURITY_u8ArrPassword[Global_u8Iterator] = Local_u8_PressedKey;
    2e14:	80 91 3b 03 	lds	r24, 0x033B
    2e18:	88 2f       	mov	r24, r24
    2e1a:	90 e0       	ldi	r25, 0x00	; 0
    2e1c:	29 81       	ldd	r18, Y+1	; 0x01
    2e1e:	fc 01       	movw	r30, r24
    2e20:	e4 5c       	subi	r30, 0xC4	; 196
    2e22:	fc 4f       	sbci	r31, 0xFC	; 252
    2e24:	20 83       	st	Z, r18

			if (Local_u8Indicator == PSWRD_INDICATOR_1ST_TIME)
    2e26:	8a 81       	ldd	r24, Y+2	; 0x02
    2e28:	88 23       	and	r24, r24
    2e2a:	21 f4       	brne	.+8      	; 0x2e34 <GetPassword+0x48>
			{
				LCD_enuSendCharacter(Local_u8_PressedKey);
    2e2c:	89 81       	ldd	r24, Y+1	; 0x01
    2e2e:	0e 94 24 10 	call	0x2048	; 0x2048 <LCD_enuSendCharacter>
    2e32:	03 c0       	rjmp	.+6      	; 0x2e3a <GetPassword+0x4e>
			}
			else
			{
				LCD_enuSendCharacter('*');
    2e34:	8a e2       	ldi	r24, 0x2A	; 42
    2e36:	0e 94 24 10 	call	0x2048	; 0x2048 <LCD_enuSendCharacter>
}
void GetPassword(u8 Local_u8Indicator)
{

	u8 Local_u8_PressedKey = 0;
	for (Global_u8Iterator = 0; Global_u8Iterator < 4; Global_u8Iterator++)
    2e3a:	80 91 3b 03 	lds	r24, 0x033B
    2e3e:	8f 5f       	subi	r24, 0xFF	; 255
    2e40:	80 93 3b 03 	sts	0x033B, r24
    2e44:	80 91 3b 03 	lds	r24, 0x033B
    2e48:	84 30       	cpi	r24, 0x04	; 4
    2e4a:	d0 f2       	brcs	.-76     	; 0x2e00 <GetPassword+0x14>
			{
				LCD_enuSendCharacter('*');
			}
		}
	}
}
    2e4c:	0f 90       	pop	r0
    2e4e:	0f 90       	pop	r0
    2e50:	cf 91       	pop	r28
    2e52:	df 91       	pop	r29
    2e54:	08 95       	ret

00002e56 <SECURITY_u8CheckForSetPassword>:
u8 SECURITY_u8CheckForSetPassword(void)
{
    2e56:	df 93       	push	r29
    2e58:	cf 93       	push	r28
    2e5a:	cd b7       	in	r28, 0x3d	; 61
    2e5c:	de b7       	in	r29, 0x3e	; 62
	return EEPROM_enuReadByte(STATUS_AD);
    2e5e:	80 e1       	ldi	r24, 0x10	; 16
    2e60:	91 e0       	ldi	r25, 0x01	; 1
    2e62:	0e 94 05 09 	call	0x120a	; 0x120a <EEPROM_enuReadByte>
}
    2e66:	cf 91       	pop	r28
    2e68:	df 91       	pop	r29
    2e6a:	08 95       	ret

00002e6c <SECURITY_vidSetNewPassword>:
void SECURITY_vidSetNewPassword(void)
{
    2e6c:	df 93       	push	r29
    2e6e:	cf 93       	push	r28
    2e70:	cd b7       	in	r28, 0x3d	; 61
    2e72:	de b7       	in	r29, 0x3e	; 62
    2e74:	e8 97       	sbiw	r28, 0x38	; 56
    2e76:	0f b6       	in	r0, 0x3f	; 63
    2e78:	f8 94       	cli
    2e7a:	de bf       	out	0x3e, r29	; 62
    2e7c:	0f be       	out	0x3f, r0	; 63
    2e7e:	cd bf       	out	0x3d, r28	; 61
	do
	{
		LCD_Clear_Display();
    2e80:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_Clear_Display>
		LCD_enuSendString("Set 4 Digits");
    2e84:	8a ec       	ldi	r24, 0xCA	; 202
    2e86:	90 e0       	ldi	r25, 0x00	; 0
    2e88:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
		LCD_enuChangePosition(1, 0);
    2e8c:	81 e0       	ldi	r24, 0x01	; 1
    2e8e:	60 e0       	ldi	r22, 0x00	; 0
    2e90:	0e 94 1e 12 	call	0x243c	; 0x243c <LCD_enuChangePosition>
		LCD_enuSendString("Password :");
    2e94:	85 e9       	ldi	r24, 0x95	; 149
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
		GetPassword(PSWRD_INDICATOR_1ST_TIME);
    2e9c:	80 e0       	ldi	r24, 0x00	; 0
    2e9e:	0e 94 f6 16 	call	0x2dec	; 0x2dec <GetPassword>
		LCD_Clear_Display();
    2ea2:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_Clear_Display>
		LCD_enuSendString("Your Password is");
    2ea6:	87 ed       	ldi	r24, 0xD7	; 215
    2ea8:	90 e0       	ldi	r25, 0x00	; 0
    2eaa:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
		LCD_enuChangePosition(1, 0);
    2eae:	81 e0       	ldi	r24, 0x01	; 1
    2eb0:	60 e0       	ldi	r22, 0x00	; 0
    2eb2:	0e 94 1e 12 	call	0x243c	; 0x243c <LCD_enuChangePosition>
    2eb6:	80 e0       	ldi	r24, 0x00	; 0
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	a8 e4       	ldi	r26, 0x48	; 72
    2ebc:	b2 e4       	ldi	r27, 0x42	; 66
    2ebe:	8d ab       	std	Y+53, r24	; 0x35
    2ec0:	9e ab       	std	Y+54, r25	; 0x36
    2ec2:	af ab       	std	Y+55, r26	; 0x37
    2ec4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ec6:	6d a9       	ldd	r22, Y+53	; 0x35
    2ec8:	7e a9       	ldd	r23, Y+54	; 0x36
    2eca:	8f a9       	ldd	r24, Y+55	; 0x37
    2ecc:	98 ad       	ldd	r25, Y+56	; 0x38
    2ece:	20 e0       	ldi	r18, 0x00	; 0
    2ed0:	30 e0       	ldi	r19, 0x00	; 0
    2ed2:	4a e7       	ldi	r20, 0x7A	; 122
    2ed4:	55 e4       	ldi	r21, 0x45	; 69
    2ed6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eda:	dc 01       	movw	r26, r24
    2edc:	cb 01       	movw	r24, r22
    2ede:	89 ab       	std	Y+49, r24	; 0x31
    2ee0:	9a ab       	std	Y+50, r25	; 0x32
    2ee2:	ab ab       	std	Y+51, r26	; 0x33
    2ee4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2ee6:	69 a9       	ldd	r22, Y+49	; 0x31
    2ee8:	7a a9       	ldd	r23, Y+50	; 0x32
    2eea:	8b a9       	ldd	r24, Y+51	; 0x33
    2eec:	9c a9       	ldd	r25, Y+52	; 0x34
    2eee:	20 e0       	ldi	r18, 0x00	; 0
    2ef0:	30 e0       	ldi	r19, 0x00	; 0
    2ef2:	40 e8       	ldi	r20, 0x80	; 128
    2ef4:	5f e3       	ldi	r21, 0x3F	; 63
    2ef6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2efa:	88 23       	and	r24, r24
    2efc:	2c f4       	brge	.+10     	; 0x2f08 <SECURITY_vidSetNewPassword+0x9c>
		__ticks = 1;
    2efe:	81 e0       	ldi	r24, 0x01	; 1
    2f00:	90 e0       	ldi	r25, 0x00	; 0
    2f02:	98 ab       	std	Y+48, r25	; 0x30
    2f04:	8f a7       	std	Y+47, r24	; 0x2f
    2f06:	3f c0       	rjmp	.+126    	; 0x2f86 <SECURITY_vidSetNewPassword+0x11a>
	else if (__tmp > 65535)
    2f08:	69 a9       	ldd	r22, Y+49	; 0x31
    2f0a:	7a a9       	ldd	r23, Y+50	; 0x32
    2f0c:	8b a9       	ldd	r24, Y+51	; 0x33
    2f0e:	9c a9       	ldd	r25, Y+52	; 0x34
    2f10:	20 e0       	ldi	r18, 0x00	; 0
    2f12:	3f ef       	ldi	r19, 0xFF	; 255
    2f14:	4f e7       	ldi	r20, 0x7F	; 127
    2f16:	57 e4       	ldi	r21, 0x47	; 71
    2f18:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f1c:	18 16       	cp	r1, r24
    2f1e:	4c f5       	brge	.+82     	; 0x2f72 <SECURITY_vidSetNewPassword+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f20:	6d a9       	ldd	r22, Y+53	; 0x35
    2f22:	7e a9       	ldd	r23, Y+54	; 0x36
    2f24:	8f a9       	ldd	r24, Y+55	; 0x37
    2f26:	98 ad       	ldd	r25, Y+56	; 0x38
    2f28:	20 e0       	ldi	r18, 0x00	; 0
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	40 e2       	ldi	r20, 0x20	; 32
    2f2e:	51 e4       	ldi	r21, 0x41	; 65
    2f30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f34:	dc 01       	movw	r26, r24
    2f36:	cb 01       	movw	r24, r22
    2f38:	bc 01       	movw	r22, r24
    2f3a:	cd 01       	movw	r24, r26
    2f3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f40:	dc 01       	movw	r26, r24
    2f42:	cb 01       	movw	r24, r22
    2f44:	98 ab       	std	Y+48, r25	; 0x30
    2f46:	8f a7       	std	Y+47, r24	; 0x2f
    2f48:	0f c0       	rjmp	.+30     	; 0x2f68 <SECURITY_vidSetNewPassword+0xfc>
    2f4a:	80 e9       	ldi	r24, 0x90	; 144
    2f4c:	91 e0       	ldi	r25, 0x01	; 1
    2f4e:	9e a7       	std	Y+46, r25	; 0x2e
    2f50:	8d a7       	std	Y+45, r24	; 0x2d
    2f52:	8d a5       	ldd	r24, Y+45	; 0x2d
    2f54:	9e a5       	ldd	r25, Y+46	; 0x2e
    2f56:	01 97       	sbiw	r24, 0x01	; 1
    2f58:	f1 f7       	brne	.-4      	; 0x2f56 <SECURITY_vidSetNewPassword+0xea>
    2f5a:	9e a7       	std	Y+46, r25	; 0x2e
    2f5c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f5e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f60:	98 a9       	ldd	r25, Y+48	; 0x30
    2f62:	01 97       	sbiw	r24, 0x01	; 1
    2f64:	98 ab       	std	Y+48, r25	; 0x30
    2f66:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f68:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f6a:	98 a9       	ldd	r25, Y+48	; 0x30
    2f6c:	00 97       	sbiw	r24, 0x00	; 0
    2f6e:	69 f7       	brne	.-38     	; 0x2f4a <SECURITY_vidSetNewPassword+0xde>
    2f70:	14 c0       	rjmp	.+40     	; 0x2f9a <SECURITY_vidSetNewPassword+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f72:	69 a9       	ldd	r22, Y+49	; 0x31
    2f74:	7a a9       	ldd	r23, Y+50	; 0x32
    2f76:	8b a9       	ldd	r24, Y+51	; 0x33
    2f78:	9c a9       	ldd	r25, Y+52	; 0x34
    2f7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f7e:	dc 01       	movw	r26, r24
    2f80:	cb 01       	movw	r24, r22
    2f82:	98 ab       	std	Y+48, r25	; 0x30
    2f84:	8f a7       	std	Y+47, r24	; 0x2f
    2f86:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f88:	98 a9       	ldd	r25, Y+48	; 0x30
    2f8a:	9c a7       	std	Y+44, r25	; 0x2c
    2f8c:	8b a7       	std	Y+43, r24	; 0x2b
    2f8e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f90:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f92:	01 97       	sbiw	r24, 0x01	; 1
    2f94:	f1 f7       	brne	.-4      	; 0x2f92 <SECURITY_vidSetNewPassword+0x126>
    2f96:	9c a7       	std	Y+44, r25	; 0x2c
    2f98:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(50);
		for (Global_u8Iterator = 0; Global_u8Iterator < 4; Global_u8Iterator++)
    2f9a:	10 92 3b 03 	sts	0x033B, r1
    2f9e:	0f c0       	rjmp	.+30     	; 0x2fbe <SECURITY_vidSetNewPassword+0x152>
		{
			LCD_enuSendCharacter(SECURITY_u8ArrPassword[Global_u8Iterator]);
    2fa0:	80 91 3b 03 	lds	r24, 0x033B
    2fa4:	88 2f       	mov	r24, r24
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	fc 01       	movw	r30, r24
    2faa:	e4 5c       	subi	r30, 0xC4	; 196
    2fac:	fc 4f       	sbci	r31, 0xFC	; 252
    2fae:	80 81       	ld	r24, Z
    2fb0:	0e 94 24 10 	call	0x2048	; 0x2048 <LCD_enuSendCharacter>
		GetPassword(PSWRD_INDICATOR_1ST_TIME);
		LCD_Clear_Display();
		LCD_enuSendString("Your Password is");
		LCD_enuChangePosition(1, 0);
		_delay_ms(50);
		for (Global_u8Iterator = 0; Global_u8Iterator < 4; Global_u8Iterator++)
    2fb4:	80 91 3b 03 	lds	r24, 0x033B
    2fb8:	8f 5f       	subi	r24, 0xFF	; 255
    2fba:	80 93 3b 03 	sts	0x033B, r24
    2fbe:	80 91 3b 03 	lds	r24, 0x033B
    2fc2:	84 30       	cpi	r24, 0x04	; 4
    2fc4:	68 f3       	brcs	.-38     	; 0x2fa0 <SECURITY_vidSetNewPassword+0x134>
    2fc6:	80 e0       	ldi	r24, 0x00	; 0
    2fc8:	90 e0       	ldi	r25, 0x00	; 0
    2fca:	aa e7       	ldi	r26, 0x7A	; 122
    2fcc:	b4 e4       	ldi	r27, 0x44	; 68
    2fce:	8f a3       	std	Y+39, r24	; 0x27
    2fd0:	98 a7       	std	Y+40, r25	; 0x28
    2fd2:	a9 a7       	std	Y+41, r26	; 0x29
    2fd4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fd6:	6f a1       	ldd	r22, Y+39	; 0x27
    2fd8:	78 a5       	ldd	r23, Y+40	; 0x28
    2fda:	89 a5       	ldd	r24, Y+41	; 0x29
    2fdc:	9a a5       	ldd	r25, Y+42	; 0x2a
    2fde:	20 e0       	ldi	r18, 0x00	; 0
    2fe0:	30 e0       	ldi	r19, 0x00	; 0
    2fe2:	4a e7       	ldi	r20, 0x7A	; 122
    2fe4:	55 e4       	ldi	r21, 0x45	; 69
    2fe6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fea:	dc 01       	movw	r26, r24
    2fec:	cb 01       	movw	r24, r22
    2fee:	8b a3       	std	Y+35, r24	; 0x23
    2ff0:	9c a3       	std	Y+36, r25	; 0x24
    2ff2:	ad a3       	std	Y+37, r26	; 0x25
    2ff4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2ff6:	6b a1       	ldd	r22, Y+35	; 0x23
    2ff8:	7c a1       	ldd	r23, Y+36	; 0x24
    2ffa:	8d a1       	ldd	r24, Y+37	; 0x25
    2ffc:	9e a1       	ldd	r25, Y+38	; 0x26
    2ffe:	20 e0       	ldi	r18, 0x00	; 0
    3000:	30 e0       	ldi	r19, 0x00	; 0
    3002:	40 e8       	ldi	r20, 0x80	; 128
    3004:	5f e3       	ldi	r21, 0x3F	; 63
    3006:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    300a:	88 23       	and	r24, r24
    300c:	2c f4       	brge	.+10     	; 0x3018 <SECURITY_vidSetNewPassword+0x1ac>
		__ticks = 1;
    300e:	81 e0       	ldi	r24, 0x01	; 1
    3010:	90 e0       	ldi	r25, 0x00	; 0
    3012:	9a a3       	std	Y+34, r25	; 0x22
    3014:	89 a3       	std	Y+33, r24	; 0x21
    3016:	3f c0       	rjmp	.+126    	; 0x3096 <SECURITY_vidSetNewPassword+0x22a>
	else if (__tmp > 65535)
    3018:	6b a1       	ldd	r22, Y+35	; 0x23
    301a:	7c a1       	ldd	r23, Y+36	; 0x24
    301c:	8d a1       	ldd	r24, Y+37	; 0x25
    301e:	9e a1       	ldd	r25, Y+38	; 0x26
    3020:	20 e0       	ldi	r18, 0x00	; 0
    3022:	3f ef       	ldi	r19, 0xFF	; 255
    3024:	4f e7       	ldi	r20, 0x7F	; 127
    3026:	57 e4       	ldi	r21, 0x47	; 71
    3028:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    302c:	18 16       	cp	r1, r24
    302e:	4c f5       	brge	.+82     	; 0x3082 <SECURITY_vidSetNewPassword+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3030:	6f a1       	ldd	r22, Y+39	; 0x27
    3032:	78 a5       	ldd	r23, Y+40	; 0x28
    3034:	89 a5       	ldd	r24, Y+41	; 0x29
    3036:	9a a5       	ldd	r25, Y+42	; 0x2a
    3038:	20 e0       	ldi	r18, 0x00	; 0
    303a:	30 e0       	ldi	r19, 0x00	; 0
    303c:	40 e2       	ldi	r20, 0x20	; 32
    303e:	51 e4       	ldi	r21, 0x41	; 65
    3040:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3044:	dc 01       	movw	r26, r24
    3046:	cb 01       	movw	r24, r22
    3048:	bc 01       	movw	r22, r24
    304a:	cd 01       	movw	r24, r26
    304c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3050:	dc 01       	movw	r26, r24
    3052:	cb 01       	movw	r24, r22
    3054:	9a a3       	std	Y+34, r25	; 0x22
    3056:	89 a3       	std	Y+33, r24	; 0x21
    3058:	0f c0       	rjmp	.+30     	; 0x3078 <SECURITY_vidSetNewPassword+0x20c>
    305a:	80 e9       	ldi	r24, 0x90	; 144
    305c:	91 e0       	ldi	r25, 0x01	; 1
    305e:	98 a3       	std	Y+32, r25	; 0x20
    3060:	8f 8f       	std	Y+31, r24	; 0x1f
    3062:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3064:	98 a1       	ldd	r25, Y+32	; 0x20
    3066:	01 97       	sbiw	r24, 0x01	; 1
    3068:	f1 f7       	brne	.-4      	; 0x3066 <SECURITY_vidSetNewPassword+0x1fa>
    306a:	98 a3       	std	Y+32, r25	; 0x20
    306c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    306e:	89 a1       	ldd	r24, Y+33	; 0x21
    3070:	9a a1       	ldd	r25, Y+34	; 0x22
    3072:	01 97       	sbiw	r24, 0x01	; 1
    3074:	9a a3       	std	Y+34, r25	; 0x22
    3076:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3078:	89 a1       	ldd	r24, Y+33	; 0x21
    307a:	9a a1       	ldd	r25, Y+34	; 0x22
    307c:	00 97       	sbiw	r24, 0x00	; 0
    307e:	69 f7       	brne	.-38     	; 0x305a <SECURITY_vidSetNewPassword+0x1ee>
    3080:	14 c0       	rjmp	.+40     	; 0x30aa <SECURITY_vidSetNewPassword+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3082:	6b a1       	ldd	r22, Y+35	; 0x23
    3084:	7c a1       	ldd	r23, Y+36	; 0x24
    3086:	8d a1       	ldd	r24, Y+37	; 0x25
    3088:	9e a1       	ldd	r25, Y+38	; 0x26
    308a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    308e:	dc 01       	movw	r26, r24
    3090:	cb 01       	movw	r24, r22
    3092:	9a a3       	std	Y+34, r25	; 0x22
    3094:	89 a3       	std	Y+33, r24	; 0x21
    3096:	89 a1       	ldd	r24, Y+33	; 0x21
    3098:	9a a1       	ldd	r25, Y+34	; 0x22
    309a:	9e 8f       	std	Y+30, r25	; 0x1e
    309c:	8d 8f       	std	Y+29, r24	; 0x1d
    309e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30a0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    30a2:	01 97       	sbiw	r24, 0x01	; 1
    30a4:	f1 f7       	brne	.-4      	; 0x30a2 <SECURITY_vidSetNewPassword+0x236>
    30a6:	9e 8f       	std	Y+30, r25	; 0x1e
    30a8:	8d 8f       	std	Y+29, r24	; 0x1d
		{
			LCD_enuSendCharacter(SECURITY_u8ArrPassword[Global_u8Iterator]);
		}
		_delay_ms(1000);
		LCD_Clear_Display();
    30aa:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_Clear_Display>
		LCD_enuSendString("Are you sure ?");
    30ae:	88 ee       	ldi	r24, 0xE8	; 232
    30b0:	90 e0       	ldi	r25, 0x00	; 0
    30b2:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
    30b6:	80 e0       	ldi	r24, 0x00	; 0
    30b8:	90 e0       	ldi	r25, 0x00	; 0
    30ba:	aa e7       	ldi	r26, 0x7A	; 122
    30bc:	b4 e4       	ldi	r27, 0x44	; 68
    30be:	89 8f       	std	Y+25, r24	; 0x19
    30c0:	9a 8f       	std	Y+26, r25	; 0x1a
    30c2:	ab 8f       	std	Y+27, r26	; 0x1b
    30c4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30c6:	69 8d       	ldd	r22, Y+25	; 0x19
    30c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30ce:	20 e0       	ldi	r18, 0x00	; 0
    30d0:	30 e0       	ldi	r19, 0x00	; 0
    30d2:	4a e7       	ldi	r20, 0x7A	; 122
    30d4:	55 e4       	ldi	r21, 0x45	; 69
    30d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30da:	dc 01       	movw	r26, r24
    30dc:	cb 01       	movw	r24, r22
    30de:	8d 8b       	std	Y+21, r24	; 0x15
    30e0:	9e 8b       	std	Y+22, r25	; 0x16
    30e2:	af 8b       	std	Y+23, r26	; 0x17
    30e4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    30e6:	6d 89       	ldd	r22, Y+21	; 0x15
    30e8:	7e 89       	ldd	r23, Y+22	; 0x16
    30ea:	8f 89       	ldd	r24, Y+23	; 0x17
    30ec:	98 8d       	ldd	r25, Y+24	; 0x18
    30ee:	20 e0       	ldi	r18, 0x00	; 0
    30f0:	30 e0       	ldi	r19, 0x00	; 0
    30f2:	40 e8       	ldi	r20, 0x80	; 128
    30f4:	5f e3       	ldi	r21, 0x3F	; 63
    30f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30fa:	88 23       	and	r24, r24
    30fc:	2c f4       	brge	.+10     	; 0x3108 <SECURITY_vidSetNewPassword+0x29c>
		__ticks = 1;
    30fe:	81 e0       	ldi	r24, 0x01	; 1
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	9c 8b       	std	Y+20, r25	; 0x14
    3104:	8b 8b       	std	Y+19, r24	; 0x13
    3106:	3f c0       	rjmp	.+126    	; 0x3186 <SECURITY_vidSetNewPassword+0x31a>
	else if (__tmp > 65535)
    3108:	6d 89       	ldd	r22, Y+21	; 0x15
    310a:	7e 89       	ldd	r23, Y+22	; 0x16
    310c:	8f 89       	ldd	r24, Y+23	; 0x17
    310e:	98 8d       	ldd	r25, Y+24	; 0x18
    3110:	20 e0       	ldi	r18, 0x00	; 0
    3112:	3f ef       	ldi	r19, 0xFF	; 255
    3114:	4f e7       	ldi	r20, 0x7F	; 127
    3116:	57 e4       	ldi	r21, 0x47	; 71
    3118:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    311c:	18 16       	cp	r1, r24
    311e:	4c f5       	brge	.+82     	; 0x3172 <SECURITY_vidSetNewPassword+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3120:	69 8d       	ldd	r22, Y+25	; 0x19
    3122:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3124:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3126:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3128:	20 e0       	ldi	r18, 0x00	; 0
    312a:	30 e0       	ldi	r19, 0x00	; 0
    312c:	40 e2       	ldi	r20, 0x20	; 32
    312e:	51 e4       	ldi	r21, 0x41	; 65
    3130:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3134:	dc 01       	movw	r26, r24
    3136:	cb 01       	movw	r24, r22
    3138:	bc 01       	movw	r22, r24
    313a:	cd 01       	movw	r24, r26
    313c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3140:	dc 01       	movw	r26, r24
    3142:	cb 01       	movw	r24, r22
    3144:	9c 8b       	std	Y+20, r25	; 0x14
    3146:	8b 8b       	std	Y+19, r24	; 0x13
    3148:	0f c0       	rjmp	.+30     	; 0x3168 <SECURITY_vidSetNewPassword+0x2fc>
    314a:	80 e9       	ldi	r24, 0x90	; 144
    314c:	91 e0       	ldi	r25, 0x01	; 1
    314e:	9a 8b       	std	Y+18, r25	; 0x12
    3150:	89 8b       	std	Y+17, r24	; 0x11
    3152:	89 89       	ldd	r24, Y+17	; 0x11
    3154:	9a 89       	ldd	r25, Y+18	; 0x12
    3156:	01 97       	sbiw	r24, 0x01	; 1
    3158:	f1 f7       	brne	.-4      	; 0x3156 <SECURITY_vidSetNewPassword+0x2ea>
    315a:	9a 8b       	std	Y+18, r25	; 0x12
    315c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    315e:	8b 89       	ldd	r24, Y+19	; 0x13
    3160:	9c 89       	ldd	r25, Y+20	; 0x14
    3162:	01 97       	sbiw	r24, 0x01	; 1
    3164:	9c 8b       	std	Y+20, r25	; 0x14
    3166:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3168:	8b 89       	ldd	r24, Y+19	; 0x13
    316a:	9c 89       	ldd	r25, Y+20	; 0x14
    316c:	00 97       	sbiw	r24, 0x00	; 0
    316e:	69 f7       	brne	.-38     	; 0x314a <SECURITY_vidSetNewPassword+0x2de>
    3170:	14 c0       	rjmp	.+40     	; 0x319a <SECURITY_vidSetNewPassword+0x32e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3172:	6d 89       	ldd	r22, Y+21	; 0x15
    3174:	7e 89       	ldd	r23, Y+22	; 0x16
    3176:	8f 89       	ldd	r24, Y+23	; 0x17
    3178:	98 8d       	ldd	r25, Y+24	; 0x18
    317a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    317e:	dc 01       	movw	r26, r24
    3180:	cb 01       	movw	r24, r22
    3182:	9c 8b       	std	Y+20, r25	; 0x14
    3184:	8b 8b       	std	Y+19, r24	; 0x13
    3186:	8b 89       	ldd	r24, Y+19	; 0x13
    3188:	9c 89       	ldd	r25, Y+20	; 0x14
    318a:	98 8b       	std	Y+16, r25	; 0x10
    318c:	8f 87       	std	Y+15, r24	; 0x0f
    318e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3190:	98 89       	ldd	r25, Y+16	; 0x10
    3192:	01 97       	sbiw	r24, 0x01	; 1
    3194:	f1 f7       	brne	.-4      	; 0x3192 <SECURITY_vidSetNewPassword+0x326>
    3196:	98 8b       	std	Y+16, r25	; 0x10
    3198:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		LCD_Clear_Display();
    319a:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_Clear_Display>
		LCD_enuSendString("1: Yes");
    319e:	87 ef       	ldi	r24, 0xF7	; 247
    31a0:	90 e0       	ldi	r25, 0x00	; 0
    31a2:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
		LCD_enuChangePosition(1, 0);
    31a6:	81 e0       	ldi	r24, 0x01	; 1
    31a8:	60 e0       	ldi	r22, 0x00	; 0
    31aa:	0e 94 1e 12 	call	0x243c	; 0x243c <LCD_enuChangePosition>
		LCD_enuSendString("2: No ");
    31ae:	8e ef       	ldi	r24, 0xFE	; 254
    31b0:	90 e0       	ldi	r25, 0x00	; 0
    31b2:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
		if (GetChioce() == '1')
    31b6:	0e 94 28 2b 	call	0x5650	; 0x5650 <GetChioce>
    31ba:	81 33       	cpi	r24, 0x31	; 49
    31bc:	91 05       	cpc	r25, r1
    31be:	09 f0       	breq	.+2      	; 0x31c2 <SECURITY_vidSetNewPassword+0x356>
    31c0:	85 c0       	rjmp	.+266    	; 0x32cc <SECURITY_vidSetNewPassword+0x460>
		{
			LCD_Clear_Display();
    31c2:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_Clear_Display>
			LCD_enuSendString("OK");
    31c6:	85 e0       	ldi	r24, 0x05	; 5
    31c8:	91 e0       	ldi	r25, 0x01	; 1
    31ca:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
    31ce:	80 e0       	ldi	r24, 0x00	; 0
    31d0:	90 e0       	ldi	r25, 0x00	; 0
    31d2:	aa ef       	ldi	r26, 0xFA	; 250
    31d4:	b3 e4       	ldi	r27, 0x43	; 67
    31d6:	8b 87       	std	Y+11, r24	; 0x0b
    31d8:	9c 87       	std	Y+12, r25	; 0x0c
    31da:	ad 87       	std	Y+13, r26	; 0x0d
    31dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31de:	6b 85       	ldd	r22, Y+11	; 0x0b
    31e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    31e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    31e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    31e6:	20 e0       	ldi	r18, 0x00	; 0
    31e8:	30 e0       	ldi	r19, 0x00	; 0
    31ea:	4a e7       	ldi	r20, 0x7A	; 122
    31ec:	55 e4       	ldi	r21, 0x45	; 69
    31ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31f2:	dc 01       	movw	r26, r24
    31f4:	cb 01       	movw	r24, r22
    31f6:	8f 83       	std	Y+7, r24	; 0x07
    31f8:	98 87       	std	Y+8, r25	; 0x08
    31fa:	a9 87       	std	Y+9, r26	; 0x09
    31fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31fe:	6f 81       	ldd	r22, Y+7	; 0x07
    3200:	78 85       	ldd	r23, Y+8	; 0x08
    3202:	89 85       	ldd	r24, Y+9	; 0x09
    3204:	9a 85       	ldd	r25, Y+10	; 0x0a
    3206:	20 e0       	ldi	r18, 0x00	; 0
    3208:	30 e0       	ldi	r19, 0x00	; 0
    320a:	40 e8       	ldi	r20, 0x80	; 128
    320c:	5f e3       	ldi	r21, 0x3F	; 63
    320e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3212:	88 23       	and	r24, r24
    3214:	2c f4       	brge	.+10     	; 0x3220 <SECURITY_vidSetNewPassword+0x3b4>
		__ticks = 1;
    3216:	81 e0       	ldi	r24, 0x01	; 1
    3218:	90 e0       	ldi	r25, 0x00	; 0
    321a:	9e 83       	std	Y+6, r25	; 0x06
    321c:	8d 83       	std	Y+5, r24	; 0x05
    321e:	3f c0       	rjmp	.+126    	; 0x329e <SECURITY_vidSetNewPassword+0x432>
	else if (__tmp > 65535)
    3220:	6f 81       	ldd	r22, Y+7	; 0x07
    3222:	78 85       	ldd	r23, Y+8	; 0x08
    3224:	89 85       	ldd	r24, Y+9	; 0x09
    3226:	9a 85       	ldd	r25, Y+10	; 0x0a
    3228:	20 e0       	ldi	r18, 0x00	; 0
    322a:	3f ef       	ldi	r19, 0xFF	; 255
    322c:	4f e7       	ldi	r20, 0x7F	; 127
    322e:	57 e4       	ldi	r21, 0x47	; 71
    3230:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3234:	18 16       	cp	r1, r24
    3236:	4c f5       	brge	.+82     	; 0x328a <SECURITY_vidSetNewPassword+0x41e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3238:	6b 85       	ldd	r22, Y+11	; 0x0b
    323a:	7c 85       	ldd	r23, Y+12	; 0x0c
    323c:	8d 85       	ldd	r24, Y+13	; 0x0d
    323e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3240:	20 e0       	ldi	r18, 0x00	; 0
    3242:	30 e0       	ldi	r19, 0x00	; 0
    3244:	40 e2       	ldi	r20, 0x20	; 32
    3246:	51 e4       	ldi	r21, 0x41	; 65
    3248:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    324c:	dc 01       	movw	r26, r24
    324e:	cb 01       	movw	r24, r22
    3250:	bc 01       	movw	r22, r24
    3252:	cd 01       	movw	r24, r26
    3254:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3258:	dc 01       	movw	r26, r24
    325a:	cb 01       	movw	r24, r22
    325c:	9e 83       	std	Y+6, r25	; 0x06
    325e:	8d 83       	std	Y+5, r24	; 0x05
    3260:	0f c0       	rjmp	.+30     	; 0x3280 <SECURITY_vidSetNewPassword+0x414>
    3262:	80 e9       	ldi	r24, 0x90	; 144
    3264:	91 e0       	ldi	r25, 0x01	; 1
    3266:	9c 83       	std	Y+4, r25	; 0x04
    3268:	8b 83       	std	Y+3, r24	; 0x03
    326a:	8b 81       	ldd	r24, Y+3	; 0x03
    326c:	9c 81       	ldd	r25, Y+4	; 0x04
    326e:	01 97       	sbiw	r24, 0x01	; 1
    3270:	f1 f7       	brne	.-4      	; 0x326e <SECURITY_vidSetNewPassword+0x402>
    3272:	9c 83       	std	Y+4, r25	; 0x04
    3274:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3276:	8d 81       	ldd	r24, Y+5	; 0x05
    3278:	9e 81       	ldd	r25, Y+6	; 0x06
    327a:	01 97       	sbiw	r24, 0x01	; 1
    327c:	9e 83       	std	Y+6, r25	; 0x06
    327e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3280:	8d 81       	ldd	r24, Y+5	; 0x05
    3282:	9e 81       	ldd	r25, Y+6	; 0x06
    3284:	00 97       	sbiw	r24, 0x00	; 0
    3286:	69 f7       	brne	.-38     	; 0x3262 <SECURITY_vidSetNewPassword+0x3f6>
    3288:	14 c0       	rjmp	.+40     	; 0x32b2 <SECURITY_vidSetNewPassword+0x446>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    328a:	6f 81       	ldd	r22, Y+7	; 0x07
    328c:	78 85       	ldd	r23, Y+8	; 0x08
    328e:	89 85       	ldd	r24, Y+9	; 0x09
    3290:	9a 85       	ldd	r25, Y+10	; 0x0a
    3292:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3296:	dc 01       	movw	r26, r24
    3298:	cb 01       	movw	r24, r22
    329a:	9e 83       	std	Y+6, r25	; 0x06
    329c:	8d 83       	std	Y+5, r24	; 0x05
    329e:	8d 81       	ldd	r24, Y+5	; 0x05
    32a0:	9e 81       	ldd	r25, Y+6	; 0x06
    32a2:	9a 83       	std	Y+2, r25	; 0x02
    32a4:	89 83       	std	Y+1, r24	; 0x01
    32a6:	89 81       	ldd	r24, Y+1	; 0x01
    32a8:	9a 81       	ldd	r25, Y+2	; 0x02
    32aa:	01 97       	sbiw	r24, 0x01	; 1
    32ac:	f1 f7       	brne	.-4      	; 0x32aa <SECURITY_vidSetNewPassword+0x43e>
    32ae:	9a 83       	std	Y+2, r25	; 0x02
    32b0:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			SECURITY_vidWritePassword();
    32b2:	0e 94 69 19 	call	0x32d2	; 0x32d2 <SECURITY_vidWritePassword>
			LCD_Clear_Display();
    32b6:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_Clear_Display>
			break;
		}
		LCD_Clear_Display();

	} while (1);
}
    32ba:	e8 96       	adiw	r28, 0x38	; 56
    32bc:	0f b6       	in	r0, 0x3f	; 63
    32be:	f8 94       	cli
    32c0:	de bf       	out	0x3e, r29	; 62
    32c2:	0f be       	out	0x3f, r0	; 63
    32c4:	cd bf       	out	0x3d, r28	; 61
    32c6:	cf 91       	pop	r28
    32c8:	df 91       	pop	r29
    32ca:	08 95       	ret
			_delay_ms(500);
			SECURITY_vidWritePassword();
			LCD_Clear_Display();
			break;
		}
		LCD_Clear_Display();
    32cc:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_Clear_Display>
    32d0:	d7 cd       	rjmp	.-1106   	; 0x2e80 <SECURITY_vidSetNewPassword+0x14>

000032d2 <SECURITY_vidWritePassword>:

	} while (1);
}
void SECURITY_vidWritePassword(void)
{
    32d2:	df 93       	push	r29
    32d4:	cf 93       	push	r28
    32d6:	cd b7       	in	r28, 0x3d	; 61
    32d8:	de b7       	in	r29, 0x3e	; 62
	EEPROM_enuWriteByte(STATUS_AD, 0);
    32da:	80 e1       	ldi	r24, 0x10	; 16
    32dc:	91 e0       	ldi	r25, 0x01	; 1
    32de:	60 e0       	ldi	r22, 0x00	; 0
    32e0:	0e 94 8f 08 	call	0x111e	; 0x111e <EEPROM_enuWriteByte>
	for (Global_u8Iterator = 0; Global_u8Iterator < 4; Global_u8Iterator++)
    32e4:	10 92 3b 03 	sts	0x033B, r1
    32e8:	18 c0       	rjmp	.+48     	; 0x331a <SECURITY_vidWritePassword+0x48>
	{
		EEPROM_enuWriteByte(PASS_AD + Global_u8Iterator, SECURITY_u8ArrPassword[Global_u8Iterator]);
    32ea:	80 91 3b 03 	lds	r24, 0x033B
    32ee:	88 2f       	mov	r24, r24
    32f0:	90 e0       	ldi	r25, 0x00	; 0
    32f2:	80 5e       	subi	r24, 0xE0	; 224
    32f4:	9e 4f       	sbci	r25, 0xFE	; 254
    32f6:	ac 01       	movw	r20, r24
    32f8:	80 91 3b 03 	lds	r24, 0x033B
    32fc:	88 2f       	mov	r24, r24
    32fe:	90 e0       	ldi	r25, 0x00	; 0
    3300:	fc 01       	movw	r30, r24
    3302:	e4 5c       	subi	r30, 0xC4	; 196
    3304:	fc 4f       	sbci	r31, 0xFC	; 252
    3306:	20 81       	ld	r18, Z
    3308:	ca 01       	movw	r24, r20
    330a:	62 2f       	mov	r22, r18
    330c:	0e 94 8f 08 	call	0x111e	; 0x111e <EEPROM_enuWriteByte>
	} while (1);
}
void SECURITY_vidWritePassword(void)
{
	EEPROM_enuWriteByte(STATUS_AD, 0);
	for (Global_u8Iterator = 0; Global_u8Iterator < 4; Global_u8Iterator++)
    3310:	80 91 3b 03 	lds	r24, 0x033B
    3314:	8f 5f       	subi	r24, 0xFF	; 255
    3316:	80 93 3b 03 	sts	0x033B, r24
    331a:	80 91 3b 03 	lds	r24, 0x033B
    331e:	84 30       	cpi	r24, 0x04	; 4
    3320:	20 f3       	brcs	.-56     	; 0x32ea <SECURITY_vidWritePassword+0x18>
	{
		EEPROM_enuWriteByte(PASS_AD + Global_u8Iterator, SECURITY_u8ArrPassword[Global_u8Iterator]);
	}
}
    3322:	cf 91       	pop	r28
    3324:	df 91       	pop	r29
    3326:	08 95       	ret

00003328 <SECURITY_vidCheckEnterdPassword>:
u8 SECURITY_vidCheckEnterdPassword(void)
{
    3328:	1f 93       	push	r17
    332a:	df 93       	push	r29
    332c:	cf 93       	push	r28
    332e:	0f 92       	push	r0
    3330:	cd b7       	in	r28, 0x3d	; 61
    3332:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8WrongFlag = 0;
    3334:	19 82       	std	Y+1, r1	; 0x01
	for (Global_u8Iterator = 0; Global_u8Iterator < 4; Global_u8Iterator++)
    3336:	10 92 3b 03 	sts	0x033B, r1
    333a:	1a c0       	rjmp	.+52     	; 0x3370 <SECURITY_vidCheckEnterdPassword+0x48>
	{

		if (SECURITY_u8ArrPassword[Global_u8Iterator] != EEPROM_enuReadByte(PASS_AD + Global_u8Iterator))
    333c:	80 91 3b 03 	lds	r24, 0x033B
    3340:	88 2f       	mov	r24, r24
    3342:	90 e0       	ldi	r25, 0x00	; 0
    3344:	fc 01       	movw	r30, r24
    3346:	e4 5c       	subi	r30, 0xC4	; 196
    3348:	fc 4f       	sbci	r31, 0xFC	; 252
    334a:	10 81       	ld	r17, Z
    334c:	80 91 3b 03 	lds	r24, 0x033B
    3350:	88 2f       	mov	r24, r24
    3352:	90 e0       	ldi	r25, 0x00	; 0
    3354:	80 5e       	subi	r24, 0xE0	; 224
    3356:	9e 4f       	sbci	r25, 0xFE	; 254
    3358:	0e 94 05 09 	call	0x120a	; 0x120a <EEPROM_enuReadByte>
    335c:	18 17       	cp	r17, r24
    335e:	19 f0       	breq	.+6      	; 0x3366 <SECURITY_vidCheckEnterdPassword+0x3e>
		{
			Local_u8WrongFlag++;
    3360:	89 81       	ldd	r24, Y+1	; 0x01
    3362:	8f 5f       	subi	r24, 0xFF	; 255
    3364:	89 83       	std	Y+1, r24	; 0x01
	}
}
u8 SECURITY_vidCheckEnterdPassword(void)
{
	u8 Local_u8WrongFlag = 0;
	for (Global_u8Iterator = 0; Global_u8Iterator < 4; Global_u8Iterator++)
    3366:	80 91 3b 03 	lds	r24, 0x033B
    336a:	8f 5f       	subi	r24, 0xFF	; 255
    336c:	80 93 3b 03 	sts	0x033B, r24
    3370:	80 91 3b 03 	lds	r24, 0x033B
    3374:	84 30       	cpi	r24, 0x04	; 4
    3376:	10 f3       	brcs	.-60     	; 0x333c <SECURITY_vidCheckEnterdPassword+0x14>
		if (SECURITY_u8ArrPassword[Global_u8Iterator] != EEPROM_enuReadByte(PASS_AD + Global_u8Iterator))
		{
			Local_u8WrongFlag++;
		}
	}
	return Local_u8WrongFlag;
    3378:	89 81       	ldd	r24, Y+1	; 0x01
}
    337a:	0f 90       	pop	r0
    337c:	cf 91       	pop	r28
    337e:	df 91       	pop	r29
    3380:	1f 91       	pop	r17
    3382:	08 95       	ret

00003384 <SECURITY_u8CheckForViolation>:
u8 SECURITY_u8CheckForViolation(void)
{
    3384:	df 93       	push	r29
    3386:	cf 93       	push	r28
    3388:	cd b7       	in	r28, 0x3d	; 61
    338a:	de b7       	in	r29, 0x3e	; 62
	return EEPROM_enuReadByte(LockStatus_AD);
    338c:	85 e2       	ldi	r24, 0x25	; 37
    338e:	91 e0       	ldi	r25, 0x01	; 1
    3390:	0e 94 05 09 	call	0x120a	; 0x120a <EEPROM_enuReadByte>
}
    3394:	cf 91       	pop	r28
    3396:	df 91       	pop	r29
    3398:	08 95       	ret

0000339a <CallEmergancy>:
void CallEmergancy(void)
{
    339a:	df 93       	push	r29
    339c:	cf 93       	push	r28
    339e:	cd b7       	in	r28, 0x3d	; 61
    33a0:	de b7       	in	r29, 0x3e	; 62
	DIO_enuSetPinValue(DIO_u8_PORTC, DIO_u8_PIN0, DIO_u8_HIGH);
    33a2:	82 e0       	ldi	r24, 0x02	; 2
    33a4:	60 e0       	ldi	r22, 0x00	; 0
    33a6:	41 e0       	ldi	r20, 0x01	; 1
    33a8:	0e 94 51 09 	call	0x12a2	; 0x12a2 <DIO_enuSetPinValue>
}
    33ac:	cf 91       	pop	r28
    33ae:	df 91       	pop	r29
    33b0:	08 95       	ret

000033b2 <SECURITY_vidMarkViolated>:
void SECURITY_vidMarkViolated(void)
{
    33b2:	df 93       	push	r29
    33b4:	cf 93       	push	r28
    33b6:	cd b7       	in	r28, 0x3d	; 61
    33b8:	de b7       	in	r29, 0x3e	; 62
	EEPROM_enuWriteByte(LockStatus_AD, 0);
    33ba:	85 e2       	ldi	r24, 0x25	; 37
    33bc:	91 e0       	ldi	r25, 0x01	; 1
    33be:	60 e0       	ldi	r22, 0x00	; 0
    33c0:	0e 94 8f 08 	call	0x111e	; 0x111e <EEPROM_enuWriteByte>
}
    33c4:	cf 91       	pop	r28
    33c6:	df 91       	pop	r29
    33c8:	08 95       	ret

000033ca <APP_voidInit>:
#include "../../MCAL/EXT_INT/EXT_INT_int.h"
#include"MENU_int.h"
#include<util/delay.h>
void FireAlarm(void);
void APP_voidInit(void)
{
    33ca:	df 93       	push	r29
    33cc:	cf 93       	push	r28
    33ce:	cd b7       	in	r28, 0x3d	; 61
    33d0:	de b7       	in	r29, 0x3e	; 62
	DIO_vidInit();
    33d2:	0e 94 2b 09 	call	0x1256	; 0x1256 <DIO_vidInit>
	LCD_vidInit();
    33d6:	0e 94 15 0c 	call	0x182a	; 0x182a <LCD_vidInit>
	KEYPAD_vidInit();
    33da:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <KEYPAD_vidInit>
	SPI_vidInit(SPI_Master);
    33de:	81 e0       	ldi	r24, 0x01	; 1
    33e0:	0e 94 a3 05 	call	0xb46	; 0xb46 <SPI_vidInit>
	EXT_INT_vidEnable(EXT_INT1, EXT_INT_u8_FALLING_EDGE);
    33e4:	81 e0       	ldi	r24, 0x01	; 1
    33e6:	63 e0       	ldi	r22, 0x03	; 3
    33e8:	0e 94 6e 06 	call	0xcdc	; 0xcdc <EXT_INT_vidEnable>
	EXT_INT_vidRegisterCBF(EXT_INT1, FireAlarm);
    33ec:	2c e0       	ldi	r18, 0x0C	; 12
    33ee:	3d e2       	ldi	r19, 0x2D	; 45
    33f0:	81 e0       	ldi	r24, 0x01	; 1
    33f2:	b9 01       	movw	r22, r18
    33f4:	0e 94 c0 07 	call	0xf80	; 0xf80 <EXT_INT_vidRegisterCBF>
}
    33f8:	cf 91       	pop	r28
    33fa:	df 91       	pop	r29
    33fc:	08 95       	ret

000033fe <MENU_vidControlMenu>:
void MENU_vidControlMenu(void)
{
    33fe:	0f 93       	push	r16
    3400:	1f 93       	push	r17
    3402:	df 93       	push	r29
    3404:	cf 93       	push	r28
    3406:	cd b7       	in	r28, 0x3d	; 61
    3408:	de b7       	in	r29, 0x3e	; 62
    340a:	c3 52       	subi	r28, 0x23	; 35
    340c:	d1 40       	sbci	r29, 0x01	; 1
    340e:	0f b6       	in	r0, 0x3f	; 63
    3410:	f8 94       	cli
    3412:	de bf       	out	0x3e, r29	; 62
    3414:	0f be       	out	0x3f, r0	; 63
    3416:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Choice = 0;
    3418:	fe 01       	movw	r30, r28
    341a:	e3 5f       	subi	r30, 0xF3	; 243
    341c:	fe 4f       	sbci	r31, 0xFE	; 254
    341e:	10 82       	st	Z, r1
	u8 Local_u8RoomOffset;

	while (1)
	{

		LCD_Clear_Display();
    3420:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_Clear_Display>
		LCD_enuSendString("1: Doors Unit");
    3424:	88 e0       	ldi	r24, 0x08	; 8
    3426:	91 e0       	ldi	r25, 0x01	; 1
    3428:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
		LCD_enuChangePosition(1, 0);
    342c:	81 e0       	ldi	r24, 0x01	; 1
    342e:	60 e0       	ldi	r22, 0x00	; 0
    3430:	0e 94 1e 12 	call	0x243c	; 0x243c <LCD_enuChangePosition>
		LCD_enuSendString("2: Rooms Unit  v");
    3434:	86 e1       	ldi	r24, 0x16	; 22
    3436:	91 e0       	ldi	r25, 0x01	; 1
    3438:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
		Local_u8Choice = GetChioce();
    343c:	0e 94 28 2b 	call	0x5650	; 0x5650 <GetChioce>
    3440:	fe 01       	movw	r30, r28
    3442:	e3 5f       	subi	r30, 0xF3	; 243
    3444:	fe 4f       	sbci	r31, 0xFE	; 254
    3446:	80 83       	st	Z, r24
		switch (Local_u8Choice)
    3448:	fe 01       	movw	r30, r28
    344a:	e3 5f       	subi	r30, 0xF3	; 243
    344c:	fe 4f       	sbci	r31, 0xFE	; 254
    344e:	80 81       	ld	r24, Z
    3450:	28 2f       	mov	r18, r24
    3452:	30 e0       	ldi	r19, 0x00	; 0
    3454:	ce 5d       	subi	r28, 0xDE	; 222
    3456:	de 4f       	sbci	r29, 0xFE	; 254
    3458:	39 83       	std	Y+1, r19	; 0x01
    345a:	28 83       	st	Y, r18
    345c:	c2 52       	subi	r28, 0x22	; 34
    345e:	d1 40       	sbci	r29, 0x01	; 1
    3460:	ce 5d       	subi	r28, 0xDE	; 222
    3462:	de 4f       	sbci	r29, 0xFE	; 254
    3464:	88 81       	ld	r24, Y
    3466:	99 81       	ldd	r25, Y+1	; 0x01
    3468:	c2 52       	subi	r28, 0x22	; 34
    346a:	d1 40       	sbci	r29, 0x01	; 1
    346c:	81 33       	cpi	r24, 0x31	; 49
    346e:	91 05       	cpc	r25, r1
    3470:	b9 f0       	breq	.+46     	; 0x34a0 <MENU_vidControlMenu+0xa2>
    3472:	ce 5d       	subi	r28, 0xDE	; 222
    3474:	de 4f       	sbci	r29, 0xFE	; 254
    3476:	e8 81       	ld	r30, Y
    3478:	f9 81       	ldd	r31, Y+1	; 0x01
    347a:	c2 52       	subi	r28, 0x22	; 34
    347c:	d1 40       	sbci	r29, 0x01	; 1
    347e:	e2 33       	cpi	r30, 0x32	; 50
    3480:	f1 05       	cpc	r31, r1
    3482:	11 f4       	brne	.+4      	; 0x3488 <MENU_vidControlMenu+0x8a>
    3484:	0c 94 f0 22 	jmp	0x45e0	; 0x45e0 <MENU_vidControlMenu+0x11e2>
    3488:	ce 5d       	subi	r28, 0xDE	; 222
    348a:	de 4f       	sbci	r29, 0xFE	; 254
    348c:	28 81       	ld	r18, Y
    348e:	39 81       	ldd	r19, Y+1	; 0x01
    3490:	c2 52       	subi	r28, 0x22	; 34
    3492:	d1 40       	sbci	r29, 0x01	; 1
    3494:	2a 32       	cpi	r18, 0x2A	; 42
    3496:	31 05       	cpc	r19, r1
    3498:	11 f4       	brne	.+4      	; 0x349e <MENU_vidControlMenu+0xa0>
    349a:	0c 94 47 2a 	jmp	0x548e	; 0x548e <MENU_vidControlMenu+0x2090>
    349e:	c0 cf       	rjmp	.-128    	; 0x3420 <MENU_vidControlMenu+0x22>
		{
		case '1':
			do
			{
				LCD_Clear_Display();
    34a0:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_Clear_Display>
				LCD_enuSendString("1: Open Door");
    34a4:	87 e2       	ldi	r24, 0x27	; 39
    34a6:	91 e0       	ldi	r25, 0x01	; 1
    34a8:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
				LCD_enuChangePosition(1, 0);
    34ac:	81 e0       	ldi	r24, 0x01	; 1
    34ae:	60 e0       	ldi	r22, 0x00	; 0
    34b0:	0e 94 1e 12 	call	0x243c	; 0x243c <LCD_enuChangePosition>
				LCD_enuSendString("2: Close Door");
    34b4:	84 e3       	ldi	r24, 0x34	; 52
    34b6:	91 e0       	ldi	r25, 0x01	; 1
    34b8:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
				Local_u8Choice = GetChioce();
    34bc:	0e 94 28 2b 	call	0x5650	; 0x5650 <GetChioce>
    34c0:	fe 01       	movw	r30, r28
    34c2:	e3 5f       	subi	r30, 0xF3	; 243
    34c4:	fe 4f       	sbci	r31, 0xFE	; 254
    34c6:	80 83       	st	Z, r24
				switch (Local_u8Choice)
    34c8:	fe 01       	movw	r30, r28
    34ca:	e3 5f       	subi	r30, 0xF3	; 243
    34cc:	fe 4f       	sbci	r31, 0xFE	; 254
    34ce:	80 81       	ld	r24, Z
    34d0:	e8 2f       	mov	r30, r24
    34d2:	f0 e0       	ldi	r31, 0x00	; 0
    34d4:	c0 5e       	subi	r28, 0xE0	; 224
    34d6:	de 4f       	sbci	r29, 0xFE	; 254
    34d8:	f9 83       	std	Y+1, r31	; 0x01
    34da:	e8 83       	st	Y, r30
    34dc:	c0 52       	subi	r28, 0x20	; 32
    34de:	d1 40       	sbci	r29, 0x01	; 1
    34e0:	c0 5e       	subi	r28, 0xE0	; 224
    34e2:	de 4f       	sbci	r29, 0xFE	; 254
    34e4:	28 81       	ld	r18, Y
    34e6:	39 81       	ldd	r19, Y+1	; 0x01
    34e8:	c0 52       	subi	r28, 0x20	; 32
    34ea:	d1 40       	sbci	r29, 0x01	; 1
    34ec:	21 33       	cpi	r18, 0x31	; 49
    34ee:	31 05       	cpc	r19, r1
    34f0:	61 f0       	breq	.+24     	; 0x350a <MENU_vidControlMenu+0x10c>
    34f2:	c0 5e       	subi	r28, 0xE0	; 224
    34f4:	de 4f       	sbci	r29, 0xFE	; 254
    34f6:	88 81       	ld	r24, Y
    34f8:	99 81       	ldd	r25, Y+1	; 0x01
    34fa:	c0 52       	subi	r28, 0x20	; 32
    34fc:	d1 40       	sbci	r29, 0x01	; 1
    34fe:	82 33       	cpi	r24, 0x32	; 50
    3500:	91 05       	cpc	r25, r1
    3502:	09 f4       	brne	.+2      	; 0x3506 <MENU_vidControlMenu+0x108>
    3504:	2e c4       	rjmp	.+2140   	; 0x3d62 <MENU_vidControlMenu+0x964>
    3506:	0c 94 dc 22 	jmp	0x45b8	; 0x45b8 <MENU_vidControlMenu+0x11ba>
				{
				case '1':
					do
					{
						LCD_Clear_Display();
    350a:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_Clear_Display>
						LCD_enuSendString("1:Room1 2:Room2");
    350e:	82 e4       	ldi	r24, 0x42	; 66
    3510:	91 e0       	ldi	r25, 0x01	; 1
    3512:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
						LCD_enuChangePosition(1, 0);
    3516:	81 e0       	ldi	r24, 0x01	; 1
    3518:	60 e0       	ldi	r22, 0x00	; 0
    351a:	0e 94 1e 12 	call	0x243c	; 0x243c <LCD_enuChangePosition>
						LCD_enuSendString("3:Room3 4:Main");
    351e:	82 e5       	ldi	r24, 0x52	; 82
    3520:	91 e0       	ldi	r25, 0x01	; 1
    3522:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
						Local_u8Choice = GetChioce();
    3526:	0e 94 28 2b 	call	0x5650	; 0x5650 <GetChioce>
    352a:	fe 01       	movw	r30, r28
    352c:	e3 5f       	subi	r30, 0xF3	; 243
    352e:	fe 4f       	sbci	r31, 0xFE	; 254
    3530:	80 83       	st	Z, r24
						switch (Local_u8Choice)
    3532:	fe 01       	movw	r30, r28
    3534:	e3 5f       	subi	r30, 0xF3	; 243
    3536:	fe 4f       	sbci	r31, 0xFE	; 254
    3538:	80 81       	ld	r24, Z
    353a:	e8 2f       	mov	r30, r24
    353c:	f0 e0       	ldi	r31, 0x00	; 0
    353e:	c2 5e       	subi	r28, 0xE2	; 226
    3540:	de 4f       	sbci	r29, 0xFE	; 254
    3542:	f9 83       	std	Y+1, r31	; 0x01
    3544:	e8 83       	st	Y, r30
    3546:	ce 51       	subi	r28, 0x1E	; 30
    3548:	d1 40       	sbci	r29, 0x01	; 1
    354a:	c2 5e       	subi	r28, 0xE2	; 226
    354c:	de 4f       	sbci	r29, 0xFE	; 254
    354e:	28 81       	ld	r18, Y
    3550:	39 81       	ldd	r19, Y+1	; 0x01
    3552:	ce 51       	subi	r28, 0x1E	; 30
    3554:	d1 40       	sbci	r29, 0x01	; 1
    3556:	22 33       	cpi	r18, 0x32	; 50
    3558:	31 05       	cpc	r19, r1
    355a:	09 f4       	brne	.+2      	; 0x355e <MENU_vidControlMenu+0x160>
    355c:	ec c0       	rjmp	.+472    	; 0x3736 <MENU_vidControlMenu+0x338>
    355e:	c2 5e       	subi	r28, 0xE2	; 226
    3560:	de 4f       	sbci	r29, 0xFE	; 254
    3562:	88 81       	ld	r24, Y
    3564:	99 81       	ldd	r25, Y+1	; 0x01
    3566:	ce 51       	subi	r28, 0x1E	; 30
    3568:	d1 40       	sbci	r29, 0x01	; 1
    356a:	83 33       	cpi	r24, 0x33	; 51
    356c:	91 05       	cpc	r25, r1
    356e:	54 f4       	brge	.+20     	; 0x3584 <MENU_vidControlMenu+0x186>
    3570:	c2 5e       	subi	r28, 0xE2	; 226
    3572:	de 4f       	sbci	r29, 0xFE	; 254
    3574:	e8 81       	ld	r30, Y
    3576:	f9 81       	ldd	r31, Y+1	; 0x01
    3578:	ce 51       	subi	r28, 0x1E	; 30
    357a:	d1 40       	sbci	r29, 0x01	; 1
    357c:	e1 33       	cpi	r30, 0x31	; 49
    357e:	f1 05       	cpc	r31, r1
    3580:	b1 f0       	breq	.+44     	; 0x35ae <MENU_vidControlMenu+0x1b0>
    3582:	dd c3       	rjmp	.+1978   	; 0x3d3e <MENU_vidControlMenu+0x940>
    3584:	c2 5e       	subi	r28, 0xE2	; 226
    3586:	de 4f       	sbci	r29, 0xFE	; 254
    3588:	28 81       	ld	r18, Y
    358a:	39 81       	ldd	r19, Y+1	; 0x01
    358c:	ce 51       	subi	r28, 0x1E	; 30
    358e:	d1 40       	sbci	r29, 0x01	; 1
    3590:	23 33       	cpi	r18, 0x33	; 51
    3592:	31 05       	cpc	r19, r1
    3594:	09 f4       	brne	.+2      	; 0x3598 <MENU_vidControlMenu+0x19a>
    3596:	93 c1       	rjmp	.+806    	; 0x38be <MENU_vidControlMenu+0x4c0>
    3598:	c2 5e       	subi	r28, 0xE2	; 226
    359a:	de 4f       	sbci	r29, 0xFE	; 254
    359c:	88 81       	ld	r24, Y
    359e:	99 81       	ldd	r25, Y+1	; 0x01
    35a0:	ce 51       	subi	r28, 0x1E	; 30
    35a2:	d1 40       	sbci	r29, 0x01	; 1
    35a4:	84 33       	cpi	r24, 0x34	; 52
    35a6:	91 05       	cpc	r25, r1
    35a8:	09 f4       	brne	.+2      	; 0x35ac <MENU_vidControlMenu+0x1ae>
    35aa:	4d c2       	rjmp	.+1178   	; 0x3a46 <MENU_vidControlMenu+0x648>
    35ac:	c8 c3       	rjmp	.+1936   	; 0x3d3e <MENU_vidControlMenu+0x940>
						{
						case '1':
							MENU_vidSendInstruction(40, 0);
    35ae:	88 e2       	ldi	r24, 0x28	; 40
    35b0:	60 e0       	ldi	r22, 0x00	; 0
    35b2:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <MENU_vidSendInstruction>
							LCD_Clear_Display();
    35b6:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_Clear_Display>
							LCD_enuSendString("Room 1 Opened");
    35ba:	81 e6       	ldi	r24, 0x61	; 97
    35bc:	91 e0       	ldi	r25, 0x01	; 1
    35be:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
    35c2:	fe 01       	movw	r30, r28
    35c4:	e9 5f       	subi	r30, 0xF9	; 249
    35c6:	fe 4f       	sbci	r31, 0xFE	; 254
    35c8:	80 e0       	ldi	r24, 0x00	; 0
    35ca:	90 e0       	ldi	r25, 0x00	; 0
    35cc:	aa ef       	ldi	r26, 0xFA	; 250
    35ce:	b3 e4       	ldi	r27, 0x43	; 67
    35d0:	80 83       	st	Z, r24
    35d2:	91 83       	std	Z+1, r25	; 0x01
    35d4:	a2 83       	std	Z+2, r26	; 0x02
    35d6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35d8:	8e 01       	movw	r16, r28
    35da:	0d 5f       	subi	r16, 0xFD	; 253
    35dc:	1e 4f       	sbci	r17, 0xFE	; 254
    35de:	fe 01       	movw	r30, r28
    35e0:	e9 5f       	subi	r30, 0xF9	; 249
    35e2:	fe 4f       	sbci	r31, 0xFE	; 254
    35e4:	60 81       	ld	r22, Z
    35e6:	71 81       	ldd	r23, Z+1	; 0x01
    35e8:	82 81       	ldd	r24, Z+2	; 0x02
    35ea:	93 81       	ldd	r25, Z+3	; 0x03
    35ec:	20 e0       	ldi	r18, 0x00	; 0
    35ee:	30 e0       	ldi	r19, 0x00	; 0
    35f0:	4a e7       	ldi	r20, 0x7A	; 122
    35f2:	55 e4       	ldi	r21, 0x45	; 69
    35f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35f8:	dc 01       	movw	r26, r24
    35fa:	cb 01       	movw	r24, r22
    35fc:	f8 01       	movw	r30, r16
    35fe:	80 83       	st	Z, r24
    3600:	91 83       	std	Z+1, r25	; 0x01
    3602:	a2 83       	std	Z+2, r26	; 0x02
    3604:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3606:	fe 01       	movw	r30, r28
    3608:	ed 5f       	subi	r30, 0xFD	; 253
    360a:	fe 4f       	sbci	r31, 0xFE	; 254
    360c:	60 81       	ld	r22, Z
    360e:	71 81       	ldd	r23, Z+1	; 0x01
    3610:	82 81       	ldd	r24, Z+2	; 0x02
    3612:	93 81       	ldd	r25, Z+3	; 0x03
    3614:	20 e0       	ldi	r18, 0x00	; 0
    3616:	30 e0       	ldi	r19, 0x00	; 0
    3618:	40 e8       	ldi	r20, 0x80	; 128
    361a:	5f e3       	ldi	r21, 0x3F	; 63
    361c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3620:	88 23       	and	r24, r24
    3622:	44 f4       	brge	.+16     	; 0x3634 <MENU_vidControlMenu+0x236>
		__ticks = 1;
    3624:	fe 01       	movw	r30, r28
    3626:	ef 5f       	subi	r30, 0xFF	; 255
    3628:	fe 4f       	sbci	r31, 0xFE	; 254
    362a:	81 e0       	ldi	r24, 0x01	; 1
    362c:	90 e0       	ldi	r25, 0x00	; 0
    362e:	91 83       	std	Z+1, r25	; 0x01
    3630:	80 83       	st	Z, r24
    3632:	64 c0       	rjmp	.+200    	; 0x36fc <MENU_vidControlMenu+0x2fe>
	else if (__tmp > 65535)
    3634:	fe 01       	movw	r30, r28
    3636:	ed 5f       	subi	r30, 0xFD	; 253
    3638:	fe 4f       	sbci	r31, 0xFE	; 254
    363a:	60 81       	ld	r22, Z
    363c:	71 81       	ldd	r23, Z+1	; 0x01
    363e:	82 81       	ldd	r24, Z+2	; 0x02
    3640:	93 81       	ldd	r25, Z+3	; 0x03
    3642:	20 e0       	ldi	r18, 0x00	; 0
    3644:	3f ef       	ldi	r19, 0xFF	; 255
    3646:	4f e7       	ldi	r20, 0x7F	; 127
    3648:	57 e4       	ldi	r21, 0x47	; 71
    364a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    364e:	18 16       	cp	r1, r24
    3650:	0c f0       	brlt	.+2      	; 0x3654 <MENU_vidControlMenu+0x256>
    3652:	43 c0       	rjmp	.+134    	; 0x36da <MENU_vidControlMenu+0x2dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3654:	fe 01       	movw	r30, r28
    3656:	e9 5f       	subi	r30, 0xF9	; 249
    3658:	fe 4f       	sbci	r31, 0xFE	; 254
    365a:	60 81       	ld	r22, Z
    365c:	71 81       	ldd	r23, Z+1	; 0x01
    365e:	82 81       	ldd	r24, Z+2	; 0x02
    3660:	93 81       	ldd	r25, Z+3	; 0x03
    3662:	20 e0       	ldi	r18, 0x00	; 0
    3664:	30 e0       	ldi	r19, 0x00	; 0
    3666:	40 e2       	ldi	r20, 0x20	; 32
    3668:	51 e4       	ldi	r21, 0x41	; 65
    366a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    366e:	dc 01       	movw	r26, r24
    3670:	cb 01       	movw	r24, r22
    3672:	8e 01       	movw	r16, r28
    3674:	0f 5f       	subi	r16, 0xFF	; 255
    3676:	1e 4f       	sbci	r17, 0xFE	; 254
    3678:	bc 01       	movw	r22, r24
    367a:	cd 01       	movw	r24, r26
    367c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3680:	dc 01       	movw	r26, r24
    3682:	cb 01       	movw	r24, r22
    3684:	f8 01       	movw	r30, r16
    3686:	91 83       	std	Z+1, r25	; 0x01
    3688:	80 83       	st	Z, r24
    368a:	1f c0       	rjmp	.+62     	; 0x36ca <MENU_vidControlMenu+0x2cc>
    368c:	fe 01       	movw	r30, r28
    368e:	e1 50       	subi	r30, 0x01	; 1
    3690:	ff 4f       	sbci	r31, 0xFF	; 255
    3692:	80 e9       	ldi	r24, 0x90	; 144
    3694:	91 e0       	ldi	r25, 0x01	; 1
    3696:	91 83       	std	Z+1, r25	; 0x01
    3698:	80 83       	st	Z, r24
    369a:	fe 01       	movw	r30, r28
    369c:	e1 50       	subi	r30, 0x01	; 1
    369e:	ff 4f       	sbci	r31, 0xFF	; 255
    36a0:	80 81       	ld	r24, Z
    36a2:	91 81       	ldd	r25, Z+1	; 0x01
    36a4:	01 97       	sbiw	r24, 0x01	; 1
    36a6:	f1 f7       	brne	.-4      	; 0x36a4 <MENU_vidControlMenu+0x2a6>
    36a8:	fe 01       	movw	r30, r28
    36aa:	e1 50       	subi	r30, 0x01	; 1
    36ac:	ff 4f       	sbci	r31, 0xFF	; 255
    36ae:	91 83       	std	Z+1, r25	; 0x01
    36b0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36b2:	de 01       	movw	r26, r28
    36b4:	af 5f       	subi	r26, 0xFF	; 255
    36b6:	be 4f       	sbci	r27, 0xFE	; 254
    36b8:	fe 01       	movw	r30, r28
    36ba:	ef 5f       	subi	r30, 0xFF	; 255
    36bc:	fe 4f       	sbci	r31, 0xFE	; 254
    36be:	80 81       	ld	r24, Z
    36c0:	91 81       	ldd	r25, Z+1	; 0x01
    36c2:	01 97       	sbiw	r24, 0x01	; 1
    36c4:	11 96       	adiw	r26, 0x01	; 1
    36c6:	9c 93       	st	X, r25
    36c8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36ca:	fe 01       	movw	r30, r28
    36cc:	ef 5f       	subi	r30, 0xFF	; 255
    36ce:	fe 4f       	sbci	r31, 0xFE	; 254
    36d0:	80 81       	ld	r24, Z
    36d2:	91 81       	ldd	r25, Z+1	; 0x01
    36d4:	00 97       	sbiw	r24, 0x00	; 0
    36d6:	d1 f6       	brne	.-76     	; 0x368c <MENU_vidControlMenu+0x28e>
    36d8:	28 c0       	rjmp	.+80     	; 0x372a <MENU_vidControlMenu+0x32c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36da:	8e 01       	movw	r16, r28
    36dc:	0f 5f       	subi	r16, 0xFF	; 255
    36de:	1e 4f       	sbci	r17, 0xFE	; 254
    36e0:	fe 01       	movw	r30, r28
    36e2:	ed 5f       	subi	r30, 0xFD	; 253
    36e4:	fe 4f       	sbci	r31, 0xFE	; 254
    36e6:	60 81       	ld	r22, Z
    36e8:	71 81       	ldd	r23, Z+1	; 0x01
    36ea:	82 81       	ldd	r24, Z+2	; 0x02
    36ec:	93 81       	ldd	r25, Z+3	; 0x03
    36ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36f2:	dc 01       	movw	r26, r24
    36f4:	cb 01       	movw	r24, r22
    36f6:	f8 01       	movw	r30, r16
    36f8:	91 83       	std	Z+1, r25	; 0x01
    36fa:	80 83       	st	Z, r24
    36fc:	de 01       	movw	r26, r28
    36fe:	a3 50       	subi	r26, 0x03	; 3
    3700:	bf 4f       	sbci	r27, 0xFF	; 255
    3702:	fe 01       	movw	r30, r28
    3704:	ef 5f       	subi	r30, 0xFF	; 255
    3706:	fe 4f       	sbci	r31, 0xFE	; 254
    3708:	80 81       	ld	r24, Z
    370a:	91 81       	ldd	r25, Z+1	; 0x01
    370c:	11 96       	adiw	r26, 0x01	; 1
    370e:	9c 93       	st	X, r25
    3710:	8e 93       	st	-X, r24
    3712:	fe 01       	movw	r30, r28
    3714:	e3 50       	subi	r30, 0x03	; 3
    3716:	ff 4f       	sbci	r31, 0xFF	; 255
    3718:	80 81       	ld	r24, Z
    371a:	91 81       	ldd	r25, Z+1	; 0x01
    371c:	01 97       	sbiw	r24, 0x01	; 1
    371e:	f1 f7       	brne	.-4      	; 0x371c <MENU_vidControlMenu+0x31e>
    3720:	fe 01       	movw	r30, r28
    3722:	e3 50       	subi	r30, 0x03	; 3
    3724:	ff 4f       	sbci	r31, 0xFF	; 255
    3726:	91 83       	std	Z+1, r25	; 0x01
    3728:	80 83       	st	Z, r24
							_delay_ms(500);
							Local_u8Choice = '-';
    372a:	fe 01       	movw	r30, r28
    372c:	e3 5f       	subi	r30, 0xF3	; 243
    372e:	fe 4f       	sbci	r31, 0xFE	; 254
    3730:	8d e2       	ldi	r24, 0x2D	; 45
    3732:	80 83       	st	Z, r24
    3734:	04 c3       	rjmp	.+1544   	; 0x3d3e <MENU_vidControlMenu+0x940>
							break;
						case '2':
							MENU_vidSendInstruction(1, 0);
    3736:	81 e0       	ldi	r24, 0x01	; 1
    3738:	60 e0       	ldi	r22, 0x00	; 0
    373a:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <MENU_vidSendInstruction>

							LCD_Clear_Display();
    373e:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_Clear_Display>
							LCD_enuSendString("Room 2 Opened");
    3742:	8f e6       	ldi	r24, 0x6F	; 111
    3744:	91 e0       	ldi	r25, 0x01	; 1
    3746:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
    374a:	fe 01       	movw	r30, r28
    374c:	e7 50       	subi	r30, 0x07	; 7
    374e:	ff 4f       	sbci	r31, 0xFF	; 255
    3750:	80 e0       	ldi	r24, 0x00	; 0
    3752:	90 e0       	ldi	r25, 0x00	; 0
    3754:	aa ef       	ldi	r26, 0xFA	; 250
    3756:	b3 e4       	ldi	r27, 0x43	; 67
    3758:	80 83       	st	Z, r24
    375a:	91 83       	std	Z+1, r25	; 0x01
    375c:	a2 83       	std	Z+2, r26	; 0x02
    375e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3760:	8e 01       	movw	r16, r28
    3762:	0b 50       	subi	r16, 0x0B	; 11
    3764:	1f 4f       	sbci	r17, 0xFF	; 255
    3766:	fe 01       	movw	r30, r28
    3768:	e7 50       	subi	r30, 0x07	; 7
    376a:	ff 4f       	sbci	r31, 0xFF	; 255
    376c:	60 81       	ld	r22, Z
    376e:	71 81       	ldd	r23, Z+1	; 0x01
    3770:	82 81       	ldd	r24, Z+2	; 0x02
    3772:	93 81       	ldd	r25, Z+3	; 0x03
    3774:	20 e0       	ldi	r18, 0x00	; 0
    3776:	30 e0       	ldi	r19, 0x00	; 0
    3778:	4a e7       	ldi	r20, 0x7A	; 122
    377a:	55 e4       	ldi	r21, 0x45	; 69
    377c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3780:	dc 01       	movw	r26, r24
    3782:	cb 01       	movw	r24, r22
    3784:	f8 01       	movw	r30, r16
    3786:	80 83       	st	Z, r24
    3788:	91 83       	std	Z+1, r25	; 0x01
    378a:	a2 83       	std	Z+2, r26	; 0x02
    378c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    378e:	fe 01       	movw	r30, r28
    3790:	eb 50       	subi	r30, 0x0B	; 11
    3792:	ff 4f       	sbci	r31, 0xFF	; 255
    3794:	60 81       	ld	r22, Z
    3796:	71 81       	ldd	r23, Z+1	; 0x01
    3798:	82 81       	ldd	r24, Z+2	; 0x02
    379a:	93 81       	ldd	r25, Z+3	; 0x03
    379c:	20 e0       	ldi	r18, 0x00	; 0
    379e:	30 e0       	ldi	r19, 0x00	; 0
    37a0:	40 e8       	ldi	r20, 0x80	; 128
    37a2:	5f e3       	ldi	r21, 0x3F	; 63
    37a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37a8:	88 23       	and	r24, r24
    37aa:	44 f4       	brge	.+16     	; 0x37bc <MENU_vidControlMenu+0x3be>
		__ticks = 1;
    37ac:	fe 01       	movw	r30, r28
    37ae:	ed 50       	subi	r30, 0x0D	; 13
    37b0:	ff 4f       	sbci	r31, 0xFF	; 255
    37b2:	81 e0       	ldi	r24, 0x01	; 1
    37b4:	90 e0       	ldi	r25, 0x00	; 0
    37b6:	91 83       	std	Z+1, r25	; 0x01
    37b8:	80 83       	st	Z, r24
    37ba:	64 c0       	rjmp	.+200    	; 0x3884 <MENU_vidControlMenu+0x486>
	else if (__tmp > 65535)
    37bc:	fe 01       	movw	r30, r28
    37be:	eb 50       	subi	r30, 0x0B	; 11
    37c0:	ff 4f       	sbci	r31, 0xFF	; 255
    37c2:	60 81       	ld	r22, Z
    37c4:	71 81       	ldd	r23, Z+1	; 0x01
    37c6:	82 81       	ldd	r24, Z+2	; 0x02
    37c8:	93 81       	ldd	r25, Z+3	; 0x03
    37ca:	20 e0       	ldi	r18, 0x00	; 0
    37cc:	3f ef       	ldi	r19, 0xFF	; 255
    37ce:	4f e7       	ldi	r20, 0x7F	; 127
    37d0:	57 e4       	ldi	r21, 0x47	; 71
    37d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    37d6:	18 16       	cp	r1, r24
    37d8:	0c f0       	brlt	.+2      	; 0x37dc <MENU_vidControlMenu+0x3de>
    37da:	43 c0       	rjmp	.+134    	; 0x3862 <MENU_vidControlMenu+0x464>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37dc:	fe 01       	movw	r30, r28
    37de:	e7 50       	subi	r30, 0x07	; 7
    37e0:	ff 4f       	sbci	r31, 0xFF	; 255
    37e2:	60 81       	ld	r22, Z
    37e4:	71 81       	ldd	r23, Z+1	; 0x01
    37e6:	82 81       	ldd	r24, Z+2	; 0x02
    37e8:	93 81       	ldd	r25, Z+3	; 0x03
    37ea:	20 e0       	ldi	r18, 0x00	; 0
    37ec:	30 e0       	ldi	r19, 0x00	; 0
    37ee:	40 e2       	ldi	r20, 0x20	; 32
    37f0:	51 e4       	ldi	r21, 0x41	; 65
    37f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37f6:	dc 01       	movw	r26, r24
    37f8:	cb 01       	movw	r24, r22
    37fa:	8e 01       	movw	r16, r28
    37fc:	0d 50       	subi	r16, 0x0D	; 13
    37fe:	1f 4f       	sbci	r17, 0xFF	; 255
    3800:	bc 01       	movw	r22, r24
    3802:	cd 01       	movw	r24, r26
    3804:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3808:	dc 01       	movw	r26, r24
    380a:	cb 01       	movw	r24, r22
    380c:	f8 01       	movw	r30, r16
    380e:	91 83       	std	Z+1, r25	; 0x01
    3810:	80 83       	st	Z, r24
    3812:	1f c0       	rjmp	.+62     	; 0x3852 <MENU_vidControlMenu+0x454>
    3814:	fe 01       	movw	r30, r28
    3816:	ef 50       	subi	r30, 0x0F	; 15
    3818:	ff 4f       	sbci	r31, 0xFF	; 255
    381a:	80 e9       	ldi	r24, 0x90	; 144
    381c:	91 e0       	ldi	r25, 0x01	; 1
    381e:	91 83       	std	Z+1, r25	; 0x01
    3820:	80 83       	st	Z, r24
    3822:	fe 01       	movw	r30, r28
    3824:	ef 50       	subi	r30, 0x0F	; 15
    3826:	ff 4f       	sbci	r31, 0xFF	; 255
    3828:	80 81       	ld	r24, Z
    382a:	91 81       	ldd	r25, Z+1	; 0x01
    382c:	01 97       	sbiw	r24, 0x01	; 1
    382e:	f1 f7       	brne	.-4      	; 0x382c <MENU_vidControlMenu+0x42e>
    3830:	fe 01       	movw	r30, r28
    3832:	ef 50       	subi	r30, 0x0F	; 15
    3834:	ff 4f       	sbci	r31, 0xFF	; 255
    3836:	91 83       	std	Z+1, r25	; 0x01
    3838:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    383a:	de 01       	movw	r26, r28
    383c:	ad 50       	subi	r26, 0x0D	; 13
    383e:	bf 4f       	sbci	r27, 0xFF	; 255
    3840:	fe 01       	movw	r30, r28
    3842:	ed 50       	subi	r30, 0x0D	; 13
    3844:	ff 4f       	sbci	r31, 0xFF	; 255
    3846:	80 81       	ld	r24, Z
    3848:	91 81       	ldd	r25, Z+1	; 0x01
    384a:	01 97       	sbiw	r24, 0x01	; 1
    384c:	11 96       	adiw	r26, 0x01	; 1
    384e:	9c 93       	st	X, r25
    3850:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3852:	fe 01       	movw	r30, r28
    3854:	ed 50       	subi	r30, 0x0D	; 13
    3856:	ff 4f       	sbci	r31, 0xFF	; 255
    3858:	80 81       	ld	r24, Z
    385a:	91 81       	ldd	r25, Z+1	; 0x01
    385c:	00 97       	sbiw	r24, 0x00	; 0
    385e:	d1 f6       	brne	.-76     	; 0x3814 <MENU_vidControlMenu+0x416>
    3860:	28 c0       	rjmp	.+80     	; 0x38b2 <MENU_vidControlMenu+0x4b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3862:	8e 01       	movw	r16, r28
    3864:	0d 50       	subi	r16, 0x0D	; 13
    3866:	1f 4f       	sbci	r17, 0xFF	; 255
    3868:	fe 01       	movw	r30, r28
    386a:	eb 50       	subi	r30, 0x0B	; 11
    386c:	ff 4f       	sbci	r31, 0xFF	; 255
    386e:	60 81       	ld	r22, Z
    3870:	71 81       	ldd	r23, Z+1	; 0x01
    3872:	82 81       	ldd	r24, Z+2	; 0x02
    3874:	93 81       	ldd	r25, Z+3	; 0x03
    3876:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    387a:	dc 01       	movw	r26, r24
    387c:	cb 01       	movw	r24, r22
    387e:	f8 01       	movw	r30, r16
    3880:	91 83       	std	Z+1, r25	; 0x01
    3882:	80 83       	st	Z, r24
    3884:	de 01       	movw	r26, r28
    3886:	a1 51       	subi	r26, 0x11	; 17
    3888:	bf 4f       	sbci	r27, 0xFF	; 255
    388a:	fe 01       	movw	r30, r28
    388c:	ed 50       	subi	r30, 0x0D	; 13
    388e:	ff 4f       	sbci	r31, 0xFF	; 255
    3890:	80 81       	ld	r24, Z
    3892:	91 81       	ldd	r25, Z+1	; 0x01
    3894:	11 96       	adiw	r26, 0x01	; 1
    3896:	9c 93       	st	X, r25
    3898:	8e 93       	st	-X, r24
    389a:	fe 01       	movw	r30, r28
    389c:	e1 51       	subi	r30, 0x11	; 17
    389e:	ff 4f       	sbci	r31, 0xFF	; 255
    38a0:	80 81       	ld	r24, Z
    38a2:	91 81       	ldd	r25, Z+1	; 0x01
    38a4:	01 97       	sbiw	r24, 0x01	; 1
    38a6:	f1 f7       	brne	.-4      	; 0x38a4 <MENU_vidControlMenu+0x4a6>
    38a8:	fe 01       	movw	r30, r28
    38aa:	e1 51       	subi	r30, 0x11	; 17
    38ac:	ff 4f       	sbci	r31, 0xFF	; 255
    38ae:	91 83       	std	Z+1, r25	; 0x01
    38b0:	80 83       	st	Z, r24
							_delay_ms(500);
							Local_u8Choice = '-';
    38b2:	fe 01       	movw	r30, r28
    38b4:	e3 5f       	subi	r30, 0xF3	; 243
    38b6:	fe 4f       	sbci	r31, 0xFE	; 254
    38b8:	8d e2       	ldi	r24, 0x2D	; 45
    38ba:	80 83       	st	Z, r24
    38bc:	40 c2       	rjmp	.+1152   	; 0x3d3e <MENU_vidControlMenu+0x940>
							break;
						case '3':
							MENU_vidSendInstruction(2, 0);
    38be:	82 e0       	ldi	r24, 0x02	; 2
    38c0:	60 e0       	ldi	r22, 0x00	; 0
    38c2:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <MENU_vidSendInstruction>

							LCD_Clear_Display();
    38c6:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_Clear_Display>
							LCD_enuSendString("Room 3 Opened");
    38ca:	8d e7       	ldi	r24, 0x7D	; 125
    38cc:	91 e0       	ldi	r25, 0x01	; 1
    38ce:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
    38d2:	fe 01       	movw	r30, r28
    38d4:	e5 51       	subi	r30, 0x15	; 21
    38d6:	ff 4f       	sbci	r31, 0xFF	; 255
    38d8:	80 e0       	ldi	r24, 0x00	; 0
    38da:	90 e0       	ldi	r25, 0x00	; 0
    38dc:	aa ef       	ldi	r26, 0xFA	; 250
    38de:	b3 e4       	ldi	r27, 0x43	; 67
    38e0:	80 83       	st	Z, r24
    38e2:	91 83       	std	Z+1, r25	; 0x01
    38e4:	a2 83       	std	Z+2, r26	; 0x02
    38e6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38e8:	8e 01       	movw	r16, r28
    38ea:	09 51       	subi	r16, 0x19	; 25
    38ec:	1f 4f       	sbci	r17, 0xFF	; 255
    38ee:	fe 01       	movw	r30, r28
    38f0:	e5 51       	subi	r30, 0x15	; 21
    38f2:	ff 4f       	sbci	r31, 0xFF	; 255
    38f4:	60 81       	ld	r22, Z
    38f6:	71 81       	ldd	r23, Z+1	; 0x01
    38f8:	82 81       	ldd	r24, Z+2	; 0x02
    38fa:	93 81       	ldd	r25, Z+3	; 0x03
    38fc:	20 e0       	ldi	r18, 0x00	; 0
    38fe:	30 e0       	ldi	r19, 0x00	; 0
    3900:	4a e7       	ldi	r20, 0x7A	; 122
    3902:	55 e4       	ldi	r21, 0x45	; 69
    3904:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3908:	dc 01       	movw	r26, r24
    390a:	cb 01       	movw	r24, r22
    390c:	f8 01       	movw	r30, r16
    390e:	80 83       	st	Z, r24
    3910:	91 83       	std	Z+1, r25	; 0x01
    3912:	a2 83       	std	Z+2, r26	; 0x02
    3914:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3916:	fe 01       	movw	r30, r28
    3918:	e9 51       	subi	r30, 0x19	; 25
    391a:	ff 4f       	sbci	r31, 0xFF	; 255
    391c:	60 81       	ld	r22, Z
    391e:	71 81       	ldd	r23, Z+1	; 0x01
    3920:	82 81       	ldd	r24, Z+2	; 0x02
    3922:	93 81       	ldd	r25, Z+3	; 0x03
    3924:	20 e0       	ldi	r18, 0x00	; 0
    3926:	30 e0       	ldi	r19, 0x00	; 0
    3928:	40 e8       	ldi	r20, 0x80	; 128
    392a:	5f e3       	ldi	r21, 0x3F	; 63
    392c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3930:	88 23       	and	r24, r24
    3932:	44 f4       	brge	.+16     	; 0x3944 <MENU_vidControlMenu+0x546>
		__ticks = 1;
    3934:	fe 01       	movw	r30, r28
    3936:	eb 51       	subi	r30, 0x1B	; 27
    3938:	ff 4f       	sbci	r31, 0xFF	; 255
    393a:	81 e0       	ldi	r24, 0x01	; 1
    393c:	90 e0       	ldi	r25, 0x00	; 0
    393e:	91 83       	std	Z+1, r25	; 0x01
    3940:	80 83       	st	Z, r24
    3942:	64 c0       	rjmp	.+200    	; 0x3a0c <MENU_vidControlMenu+0x60e>
	else if (__tmp > 65535)
    3944:	fe 01       	movw	r30, r28
    3946:	e9 51       	subi	r30, 0x19	; 25
    3948:	ff 4f       	sbci	r31, 0xFF	; 255
    394a:	60 81       	ld	r22, Z
    394c:	71 81       	ldd	r23, Z+1	; 0x01
    394e:	82 81       	ldd	r24, Z+2	; 0x02
    3950:	93 81       	ldd	r25, Z+3	; 0x03
    3952:	20 e0       	ldi	r18, 0x00	; 0
    3954:	3f ef       	ldi	r19, 0xFF	; 255
    3956:	4f e7       	ldi	r20, 0x7F	; 127
    3958:	57 e4       	ldi	r21, 0x47	; 71
    395a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    395e:	18 16       	cp	r1, r24
    3960:	0c f0       	brlt	.+2      	; 0x3964 <MENU_vidControlMenu+0x566>
    3962:	43 c0       	rjmp	.+134    	; 0x39ea <MENU_vidControlMenu+0x5ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3964:	fe 01       	movw	r30, r28
    3966:	e5 51       	subi	r30, 0x15	; 21
    3968:	ff 4f       	sbci	r31, 0xFF	; 255
    396a:	60 81       	ld	r22, Z
    396c:	71 81       	ldd	r23, Z+1	; 0x01
    396e:	82 81       	ldd	r24, Z+2	; 0x02
    3970:	93 81       	ldd	r25, Z+3	; 0x03
    3972:	20 e0       	ldi	r18, 0x00	; 0
    3974:	30 e0       	ldi	r19, 0x00	; 0
    3976:	40 e2       	ldi	r20, 0x20	; 32
    3978:	51 e4       	ldi	r21, 0x41	; 65
    397a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    397e:	dc 01       	movw	r26, r24
    3980:	cb 01       	movw	r24, r22
    3982:	8e 01       	movw	r16, r28
    3984:	0b 51       	subi	r16, 0x1B	; 27
    3986:	1f 4f       	sbci	r17, 0xFF	; 255
    3988:	bc 01       	movw	r22, r24
    398a:	cd 01       	movw	r24, r26
    398c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3990:	dc 01       	movw	r26, r24
    3992:	cb 01       	movw	r24, r22
    3994:	f8 01       	movw	r30, r16
    3996:	91 83       	std	Z+1, r25	; 0x01
    3998:	80 83       	st	Z, r24
    399a:	1f c0       	rjmp	.+62     	; 0x39da <MENU_vidControlMenu+0x5dc>
    399c:	fe 01       	movw	r30, r28
    399e:	ed 51       	subi	r30, 0x1D	; 29
    39a0:	ff 4f       	sbci	r31, 0xFF	; 255
    39a2:	80 e9       	ldi	r24, 0x90	; 144
    39a4:	91 e0       	ldi	r25, 0x01	; 1
    39a6:	91 83       	std	Z+1, r25	; 0x01
    39a8:	80 83       	st	Z, r24
    39aa:	fe 01       	movw	r30, r28
    39ac:	ed 51       	subi	r30, 0x1D	; 29
    39ae:	ff 4f       	sbci	r31, 0xFF	; 255
    39b0:	80 81       	ld	r24, Z
    39b2:	91 81       	ldd	r25, Z+1	; 0x01
    39b4:	01 97       	sbiw	r24, 0x01	; 1
    39b6:	f1 f7       	brne	.-4      	; 0x39b4 <MENU_vidControlMenu+0x5b6>
    39b8:	fe 01       	movw	r30, r28
    39ba:	ed 51       	subi	r30, 0x1D	; 29
    39bc:	ff 4f       	sbci	r31, 0xFF	; 255
    39be:	91 83       	std	Z+1, r25	; 0x01
    39c0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39c2:	de 01       	movw	r26, r28
    39c4:	ab 51       	subi	r26, 0x1B	; 27
    39c6:	bf 4f       	sbci	r27, 0xFF	; 255
    39c8:	fe 01       	movw	r30, r28
    39ca:	eb 51       	subi	r30, 0x1B	; 27
    39cc:	ff 4f       	sbci	r31, 0xFF	; 255
    39ce:	80 81       	ld	r24, Z
    39d0:	91 81       	ldd	r25, Z+1	; 0x01
    39d2:	01 97       	sbiw	r24, 0x01	; 1
    39d4:	11 96       	adiw	r26, 0x01	; 1
    39d6:	9c 93       	st	X, r25
    39d8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39da:	fe 01       	movw	r30, r28
    39dc:	eb 51       	subi	r30, 0x1B	; 27
    39de:	ff 4f       	sbci	r31, 0xFF	; 255
    39e0:	80 81       	ld	r24, Z
    39e2:	91 81       	ldd	r25, Z+1	; 0x01
    39e4:	00 97       	sbiw	r24, 0x00	; 0
    39e6:	d1 f6       	brne	.-76     	; 0x399c <MENU_vidControlMenu+0x59e>
    39e8:	28 c0       	rjmp	.+80     	; 0x3a3a <MENU_vidControlMenu+0x63c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39ea:	8e 01       	movw	r16, r28
    39ec:	0b 51       	subi	r16, 0x1B	; 27
    39ee:	1f 4f       	sbci	r17, 0xFF	; 255
    39f0:	fe 01       	movw	r30, r28
    39f2:	e9 51       	subi	r30, 0x19	; 25
    39f4:	ff 4f       	sbci	r31, 0xFF	; 255
    39f6:	60 81       	ld	r22, Z
    39f8:	71 81       	ldd	r23, Z+1	; 0x01
    39fa:	82 81       	ldd	r24, Z+2	; 0x02
    39fc:	93 81       	ldd	r25, Z+3	; 0x03
    39fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a02:	dc 01       	movw	r26, r24
    3a04:	cb 01       	movw	r24, r22
    3a06:	f8 01       	movw	r30, r16
    3a08:	91 83       	std	Z+1, r25	; 0x01
    3a0a:	80 83       	st	Z, r24
    3a0c:	de 01       	movw	r26, r28
    3a0e:	af 51       	subi	r26, 0x1F	; 31
    3a10:	bf 4f       	sbci	r27, 0xFF	; 255
    3a12:	fe 01       	movw	r30, r28
    3a14:	eb 51       	subi	r30, 0x1B	; 27
    3a16:	ff 4f       	sbci	r31, 0xFF	; 255
    3a18:	80 81       	ld	r24, Z
    3a1a:	91 81       	ldd	r25, Z+1	; 0x01
    3a1c:	11 96       	adiw	r26, 0x01	; 1
    3a1e:	9c 93       	st	X, r25
    3a20:	8e 93       	st	-X, r24
    3a22:	fe 01       	movw	r30, r28
    3a24:	ef 51       	subi	r30, 0x1F	; 31
    3a26:	ff 4f       	sbci	r31, 0xFF	; 255
    3a28:	80 81       	ld	r24, Z
    3a2a:	91 81       	ldd	r25, Z+1	; 0x01
    3a2c:	01 97       	sbiw	r24, 0x01	; 1
    3a2e:	f1 f7       	brne	.-4      	; 0x3a2c <MENU_vidControlMenu+0x62e>
    3a30:	fe 01       	movw	r30, r28
    3a32:	ef 51       	subi	r30, 0x1F	; 31
    3a34:	ff 4f       	sbci	r31, 0xFF	; 255
    3a36:	91 83       	std	Z+1, r25	; 0x01
    3a38:	80 83       	st	Z, r24
							_delay_ms(500);
							Local_u8Choice = '-';
    3a3a:	fe 01       	movw	r30, r28
    3a3c:	e3 5f       	subi	r30, 0xF3	; 243
    3a3e:	fe 4f       	sbci	r31, 0xFE	; 254
    3a40:	8d e2       	ldi	r24, 0x2D	; 45
    3a42:	80 83       	st	Z, r24
    3a44:	7c c1       	rjmp	.+760    	; 0x3d3e <MENU_vidControlMenu+0x940>
							break;
						case '4':
							DIO_enuSetPinValue(DIO_u8_PORTD, DIO_u8_PIN1, DIO_u8_HIGH);
    3a46:	83 e0       	ldi	r24, 0x03	; 3
    3a48:	61 e0       	ldi	r22, 0x01	; 1
    3a4a:	41 e0       	ldi	r20, 0x01	; 1
    3a4c:	0e 94 51 09 	call	0x12a2	; 0x12a2 <DIO_enuSetPinValue>
    3a50:	fe 01       	movw	r30, r28
    3a52:	e3 52       	subi	r30, 0x23	; 35
    3a54:	ff 4f       	sbci	r31, 0xFF	; 255
    3a56:	80 e0       	ldi	r24, 0x00	; 0
    3a58:	90 e8       	ldi	r25, 0x80	; 128
    3a5a:	ab eb       	ldi	r26, 0xBB	; 187
    3a5c:	b4 e4       	ldi	r27, 0x44	; 68
    3a5e:	80 83       	st	Z, r24
    3a60:	91 83       	std	Z+1, r25	; 0x01
    3a62:	a2 83       	std	Z+2, r26	; 0x02
    3a64:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a66:	8e 01       	movw	r16, r28
    3a68:	07 52       	subi	r16, 0x27	; 39
    3a6a:	1f 4f       	sbci	r17, 0xFF	; 255
    3a6c:	fe 01       	movw	r30, r28
    3a6e:	e3 52       	subi	r30, 0x23	; 35
    3a70:	ff 4f       	sbci	r31, 0xFF	; 255
    3a72:	60 81       	ld	r22, Z
    3a74:	71 81       	ldd	r23, Z+1	; 0x01
    3a76:	82 81       	ldd	r24, Z+2	; 0x02
    3a78:	93 81       	ldd	r25, Z+3	; 0x03
    3a7a:	20 e0       	ldi	r18, 0x00	; 0
    3a7c:	30 e0       	ldi	r19, 0x00	; 0
    3a7e:	4a e7       	ldi	r20, 0x7A	; 122
    3a80:	55 e4       	ldi	r21, 0x45	; 69
    3a82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a86:	dc 01       	movw	r26, r24
    3a88:	cb 01       	movw	r24, r22
    3a8a:	f8 01       	movw	r30, r16
    3a8c:	80 83       	st	Z, r24
    3a8e:	91 83       	std	Z+1, r25	; 0x01
    3a90:	a2 83       	std	Z+2, r26	; 0x02
    3a92:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a94:	fe 01       	movw	r30, r28
    3a96:	e7 52       	subi	r30, 0x27	; 39
    3a98:	ff 4f       	sbci	r31, 0xFF	; 255
    3a9a:	60 81       	ld	r22, Z
    3a9c:	71 81       	ldd	r23, Z+1	; 0x01
    3a9e:	82 81       	ldd	r24, Z+2	; 0x02
    3aa0:	93 81       	ldd	r25, Z+3	; 0x03
    3aa2:	20 e0       	ldi	r18, 0x00	; 0
    3aa4:	30 e0       	ldi	r19, 0x00	; 0
    3aa6:	40 e8       	ldi	r20, 0x80	; 128
    3aa8:	5f e3       	ldi	r21, 0x3F	; 63
    3aaa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3aae:	88 23       	and	r24, r24
    3ab0:	44 f4       	brge	.+16     	; 0x3ac2 <MENU_vidControlMenu+0x6c4>
		__ticks = 1;
    3ab2:	fe 01       	movw	r30, r28
    3ab4:	e9 52       	subi	r30, 0x29	; 41
    3ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab8:	81 e0       	ldi	r24, 0x01	; 1
    3aba:	90 e0       	ldi	r25, 0x00	; 0
    3abc:	91 83       	std	Z+1, r25	; 0x01
    3abe:	80 83       	st	Z, r24
    3ac0:	64 c0       	rjmp	.+200    	; 0x3b8a <MENU_vidControlMenu+0x78c>
	else if (__tmp > 65535)
    3ac2:	fe 01       	movw	r30, r28
    3ac4:	e7 52       	subi	r30, 0x27	; 39
    3ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac8:	60 81       	ld	r22, Z
    3aca:	71 81       	ldd	r23, Z+1	; 0x01
    3acc:	82 81       	ldd	r24, Z+2	; 0x02
    3ace:	93 81       	ldd	r25, Z+3	; 0x03
    3ad0:	20 e0       	ldi	r18, 0x00	; 0
    3ad2:	3f ef       	ldi	r19, 0xFF	; 255
    3ad4:	4f e7       	ldi	r20, 0x7F	; 127
    3ad6:	57 e4       	ldi	r21, 0x47	; 71
    3ad8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3adc:	18 16       	cp	r1, r24
    3ade:	0c f0       	brlt	.+2      	; 0x3ae2 <MENU_vidControlMenu+0x6e4>
    3ae0:	43 c0       	rjmp	.+134    	; 0x3b68 <MENU_vidControlMenu+0x76a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ae2:	fe 01       	movw	r30, r28
    3ae4:	e3 52       	subi	r30, 0x23	; 35
    3ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae8:	60 81       	ld	r22, Z
    3aea:	71 81       	ldd	r23, Z+1	; 0x01
    3aec:	82 81       	ldd	r24, Z+2	; 0x02
    3aee:	93 81       	ldd	r25, Z+3	; 0x03
    3af0:	20 e0       	ldi	r18, 0x00	; 0
    3af2:	30 e0       	ldi	r19, 0x00	; 0
    3af4:	40 e2       	ldi	r20, 0x20	; 32
    3af6:	51 e4       	ldi	r21, 0x41	; 65
    3af8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3afc:	dc 01       	movw	r26, r24
    3afe:	cb 01       	movw	r24, r22
    3b00:	8e 01       	movw	r16, r28
    3b02:	09 52       	subi	r16, 0x29	; 41
    3b04:	1f 4f       	sbci	r17, 0xFF	; 255
    3b06:	bc 01       	movw	r22, r24
    3b08:	cd 01       	movw	r24, r26
    3b0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b0e:	dc 01       	movw	r26, r24
    3b10:	cb 01       	movw	r24, r22
    3b12:	f8 01       	movw	r30, r16
    3b14:	91 83       	std	Z+1, r25	; 0x01
    3b16:	80 83       	st	Z, r24
    3b18:	1f c0       	rjmp	.+62     	; 0x3b58 <MENU_vidControlMenu+0x75a>
    3b1a:	fe 01       	movw	r30, r28
    3b1c:	eb 52       	subi	r30, 0x2B	; 43
    3b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b20:	80 e9       	ldi	r24, 0x90	; 144
    3b22:	91 e0       	ldi	r25, 0x01	; 1
    3b24:	91 83       	std	Z+1, r25	; 0x01
    3b26:	80 83       	st	Z, r24
    3b28:	fe 01       	movw	r30, r28
    3b2a:	eb 52       	subi	r30, 0x2B	; 43
    3b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b2e:	80 81       	ld	r24, Z
    3b30:	91 81       	ldd	r25, Z+1	; 0x01
    3b32:	01 97       	sbiw	r24, 0x01	; 1
    3b34:	f1 f7       	brne	.-4      	; 0x3b32 <MENU_vidControlMenu+0x734>
    3b36:	fe 01       	movw	r30, r28
    3b38:	eb 52       	subi	r30, 0x2B	; 43
    3b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b3c:	91 83       	std	Z+1, r25	; 0x01
    3b3e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b40:	de 01       	movw	r26, r28
    3b42:	a9 52       	subi	r26, 0x29	; 41
    3b44:	bf 4f       	sbci	r27, 0xFF	; 255
    3b46:	fe 01       	movw	r30, r28
    3b48:	e9 52       	subi	r30, 0x29	; 41
    3b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b4c:	80 81       	ld	r24, Z
    3b4e:	91 81       	ldd	r25, Z+1	; 0x01
    3b50:	01 97       	sbiw	r24, 0x01	; 1
    3b52:	11 96       	adiw	r26, 0x01	; 1
    3b54:	9c 93       	st	X, r25
    3b56:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b58:	fe 01       	movw	r30, r28
    3b5a:	e9 52       	subi	r30, 0x29	; 41
    3b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b5e:	80 81       	ld	r24, Z
    3b60:	91 81       	ldd	r25, Z+1	; 0x01
    3b62:	00 97       	sbiw	r24, 0x00	; 0
    3b64:	d1 f6       	brne	.-76     	; 0x3b1a <MENU_vidControlMenu+0x71c>
    3b66:	27 c0       	rjmp	.+78     	; 0x3bb6 <MENU_vidControlMenu+0x7b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b68:	8e 01       	movw	r16, r28
    3b6a:	09 52       	subi	r16, 0x29	; 41
    3b6c:	1f 4f       	sbci	r17, 0xFF	; 255
    3b6e:	fe 01       	movw	r30, r28
    3b70:	e7 52       	subi	r30, 0x27	; 39
    3b72:	ff 4f       	sbci	r31, 0xFF	; 255
    3b74:	60 81       	ld	r22, Z
    3b76:	71 81       	ldd	r23, Z+1	; 0x01
    3b78:	82 81       	ldd	r24, Z+2	; 0x02
    3b7a:	93 81       	ldd	r25, Z+3	; 0x03
    3b7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b80:	dc 01       	movw	r26, r24
    3b82:	cb 01       	movw	r24, r22
    3b84:	f8 01       	movw	r30, r16
    3b86:	91 83       	std	Z+1, r25	; 0x01
    3b88:	80 83       	st	Z, r24
    3b8a:	de 01       	movw	r26, r28
    3b8c:	ad 52       	subi	r26, 0x2D	; 45
    3b8e:	bf 4f       	sbci	r27, 0xFF	; 255
    3b90:	fe 01       	movw	r30, r28
    3b92:	e9 52       	subi	r30, 0x29	; 41
    3b94:	ff 4f       	sbci	r31, 0xFF	; 255
    3b96:	80 81       	ld	r24, Z
    3b98:	91 81       	ldd	r25, Z+1	; 0x01
    3b9a:	8d 93       	st	X+, r24
    3b9c:	9c 93       	st	X, r25
    3b9e:	fe 01       	movw	r30, r28
    3ba0:	ed 52       	subi	r30, 0x2D	; 45
    3ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba4:	80 81       	ld	r24, Z
    3ba6:	91 81       	ldd	r25, Z+1	; 0x01
    3ba8:	01 97       	sbiw	r24, 0x01	; 1
    3baa:	f1 f7       	brne	.-4      	; 0x3ba8 <MENU_vidControlMenu+0x7aa>
    3bac:	fe 01       	movw	r30, r28
    3bae:	ed 52       	subi	r30, 0x2D	; 45
    3bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb2:	91 83       	std	Z+1, r25	; 0x01
    3bb4:	80 83       	st	Z, r24
							_delay_ms(1500);
							DIO_enuSetPinValue(DIO_u8_PORTD, DIO_u8_PIN1, DIO_u8_LOW);
    3bb6:	83 e0       	ldi	r24, 0x03	; 3
    3bb8:	61 e0       	ldi	r22, 0x01	; 1
    3bba:	40 e0       	ldi	r20, 0x00	; 0
    3bbc:	0e 94 51 09 	call	0x12a2	; 0x12a2 <DIO_enuSetPinValue>
							LCD_Clear_Display();
    3bc0:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_Clear_Display>
							LCD_enuSendString("Main Door Opened");
    3bc4:	8b e8       	ldi	r24, 0x8B	; 139
    3bc6:	91 e0       	ldi	r25, 0x01	; 1
    3bc8:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
    3bcc:	fe 01       	movw	r30, r28
    3bce:	e1 53       	subi	r30, 0x31	; 49
    3bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd2:	80 e0       	ldi	r24, 0x00	; 0
    3bd4:	90 e0       	ldi	r25, 0x00	; 0
    3bd6:	aa ef       	ldi	r26, 0xFA	; 250
    3bd8:	b3 e4       	ldi	r27, 0x43	; 67
    3bda:	80 83       	st	Z, r24
    3bdc:	91 83       	std	Z+1, r25	; 0x01
    3bde:	a2 83       	std	Z+2, r26	; 0x02
    3be0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3be2:	8e 01       	movw	r16, r28
    3be4:	05 53       	subi	r16, 0x35	; 53
    3be6:	1f 4f       	sbci	r17, 0xFF	; 255
    3be8:	fe 01       	movw	r30, r28
    3bea:	e1 53       	subi	r30, 0x31	; 49
    3bec:	ff 4f       	sbci	r31, 0xFF	; 255
    3bee:	60 81       	ld	r22, Z
    3bf0:	71 81       	ldd	r23, Z+1	; 0x01
    3bf2:	82 81       	ldd	r24, Z+2	; 0x02
    3bf4:	93 81       	ldd	r25, Z+3	; 0x03
    3bf6:	20 e0       	ldi	r18, 0x00	; 0
    3bf8:	30 e0       	ldi	r19, 0x00	; 0
    3bfa:	4a e7       	ldi	r20, 0x7A	; 122
    3bfc:	55 e4       	ldi	r21, 0x45	; 69
    3bfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c02:	dc 01       	movw	r26, r24
    3c04:	cb 01       	movw	r24, r22
    3c06:	f8 01       	movw	r30, r16
    3c08:	80 83       	st	Z, r24
    3c0a:	91 83       	std	Z+1, r25	; 0x01
    3c0c:	a2 83       	std	Z+2, r26	; 0x02
    3c0e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c10:	fe 01       	movw	r30, r28
    3c12:	e5 53       	subi	r30, 0x35	; 53
    3c14:	ff 4f       	sbci	r31, 0xFF	; 255
    3c16:	60 81       	ld	r22, Z
    3c18:	71 81       	ldd	r23, Z+1	; 0x01
    3c1a:	82 81       	ldd	r24, Z+2	; 0x02
    3c1c:	93 81       	ldd	r25, Z+3	; 0x03
    3c1e:	20 e0       	ldi	r18, 0x00	; 0
    3c20:	30 e0       	ldi	r19, 0x00	; 0
    3c22:	40 e8       	ldi	r20, 0x80	; 128
    3c24:	5f e3       	ldi	r21, 0x3F	; 63
    3c26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3c2a:	88 23       	and	r24, r24
    3c2c:	44 f4       	brge	.+16     	; 0x3c3e <MENU_vidControlMenu+0x840>
		__ticks = 1;
    3c2e:	fe 01       	movw	r30, r28
    3c30:	e7 53       	subi	r30, 0x37	; 55
    3c32:	ff 4f       	sbci	r31, 0xFF	; 255
    3c34:	81 e0       	ldi	r24, 0x01	; 1
    3c36:	90 e0       	ldi	r25, 0x00	; 0
    3c38:	91 83       	std	Z+1, r25	; 0x01
    3c3a:	80 83       	st	Z, r24
    3c3c:	64 c0       	rjmp	.+200    	; 0x3d06 <MENU_vidControlMenu+0x908>
	else if (__tmp > 65535)
    3c3e:	fe 01       	movw	r30, r28
    3c40:	e5 53       	subi	r30, 0x35	; 53
    3c42:	ff 4f       	sbci	r31, 0xFF	; 255
    3c44:	60 81       	ld	r22, Z
    3c46:	71 81       	ldd	r23, Z+1	; 0x01
    3c48:	82 81       	ldd	r24, Z+2	; 0x02
    3c4a:	93 81       	ldd	r25, Z+3	; 0x03
    3c4c:	20 e0       	ldi	r18, 0x00	; 0
    3c4e:	3f ef       	ldi	r19, 0xFF	; 255
    3c50:	4f e7       	ldi	r20, 0x7F	; 127
    3c52:	57 e4       	ldi	r21, 0x47	; 71
    3c54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c58:	18 16       	cp	r1, r24
    3c5a:	0c f0       	brlt	.+2      	; 0x3c5e <MENU_vidControlMenu+0x860>
    3c5c:	43 c0       	rjmp	.+134    	; 0x3ce4 <MENU_vidControlMenu+0x8e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c5e:	fe 01       	movw	r30, r28
    3c60:	e1 53       	subi	r30, 0x31	; 49
    3c62:	ff 4f       	sbci	r31, 0xFF	; 255
    3c64:	60 81       	ld	r22, Z
    3c66:	71 81       	ldd	r23, Z+1	; 0x01
    3c68:	82 81       	ldd	r24, Z+2	; 0x02
    3c6a:	93 81       	ldd	r25, Z+3	; 0x03
    3c6c:	20 e0       	ldi	r18, 0x00	; 0
    3c6e:	30 e0       	ldi	r19, 0x00	; 0
    3c70:	40 e2       	ldi	r20, 0x20	; 32
    3c72:	51 e4       	ldi	r21, 0x41	; 65
    3c74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c78:	dc 01       	movw	r26, r24
    3c7a:	cb 01       	movw	r24, r22
    3c7c:	8e 01       	movw	r16, r28
    3c7e:	07 53       	subi	r16, 0x37	; 55
    3c80:	1f 4f       	sbci	r17, 0xFF	; 255
    3c82:	bc 01       	movw	r22, r24
    3c84:	cd 01       	movw	r24, r26
    3c86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c8a:	dc 01       	movw	r26, r24
    3c8c:	cb 01       	movw	r24, r22
    3c8e:	f8 01       	movw	r30, r16
    3c90:	91 83       	std	Z+1, r25	; 0x01
    3c92:	80 83       	st	Z, r24
    3c94:	1f c0       	rjmp	.+62     	; 0x3cd4 <MENU_vidControlMenu+0x8d6>
    3c96:	fe 01       	movw	r30, r28
    3c98:	e9 53       	subi	r30, 0x39	; 57
    3c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c9c:	80 e9       	ldi	r24, 0x90	; 144
    3c9e:	91 e0       	ldi	r25, 0x01	; 1
    3ca0:	91 83       	std	Z+1, r25	; 0x01
    3ca2:	80 83       	st	Z, r24
    3ca4:	fe 01       	movw	r30, r28
    3ca6:	e9 53       	subi	r30, 0x39	; 57
    3ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    3caa:	80 81       	ld	r24, Z
    3cac:	91 81       	ldd	r25, Z+1	; 0x01
    3cae:	01 97       	sbiw	r24, 0x01	; 1
    3cb0:	f1 f7       	brne	.-4      	; 0x3cae <MENU_vidControlMenu+0x8b0>
    3cb2:	fe 01       	movw	r30, r28
    3cb4:	e9 53       	subi	r30, 0x39	; 57
    3cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    3cb8:	91 83       	std	Z+1, r25	; 0x01
    3cba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cbc:	de 01       	movw	r26, r28
    3cbe:	a7 53       	subi	r26, 0x37	; 55
    3cc0:	bf 4f       	sbci	r27, 0xFF	; 255
    3cc2:	fe 01       	movw	r30, r28
    3cc4:	e7 53       	subi	r30, 0x37	; 55
    3cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    3cc8:	80 81       	ld	r24, Z
    3cca:	91 81       	ldd	r25, Z+1	; 0x01
    3ccc:	01 97       	sbiw	r24, 0x01	; 1
    3cce:	11 96       	adiw	r26, 0x01	; 1
    3cd0:	9c 93       	st	X, r25
    3cd2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cd4:	fe 01       	movw	r30, r28
    3cd6:	e7 53       	subi	r30, 0x37	; 55
    3cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cda:	80 81       	ld	r24, Z
    3cdc:	91 81       	ldd	r25, Z+1	; 0x01
    3cde:	00 97       	sbiw	r24, 0x00	; 0
    3ce0:	d1 f6       	brne	.-76     	; 0x3c96 <MENU_vidControlMenu+0x898>
    3ce2:	28 c0       	rjmp	.+80     	; 0x3d34 <MENU_vidControlMenu+0x936>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ce4:	8e 01       	movw	r16, r28
    3ce6:	07 53       	subi	r16, 0x37	; 55
    3ce8:	1f 4f       	sbci	r17, 0xFF	; 255
    3cea:	fe 01       	movw	r30, r28
    3cec:	e5 53       	subi	r30, 0x35	; 53
    3cee:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf0:	60 81       	ld	r22, Z
    3cf2:	71 81       	ldd	r23, Z+1	; 0x01
    3cf4:	82 81       	ldd	r24, Z+2	; 0x02
    3cf6:	93 81       	ldd	r25, Z+3	; 0x03
    3cf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cfc:	dc 01       	movw	r26, r24
    3cfe:	cb 01       	movw	r24, r22
    3d00:	f8 01       	movw	r30, r16
    3d02:	91 83       	std	Z+1, r25	; 0x01
    3d04:	80 83       	st	Z, r24
    3d06:	de 01       	movw	r26, r28
    3d08:	ab 53       	subi	r26, 0x3B	; 59
    3d0a:	bf 4f       	sbci	r27, 0xFF	; 255
    3d0c:	fe 01       	movw	r30, r28
    3d0e:	e7 53       	subi	r30, 0x37	; 55
    3d10:	ff 4f       	sbci	r31, 0xFF	; 255
    3d12:	80 81       	ld	r24, Z
    3d14:	91 81       	ldd	r25, Z+1	; 0x01
    3d16:	11 96       	adiw	r26, 0x01	; 1
    3d18:	9c 93       	st	X, r25
    3d1a:	8e 93       	st	-X, r24
    3d1c:	fe 01       	movw	r30, r28
    3d1e:	eb 53       	subi	r30, 0x3B	; 59
    3d20:	ff 4f       	sbci	r31, 0xFF	; 255
    3d22:	80 81       	ld	r24, Z
    3d24:	91 81       	ldd	r25, Z+1	; 0x01
    3d26:	01 97       	sbiw	r24, 0x01	; 1
    3d28:	f1 f7       	brne	.-4      	; 0x3d26 <MENU_vidControlMenu+0x928>
    3d2a:	fe 01       	movw	r30, r28
    3d2c:	eb 53       	subi	r30, 0x3B	; 59
    3d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d30:	91 83       	std	Z+1, r25	; 0x01
    3d32:	80 83       	st	Z, r24
							_delay_ms(500);
							Local_u8Choice = '-';
    3d34:	fe 01       	movw	r30, r28
    3d36:	e3 5f       	subi	r30, 0xF3	; 243
    3d38:	fe 4f       	sbci	r31, 0xFE	; 254
    3d3a:	8d e2       	ldi	r24, 0x2D	; 45
    3d3c:	80 83       	st	Z, r24
						case '/':
							break;
						case '-':
							break;
						}
					} while (Local_u8Choice != '-' && Local_u8Choice != '/');
    3d3e:	fe 01       	movw	r30, r28
    3d40:	e3 5f       	subi	r30, 0xF3	; 243
    3d42:	fe 4f       	sbci	r31, 0xFE	; 254
    3d44:	80 81       	ld	r24, Z
    3d46:	8d 32       	cpi	r24, 0x2D	; 45
    3d48:	39 f0       	breq	.+14     	; 0x3d58 <MENU_vidControlMenu+0x95a>
    3d4a:	fe 01       	movw	r30, r28
    3d4c:	e3 5f       	subi	r30, 0xF3	; 243
    3d4e:	fe 4f       	sbci	r31, 0xFE	; 254
    3d50:	80 81       	ld	r24, Z
    3d52:	8f 32       	cpi	r24, 0x2F	; 47
    3d54:	09 f0       	breq	.+2      	; 0x3d58 <MENU_vidControlMenu+0x95a>
    3d56:	d9 cb       	rjmp	.-2126   	; 0x350a <MENU_vidControlMenu+0x10c>
					Local_u8Choice = 0;
    3d58:	fe 01       	movw	r30, r28
    3d5a:	e3 5f       	subi	r30, 0xF3	; 243
    3d5c:	fe 4f       	sbci	r31, 0xFE	; 254
    3d5e:	10 82       	st	Z, r1
    3d60:	2b c4       	rjmp	.+2134   	; 0x45b8 <MENU_vidControlMenu+0x11ba>
					break;
				case '2':
					do
					{
						LCD_Clear_Display();
    3d62:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_Clear_Display>
						LCD_enuSendString("1:Room1 2:Room2");
    3d66:	82 e4       	ldi	r24, 0x42	; 66
    3d68:	91 e0       	ldi	r25, 0x01	; 1
    3d6a:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
						LCD_enuChangePosition(1, 0);
    3d6e:	81 e0       	ldi	r24, 0x01	; 1
    3d70:	60 e0       	ldi	r22, 0x00	; 0
    3d72:	0e 94 1e 12 	call	0x243c	; 0x243c <LCD_enuChangePosition>
						LCD_enuSendString("3:Room3 4:Main");
    3d76:	82 e5       	ldi	r24, 0x52	; 82
    3d78:	91 e0       	ldi	r25, 0x01	; 1
    3d7a:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
						Local_u8Choice = GetChioce();
    3d7e:	0e 94 28 2b 	call	0x5650	; 0x5650 <GetChioce>
    3d82:	fe 01       	movw	r30, r28
    3d84:	e3 5f       	subi	r30, 0xF3	; 243
    3d86:	fe 4f       	sbci	r31, 0xFE	; 254
    3d88:	80 83       	st	Z, r24
						switch (Local_u8Choice)
    3d8a:	fe 01       	movw	r30, r28
    3d8c:	e3 5f       	subi	r30, 0xF3	; 243
    3d8e:	fe 4f       	sbci	r31, 0xFE	; 254
    3d90:	80 81       	ld	r24, Z
    3d92:	28 2f       	mov	r18, r24
    3d94:	30 e0       	ldi	r19, 0x00	; 0
    3d96:	c4 5e       	subi	r28, 0xE4	; 228
    3d98:	de 4f       	sbci	r29, 0xFE	; 254
    3d9a:	39 83       	std	Y+1, r19	; 0x01
    3d9c:	28 83       	st	Y, r18
    3d9e:	cc 51       	subi	r28, 0x1C	; 28
    3da0:	d1 40       	sbci	r29, 0x01	; 1
    3da2:	c4 5e       	subi	r28, 0xE4	; 228
    3da4:	de 4f       	sbci	r29, 0xFE	; 254
    3da6:	88 81       	ld	r24, Y
    3da8:	99 81       	ldd	r25, Y+1	; 0x01
    3daa:	cc 51       	subi	r28, 0x1C	; 28
    3dac:	d1 40       	sbci	r29, 0x01	; 1
    3dae:	82 33       	cpi	r24, 0x32	; 50
    3db0:	91 05       	cpc	r25, r1
    3db2:	09 f4       	brne	.+2      	; 0x3db6 <MENU_vidControlMenu+0x9b8>
    3db4:	ec c0       	rjmp	.+472    	; 0x3f8e <MENU_vidControlMenu+0xb90>
    3db6:	c4 5e       	subi	r28, 0xE4	; 228
    3db8:	de 4f       	sbci	r29, 0xFE	; 254
    3dba:	e8 81       	ld	r30, Y
    3dbc:	f9 81       	ldd	r31, Y+1	; 0x01
    3dbe:	cc 51       	subi	r28, 0x1C	; 28
    3dc0:	d1 40       	sbci	r29, 0x01	; 1
    3dc2:	e3 33       	cpi	r30, 0x33	; 51
    3dc4:	f1 05       	cpc	r31, r1
    3dc6:	54 f4       	brge	.+20     	; 0x3ddc <MENU_vidControlMenu+0x9de>
    3dc8:	c4 5e       	subi	r28, 0xE4	; 228
    3dca:	de 4f       	sbci	r29, 0xFE	; 254
    3dcc:	28 81       	ld	r18, Y
    3dce:	39 81       	ldd	r19, Y+1	; 0x01
    3dd0:	cc 51       	subi	r28, 0x1C	; 28
    3dd2:	d1 40       	sbci	r29, 0x01	; 1
    3dd4:	21 33       	cpi	r18, 0x31	; 49
    3dd6:	31 05       	cpc	r19, r1
    3dd8:	b1 f0       	breq	.+44     	; 0x3e06 <MENU_vidControlMenu+0xa08>
    3dda:	dd c3       	rjmp	.+1978   	; 0x4596 <MENU_vidControlMenu+0x1198>
    3ddc:	c4 5e       	subi	r28, 0xE4	; 228
    3dde:	de 4f       	sbci	r29, 0xFE	; 254
    3de0:	88 81       	ld	r24, Y
    3de2:	99 81       	ldd	r25, Y+1	; 0x01
    3de4:	cc 51       	subi	r28, 0x1C	; 28
    3de6:	d1 40       	sbci	r29, 0x01	; 1
    3de8:	83 33       	cpi	r24, 0x33	; 51
    3dea:	91 05       	cpc	r25, r1
    3dec:	09 f4       	brne	.+2      	; 0x3df0 <MENU_vidControlMenu+0x9f2>
    3dee:	93 c1       	rjmp	.+806    	; 0x4116 <MENU_vidControlMenu+0xd18>
    3df0:	c4 5e       	subi	r28, 0xE4	; 228
    3df2:	de 4f       	sbci	r29, 0xFE	; 254
    3df4:	e8 81       	ld	r30, Y
    3df6:	f9 81       	ldd	r31, Y+1	; 0x01
    3df8:	cc 51       	subi	r28, 0x1C	; 28
    3dfa:	d1 40       	sbci	r29, 0x01	; 1
    3dfc:	e4 33       	cpi	r30, 0x34	; 52
    3dfe:	f1 05       	cpc	r31, r1
    3e00:	09 f4       	brne	.+2      	; 0x3e04 <MENU_vidControlMenu+0xa06>
    3e02:	4d c2       	rjmp	.+1178   	; 0x429e <MENU_vidControlMenu+0xea0>
    3e04:	c8 c3       	rjmp	.+1936   	; 0x4596 <MENU_vidControlMenu+0x1198>
						{
						case '1':
							MENU_vidSendInstruction(3, 0);
    3e06:	83 e0       	ldi	r24, 0x03	; 3
    3e08:	60 e0       	ldi	r22, 0x00	; 0
    3e0a:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <MENU_vidSendInstruction>

							LCD_Clear_Display();
    3e0e:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_Clear_Display>
							LCD_enuSendString("Room 1 Closed");
    3e12:	8c e9       	ldi	r24, 0x9C	; 156
    3e14:	91 e0       	ldi	r25, 0x01	; 1
    3e16:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
    3e1a:	fe 01       	movw	r30, r28
    3e1c:	ef 53       	subi	r30, 0x3F	; 63
    3e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e20:	80 e0       	ldi	r24, 0x00	; 0
    3e22:	90 e0       	ldi	r25, 0x00	; 0
    3e24:	aa ef       	ldi	r26, 0xFA	; 250
    3e26:	b3 e4       	ldi	r27, 0x43	; 67
    3e28:	80 83       	st	Z, r24
    3e2a:	91 83       	std	Z+1, r25	; 0x01
    3e2c:	a2 83       	std	Z+2, r26	; 0x02
    3e2e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e30:	8e 01       	movw	r16, r28
    3e32:	03 54       	subi	r16, 0x43	; 67
    3e34:	1f 4f       	sbci	r17, 0xFF	; 255
    3e36:	fe 01       	movw	r30, r28
    3e38:	ef 53       	subi	r30, 0x3F	; 63
    3e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e3c:	60 81       	ld	r22, Z
    3e3e:	71 81       	ldd	r23, Z+1	; 0x01
    3e40:	82 81       	ldd	r24, Z+2	; 0x02
    3e42:	93 81       	ldd	r25, Z+3	; 0x03
    3e44:	20 e0       	ldi	r18, 0x00	; 0
    3e46:	30 e0       	ldi	r19, 0x00	; 0
    3e48:	4a e7       	ldi	r20, 0x7A	; 122
    3e4a:	55 e4       	ldi	r21, 0x45	; 69
    3e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e50:	dc 01       	movw	r26, r24
    3e52:	cb 01       	movw	r24, r22
    3e54:	f8 01       	movw	r30, r16
    3e56:	80 83       	st	Z, r24
    3e58:	91 83       	std	Z+1, r25	; 0x01
    3e5a:	a2 83       	std	Z+2, r26	; 0x02
    3e5c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e5e:	fe 01       	movw	r30, r28
    3e60:	e3 54       	subi	r30, 0x43	; 67
    3e62:	ff 4f       	sbci	r31, 0xFF	; 255
    3e64:	60 81       	ld	r22, Z
    3e66:	71 81       	ldd	r23, Z+1	; 0x01
    3e68:	82 81       	ldd	r24, Z+2	; 0x02
    3e6a:	93 81       	ldd	r25, Z+3	; 0x03
    3e6c:	20 e0       	ldi	r18, 0x00	; 0
    3e6e:	30 e0       	ldi	r19, 0x00	; 0
    3e70:	40 e8       	ldi	r20, 0x80	; 128
    3e72:	5f e3       	ldi	r21, 0x3F	; 63
    3e74:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e78:	88 23       	and	r24, r24
    3e7a:	44 f4       	brge	.+16     	; 0x3e8c <MENU_vidControlMenu+0xa8e>
		__ticks = 1;
    3e7c:	fe 01       	movw	r30, r28
    3e7e:	e5 54       	subi	r30, 0x45	; 69
    3e80:	ff 4f       	sbci	r31, 0xFF	; 255
    3e82:	81 e0       	ldi	r24, 0x01	; 1
    3e84:	90 e0       	ldi	r25, 0x00	; 0
    3e86:	91 83       	std	Z+1, r25	; 0x01
    3e88:	80 83       	st	Z, r24
    3e8a:	64 c0       	rjmp	.+200    	; 0x3f54 <MENU_vidControlMenu+0xb56>
	else if (__tmp > 65535)
    3e8c:	fe 01       	movw	r30, r28
    3e8e:	e3 54       	subi	r30, 0x43	; 67
    3e90:	ff 4f       	sbci	r31, 0xFF	; 255
    3e92:	60 81       	ld	r22, Z
    3e94:	71 81       	ldd	r23, Z+1	; 0x01
    3e96:	82 81       	ldd	r24, Z+2	; 0x02
    3e98:	93 81       	ldd	r25, Z+3	; 0x03
    3e9a:	20 e0       	ldi	r18, 0x00	; 0
    3e9c:	3f ef       	ldi	r19, 0xFF	; 255
    3e9e:	4f e7       	ldi	r20, 0x7F	; 127
    3ea0:	57 e4       	ldi	r21, 0x47	; 71
    3ea2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ea6:	18 16       	cp	r1, r24
    3ea8:	0c f0       	brlt	.+2      	; 0x3eac <MENU_vidControlMenu+0xaae>
    3eaa:	43 c0       	rjmp	.+134    	; 0x3f32 <MENU_vidControlMenu+0xb34>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3eac:	fe 01       	movw	r30, r28
    3eae:	ef 53       	subi	r30, 0x3F	; 63
    3eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb2:	60 81       	ld	r22, Z
    3eb4:	71 81       	ldd	r23, Z+1	; 0x01
    3eb6:	82 81       	ldd	r24, Z+2	; 0x02
    3eb8:	93 81       	ldd	r25, Z+3	; 0x03
    3eba:	20 e0       	ldi	r18, 0x00	; 0
    3ebc:	30 e0       	ldi	r19, 0x00	; 0
    3ebe:	40 e2       	ldi	r20, 0x20	; 32
    3ec0:	51 e4       	ldi	r21, 0x41	; 65
    3ec2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ec6:	dc 01       	movw	r26, r24
    3ec8:	cb 01       	movw	r24, r22
    3eca:	8e 01       	movw	r16, r28
    3ecc:	05 54       	subi	r16, 0x45	; 69
    3ece:	1f 4f       	sbci	r17, 0xFF	; 255
    3ed0:	bc 01       	movw	r22, r24
    3ed2:	cd 01       	movw	r24, r26
    3ed4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ed8:	dc 01       	movw	r26, r24
    3eda:	cb 01       	movw	r24, r22
    3edc:	f8 01       	movw	r30, r16
    3ede:	91 83       	std	Z+1, r25	; 0x01
    3ee0:	80 83       	st	Z, r24
    3ee2:	1f c0       	rjmp	.+62     	; 0x3f22 <MENU_vidControlMenu+0xb24>
    3ee4:	fe 01       	movw	r30, r28
    3ee6:	e7 54       	subi	r30, 0x47	; 71
    3ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eea:	80 e9       	ldi	r24, 0x90	; 144
    3eec:	91 e0       	ldi	r25, 0x01	; 1
    3eee:	91 83       	std	Z+1, r25	; 0x01
    3ef0:	80 83       	st	Z, r24
    3ef2:	fe 01       	movw	r30, r28
    3ef4:	e7 54       	subi	r30, 0x47	; 71
    3ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ef8:	80 81       	ld	r24, Z
    3efa:	91 81       	ldd	r25, Z+1	; 0x01
    3efc:	01 97       	sbiw	r24, 0x01	; 1
    3efe:	f1 f7       	brne	.-4      	; 0x3efc <MENU_vidControlMenu+0xafe>
    3f00:	fe 01       	movw	r30, r28
    3f02:	e7 54       	subi	r30, 0x47	; 71
    3f04:	ff 4f       	sbci	r31, 0xFF	; 255
    3f06:	91 83       	std	Z+1, r25	; 0x01
    3f08:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f0a:	de 01       	movw	r26, r28
    3f0c:	a5 54       	subi	r26, 0x45	; 69
    3f0e:	bf 4f       	sbci	r27, 0xFF	; 255
    3f10:	fe 01       	movw	r30, r28
    3f12:	e5 54       	subi	r30, 0x45	; 69
    3f14:	ff 4f       	sbci	r31, 0xFF	; 255
    3f16:	80 81       	ld	r24, Z
    3f18:	91 81       	ldd	r25, Z+1	; 0x01
    3f1a:	01 97       	sbiw	r24, 0x01	; 1
    3f1c:	11 96       	adiw	r26, 0x01	; 1
    3f1e:	9c 93       	st	X, r25
    3f20:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f22:	fe 01       	movw	r30, r28
    3f24:	e5 54       	subi	r30, 0x45	; 69
    3f26:	ff 4f       	sbci	r31, 0xFF	; 255
    3f28:	80 81       	ld	r24, Z
    3f2a:	91 81       	ldd	r25, Z+1	; 0x01
    3f2c:	00 97       	sbiw	r24, 0x00	; 0
    3f2e:	d1 f6       	brne	.-76     	; 0x3ee4 <MENU_vidControlMenu+0xae6>
    3f30:	28 c0       	rjmp	.+80     	; 0x3f82 <MENU_vidControlMenu+0xb84>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f32:	8e 01       	movw	r16, r28
    3f34:	05 54       	subi	r16, 0x45	; 69
    3f36:	1f 4f       	sbci	r17, 0xFF	; 255
    3f38:	fe 01       	movw	r30, r28
    3f3a:	e3 54       	subi	r30, 0x43	; 67
    3f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f3e:	60 81       	ld	r22, Z
    3f40:	71 81       	ldd	r23, Z+1	; 0x01
    3f42:	82 81       	ldd	r24, Z+2	; 0x02
    3f44:	93 81       	ldd	r25, Z+3	; 0x03
    3f46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f4a:	dc 01       	movw	r26, r24
    3f4c:	cb 01       	movw	r24, r22
    3f4e:	f8 01       	movw	r30, r16
    3f50:	91 83       	std	Z+1, r25	; 0x01
    3f52:	80 83       	st	Z, r24
    3f54:	de 01       	movw	r26, r28
    3f56:	a9 54       	subi	r26, 0x49	; 73
    3f58:	bf 4f       	sbci	r27, 0xFF	; 255
    3f5a:	fe 01       	movw	r30, r28
    3f5c:	e5 54       	subi	r30, 0x45	; 69
    3f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f60:	80 81       	ld	r24, Z
    3f62:	91 81       	ldd	r25, Z+1	; 0x01
    3f64:	11 96       	adiw	r26, 0x01	; 1
    3f66:	9c 93       	st	X, r25
    3f68:	8e 93       	st	-X, r24
    3f6a:	fe 01       	movw	r30, r28
    3f6c:	e9 54       	subi	r30, 0x49	; 73
    3f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f70:	80 81       	ld	r24, Z
    3f72:	91 81       	ldd	r25, Z+1	; 0x01
    3f74:	01 97       	sbiw	r24, 0x01	; 1
    3f76:	f1 f7       	brne	.-4      	; 0x3f74 <MENU_vidControlMenu+0xb76>
    3f78:	fe 01       	movw	r30, r28
    3f7a:	e9 54       	subi	r30, 0x49	; 73
    3f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f7e:	91 83       	std	Z+1, r25	; 0x01
    3f80:	80 83       	st	Z, r24
							_delay_ms(500);
							Local_u8Choice = '-';
    3f82:	fe 01       	movw	r30, r28
    3f84:	e3 5f       	subi	r30, 0xF3	; 243
    3f86:	fe 4f       	sbci	r31, 0xFE	; 254
    3f88:	8d e2       	ldi	r24, 0x2D	; 45
    3f8a:	80 83       	st	Z, r24
    3f8c:	04 c3       	rjmp	.+1544   	; 0x4596 <MENU_vidControlMenu+0x1198>
							break;
						case '2':
							MENU_vidSendInstruction(4, 0);
    3f8e:	84 e0       	ldi	r24, 0x04	; 4
    3f90:	60 e0       	ldi	r22, 0x00	; 0
    3f92:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <MENU_vidSendInstruction>

							LCD_Clear_Display();
    3f96:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_Clear_Display>
							LCD_enuSendString("Room 2 Closed");
    3f9a:	8a ea       	ldi	r24, 0xAA	; 170
    3f9c:	91 e0       	ldi	r25, 0x01	; 1
    3f9e:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
    3fa2:	fe 01       	movw	r30, r28
    3fa4:	ed 54       	subi	r30, 0x4D	; 77
    3fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa8:	80 e0       	ldi	r24, 0x00	; 0
    3faa:	90 e0       	ldi	r25, 0x00	; 0
    3fac:	aa ef       	ldi	r26, 0xFA	; 250
    3fae:	b3 e4       	ldi	r27, 0x43	; 67
    3fb0:	80 83       	st	Z, r24
    3fb2:	91 83       	std	Z+1, r25	; 0x01
    3fb4:	a2 83       	std	Z+2, r26	; 0x02
    3fb6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fb8:	8e 01       	movw	r16, r28
    3fba:	01 55       	subi	r16, 0x51	; 81
    3fbc:	1f 4f       	sbci	r17, 0xFF	; 255
    3fbe:	fe 01       	movw	r30, r28
    3fc0:	ed 54       	subi	r30, 0x4D	; 77
    3fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc4:	60 81       	ld	r22, Z
    3fc6:	71 81       	ldd	r23, Z+1	; 0x01
    3fc8:	82 81       	ldd	r24, Z+2	; 0x02
    3fca:	93 81       	ldd	r25, Z+3	; 0x03
    3fcc:	20 e0       	ldi	r18, 0x00	; 0
    3fce:	30 e0       	ldi	r19, 0x00	; 0
    3fd0:	4a e7       	ldi	r20, 0x7A	; 122
    3fd2:	55 e4       	ldi	r21, 0x45	; 69
    3fd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fd8:	dc 01       	movw	r26, r24
    3fda:	cb 01       	movw	r24, r22
    3fdc:	f8 01       	movw	r30, r16
    3fde:	80 83       	st	Z, r24
    3fe0:	91 83       	std	Z+1, r25	; 0x01
    3fe2:	a2 83       	std	Z+2, r26	; 0x02
    3fe4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3fe6:	fe 01       	movw	r30, r28
    3fe8:	e1 55       	subi	r30, 0x51	; 81
    3fea:	ff 4f       	sbci	r31, 0xFF	; 255
    3fec:	60 81       	ld	r22, Z
    3fee:	71 81       	ldd	r23, Z+1	; 0x01
    3ff0:	82 81       	ldd	r24, Z+2	; 0x02
    3ff2:	93 81       	ldd	r25, Z+3	; 0x03
    3ff4:	20 e0       	ldi	r18, 0x00	; 0
    3ff6:	30 e0       	ldi	r19, 0x00	; 0
    3ff8:	40 e8       	ldi	r20, 0x80	; 128
    3ffa:	5f e3       	ldi	r21, 0x3F	; 63
    3ffc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4000:	88 23       	and	r24, r24
    4002:	44 f4       	brge	.+16     	; 0x4014 <MENU_vidControlMenu+0xc16>
		__ticks = 1;
    4004:	fe 01       	movw	r30, r28
    4006:	e3 55       	subi	r30, 0x53	; 83
    4008:	ff 4f       	sbci	r31, 0xFF	; 255
    400a:	81 e0       	ldi	r24, 0x01	; 1
    400c:	90 e0       	ldi	r25, 0x00	; 0
    400e:	91 83       	std	Z+1, r25	; 0x01
    4010:	80 83       	st	Z, r24
    4012:	64 c0       	rjmp	.+200    	; 0x40dc <MENU_vidControlMenu+0xcde>
	else if (__tmp > 65535)
    4014:	fe 01       	movw	r30, r28
    4016:	e1 55       	subi	r30, 0x51	; 81
    4018:	ff 4f       	sbci	r31, 0xFF	; 255
    401a:	60 81       	ld	r22, Z
    401c:	71 81       	ldd	r23, Z+1	; 0x01
    401e:	82 81       	ldd	r24, Z+2	; 0x02
    4020:	93 81       	ldd	r25, Z+3	; 0x03
    4022:	20 e0       	ldi	r18, 0x00	; 0
    4024:	3f ef       	ldi	r19, 0xFF	; 255
    4026:	4f e7       	ldi	r20, 0x7F	; 127
    4028:	57 e4       	ldi	r21, 0x47	; 71
    402a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    402e:	18 16       	cp	r1, r24
    4030:	0c f0       	brlt	.+2      	; 0x4034 <MENU_vidControlMenu+0xc36>
    4032:	43 c0       	rjmp	.+134    	; 0x40ba <MENU_vidControlMenu+0xcbc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4034:	fe 01       	movw	r30, r28
    4036:	ed 54       	subi	r30, 0x4D	; 77
    4038:	ff 4f       	sbci	r31, 0xFF	; 255
    403a:	60 81       	ld	r22, Z
    403c:	71 81       	ldd	r23, Z+1	; 0x01
    403e:	82 81       	ldd	r24, Z+2	; 0x02
    4040:	93 81       	ldd	r25, Z+3	; 0x03
    4042:	20 e0       	ldi	r18, 0x00	; 0
    4044:	30 e0       	ldi	r19, 0x00	; 0
    4046:	40 e2       	ldi	r20, 0x20	; 32
    4048:	51 e4       	ldi	r21, 0x41	; 65
    404a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    404e:	dc 01       	movw	r26, r24
    4050:	cb 01       	movw	r24, r22
    4052:	8e 01       	movw	r16, r28
    4054:	03 55       	subi	r16, 0x53	; 83
    4056:	1f 4f       	sbci	r17, 0xFF	; 255
    4058:	bc 01       	movw	r22, r24
    405a:	cd 01       	movw	r24, r26
    405c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4060:	dc 01       	movw	r26, r24
    4062:	cb 01       	movw	r24, r22
    4064:	f8 01       	movw	r30, r16
    4066:	91 83       	std	Z+1, r25	; 0x01
    4068:	80 83       	st	Z, r24
    406a:	1f c0       	rjmp	.+62     	; 0x40aa <MENU_vidControlMenu+0xcac>
    406c:	fe 01       	movw	r30, r28
    406e:	e5 55       	subi	r30, 0x55	; 85
    4070:	ff 4f       	sbci	r31, 0xFF	; 255
    4072:	80 e9       	ldi	r24, 0x90	; 144
    4074:	91 e0       	ldi	r25, 0x01	; 1
    4076:	91 83       	std	Z+1, r25	; 0x01
    4078:	80 83       	st	Z, r24
    407a:	fe 01       	movw	r30, r28
    407c:	e5 55       	subi	r30, 0x55	; 85
    407e:	ff 4f       	sbci	r31, 0xFF	; 255
    4080:	80 81       	ld	r24, Z
    4082:	91 81       	ldd	r25, Z+1	; 0x01
    4084:	01 97       	sbiw	r24, 0x01	; 1
    4086:	f1 f7       	brne	.-4      	; 0x4084 <MENU_vidControlMenu+0xc86>
    4088:	fe 01       	movw	r30, r28
    408a:	e5 55       	subi	r30, 0x55	; 85
    408c:	ff 4f       	sbci	r31, 0xFF	; 255
    408e:	91 83       	std	Z+1, r25	; 0x01
    4090:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4092:	de 01       	movw	r26, r28
    4094:	a3 55       	subi	r26, 0x53	; 83
    4096:	bf 4f       	sbci	r27, 0xFF	; 255
    4098:	fe 01       	movw	r30, r28
    409a:	e3 55       	subi	r30, 0x53	; 83
    409c:	ff 4f       	sbci	r31, 0xFF	; 255
    409e:	80 81       	ld	r24, Z
    40a0:	91 81       	ldd	r25, Z+1	; 0x01
    40a2:	01 97       	sbiw	r24, 0x01	; 1
    40a4:	11 96       	adiw	r26, 0x01	; 1
    40a6:	9c 93       	st	X, r25
    40a8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40aa:	fe 01       	movw	r30, r28
    40ac:	e3 55       	subi	r30, 0x53	; 83
    40ae:	ff 4f       	sbci	r31, 0xFF	; 255
    40b0:	80 81       	ld	r24, Z
    40b2:	91 81       	ldd	r25, Z+1	; 0x01
    40b4:	00 97       	sbiw	r24, 0x00	; 0
    40b6:	d1 f6       	brne	.-76     	; 0x406c <MENU_vidControlMenu+0xc6e>
    40b8:	28 c0       	rjmp	.+80     	; 0x410a <MENU_vidControlMenu+0xd0c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40ba:	8e 01       	movw	r16, r28
    40bc:	03 55       	subi	r16, 0x53	; 83
    40be:	1f 4f       	sbci	r17, 0xFF	; 255
    40c0:	fe 01       	movw	r30, r28
    40c2:	e1 55       	subi	r30, 0x51	; 81
    40c4:	ff 4f       	sbci	r31, 0xFF	; 255
    40c6:	60 81       	ld	r22, Z
    40c8:	71 81       	ldd	r23, Z+1	; 0x01
    40ca:	82 81       	ldd	r24, Z+2	; 0x02
    40cc:	93 81       	ldd	r25, Z+3	; 0x03
    40ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40d2:	dc 01       	movw	r26, r24
    40d4:	cb 01       	movw	r24, r22
    40d6:	f8 01       	movw	r30, r16
    40d8:	91 83       	std	Z+1, r25	; 0x01
    40da:	80 83       	st	Z, r24
    40dc:	de 01       	movw	r26, r28
    40de:	a7 55       	subi	r26, 0x57	; 87
    40e0:	bf 4f       	sbci	r27, 0xFF	; 255
    40e2:	fe 01       	movw	r30, r28
    40e4:	e3 55       	subi	r30, 0x53	; 83
    40e6:	ff 4f       	sbci	r31, 0xFF	; 255
    40e8:	80 81       	ld	r24, Z
    40ea:	91 81       	ldd	r25, Z+1	; 0x01
    40ec:	11 96       	adiw	r26, 0x01	; 1
    40ee:	9c 93       	st	X, r25
    40f0:	8e 93       	st	-X, r24
    40f2:	fe 01       	movw	r30, r28
    40f4:	e7 55       	subi	r30, 0x57	; 87
    40f6:	ff 4f       	sbci	r31, 0xFF	; 255
    40f8:	80 81       	ld	r24, Z
    40fa:	91 81       	ldd	r25, Z+1	; 0x01
    40fc:	01 97       	sbiw	r24, 0x01	; 1
    40fe:	f1 f7       	brne	.-4      	; 0x40fc <MENU_vidControlMenu+0xcfe>
    4100:	fe 01       	movw	r30, r28
    4102:	e7 55       	subi	r30, 0x57	; 87
    4104:	ff 4f       	sbci	r31, 0xFF	; 255
    4106:	91 83       	std	Z+1, r25	; 0x01
    4108:	80 83       	st	Z, r24
							_delay_ms(500);
							Local_u8Choice = '-';
    410a:	fe 01       	movw	r30, r28
    410c:	e3 5f       	subi	r30, 0xF3	; 243
    410e:	fe 4f       	sbci	r31, 0xFE	; 254
    4110:	8d e2       	ldi	r24, 0x2D	; 45
    4112:	80 83       	st	Z, r24
    4114:	40 c2       	rjmp	.+1152   	; 0x4596 <MENU_vidControlMenu+0x1198>
							break;
						case '3':
							MENU_vidSendInstruction(5, 0);
    4116:	85 e0       	ldi	r24, 0x05	; 5
    4118:	60 e0       	ldi	r22, 0x00	; 0
    411a:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <MENU_vidSendInstruction>

							LCD_Clear_Display();
    411e:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_Clear_Display>
							LCD_enuSendString("Room 3 Closed");
    4122:	88 eb       	ldi	r24, 0xB8	; 184
    4124:	91 e0       	ldi	r25, 0x01	; 1
    4126:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
    412a:	fe 01       	movw	r30, r28
    412c:	eb 55       	subi	r30, 0x5B	; 91
    412e:	ff 4f       	sbci	r31, 0xFF	; 255
    4130:	80 e0       	ldi	r24, 0x00	; 0
    4132:	90 e0       	ldi	r25, 0x00	; 0
    4134:	aa ef       	ldi	r26, 0xFA	; 250
    4136:	b3 e4       	ldi	r27, 0x43	; 67
    4138:	80 83       	st	Z, r24
    413a:	91 83       	std	Z+1, r25	; 0x01
    413c:	a2 83       	std	Z+2, r26	; 0x02
    413e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4140:	8e 01       	movw	r16, r28
    4142:	0f 55       	subi	r16, 0x5F	; 95
    4144:	1f 4f       	sbci	r17, 0xFF	; 255
    4146:	fe 01       	movw	r30, r28
    4148:	eb 55       	subi	r30, 0x5B	; 91
    414a:	ff 4f       	sbci	r31, 0xFF	; 255
    414c:	60 81       	ld	r22, Z
    414e:	71 81       	ldd	r23, Z+1	; 0x01
    4150:	82 81       	ldd	r24, Z+2	; 0x02
    4152:	93 81       	ldd	r25, Z+3	; 0x03
    4154:	20 e0       	ldi	r18, 0x00	; 0
    4156:	30 e0       	ldi	r19, 0x00	; 0
    4158:	4a e7       	ldi	r20, 0x7A	; 122
    415a:	55 e4       	ldi	r21, 0x45	; 69
    415c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4160:	dc 01       	movw	r26, r24
    4162:	cb 01       	movw	r24, r22
    4164:	f8 01       	movw	r30, r16
    4166:	80 83       	st	Z, r24
    4168:	91 83       	std	Z+1, r25	; 0x01
    416a:	a2 83       	std	Z+2, r26	; 0x02
    416c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    416e:	fe 01       	movw	r30, r28
    4170:	ef 55       	subi	r30, 0x5F	; 95
    4172:	ff 4f       	sbci	r31, 0xFF	; 255
    4174:	60 81       	ld	r22, Z
    4176:	71 81       	ldd	r23, Z+1	; 0x01
    4178:	82 81       	ldd	r24, Z+2	; 0x02
    417a:	93 81       	ldd	r25, Z+3	; 0x03
    417c:	20 e0       	ldi	r18, 0x00	; 0
    417e:	30 e0       	ldi	r19, 0x00	; 0
    4180:	40 e8       	ldi	r20, 0x80	; 128
    4182:	5f e3       	ldi	r21, 0x3F	; 63
    4184:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4188:	88 23       	and	r24, r24
    418a:	44 f4       	brge	.+16     	; 0x419c <MENU_vidControlMenu+0xd9e>
		__ticks = 1;
    418c:	fe 01       	movw	r30, r28
    418e:	e1 56       	subi	r30, 0x61	; 97
    4190:	ff 4f       	sbci	r31, 0xFF	; 255
    4192:	81 e0       	ldi	r24, 0x01	; 1
    4194:	90 e0       	ldi	r25, 0x00	; 0
    4196:	91 83       	std	Z+1, r25	; 0x01
    4198:	80 83       	st	Z, r24
    419a:	64 c0       	rjmp	.+200    	; 0x4264 <MENU_vidControlMenu+0xe66>
	else if (__tmp > 65535)
    419c:	fe 01       	movw	r30, r28
    419e:	ef 55       	subi	r30, 0x5F	; 95
    41a0:	ff 4f       	sbci	r31, 0xFF	; 255
    41a2:	60 81       	ld	r22, Z
    41a4:	71 81       	ldd	r23, Z+1	; 0x01
    41a6:	82 81       	ldd	r24, Z+2	; 0x02
    41a8:	93 81       	ldd	r25, Z+3	; 0x03
    41aa:	20 e0       	ldi	r18, 0x00	; 0
    41ac:	3f ef       	ldi	r19, 0xFF	; 255
    41ae:	4f e7       	ldi	r20, 0x7F	; 127
    41b0:	57 e4       	ldi	r21, 0x47	; 71
    41b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    41b6:	18 16       	cp	r1, r24
    41b8:	0c f0       	brlt	.+2      	; 0x41bc <MENU_vidControlMenu+0xdbe>
    41ba:	43 c0       	rjmp	.+134    	; 0x4242 <MENU_vidControlMenu+0xe44>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41bc:	fe 01       	movw	r30, r28
    41be:	eb 55       	subi	r30, 0x5B	; 91
    41c0:	ff 4f       	sbci	r31, 0xFF	; 255
    41c2:	60 81       	ld	r22, Z
    41c4:	71 81       	ldd	r23, Z+1	; 0x01
    41c6:	82 81       	ldd	r24, Z+2	; 0x02
    41c8:	93 81       	ldd	r25, Z+3	; 0x03
    41ca:	20 e0       	ldi	r18, 0x00	; 0
    41cc:	30 e0       	ldi	r19, 0x00	; 0
    41ce:	40 e2       	ldi	r20, 0x20	; 32
    41d0:	51 e4       	ldi	r21, 0x41	; 65
    41d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41d6:	dc 01       	movw	r26, r24
    41d8:	cb 01       	movw	r24, r22
    41da:	8e 01       	movw	r16, r28
    41dc:	01 56       	subi	r16, 0x61	; 97
    41de:	1f 4f       	sbci	r17, 0xFF	; 255
    41e0:	bc 01       	movw	r22, r24
    41e2:	cd 01       	movw	r24, r26
    41e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41e8:	dc 01       	movw	r26, r24
    41ea:	cb 01       	movw	r24, r22
    41ec:	f8 01       	movw	r30, r16
    41ee:	91 83       	std	Z+1, r25	; 0x01
    41f0:	80 83       	st	Z, r24
    41f2:	1f c0       	rjmp	.+62     	; 0x4232 <MENU_vidControlMenu+0xe34>
    41f4:	fe 01       	movw	r30, r28
    41f6:	e3 56       	subi	r30, 0x63	; 99
    41f8:	ff 4f       	sbci	r31, 0xFF	; 255
    41fa:	80 e9       	ldi	r24, 0x90	; 144
    41fc:	91 e0       	ldi	r25, 0x01	; 1
    41fe:	91 83       	std	Z+1, r25	; 0x01
    4200:	80 83       	st	Z, r24
    4202:	fe 01       	movw	r30, r28
    4204:	e3 56       	subi	r30, 0x63	; 99
    4206:	ff 4f       	sbci	r31, 0xFF	; 255
    4208:	80 81       	ld	r24, Z
    420a:	91 81       	ldd	r25, Z+1	; 0x01
    420c:	01 97       	sbiw	r24, 0x01	; 1
    420e:	f1 f7       	brne	.-4      	; 0x420c <MENU_vidControlMenu+0xe0e>
    4210:	fe 01       	movw	r30, r28
    4212:	e3 56       	subi	r30, 0x63	; 99
    4214:	ff 4f       	sbci	r31, 0xFF	; 255
    4216:	91 83       	std	Z+1, r25	; 0x01
    4218:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    421a:	de 01       	movw	r26, r28
    421c:	a1 56       	subi	r26, 0x61	; 97
    421e:	bf 4f       	sbci	r27, 0xFF	; 255
    4220:	fe 01       	movw	r30, r28
    4222:	e1 56       	subi	r30, 0x61	; 97
    4224:	ff 4f       	sbci	r31, 0xFF	; 255
    4226:	80 81       	ld	r24, Z
    4228:	91 81       	ldd	r25, Z+1	; 0x01
    422a:	01 97       	sbiw	r24, 0x01	; 1
    422c:	11 96       	adiw	r26, 0x01	; 1
    422e:	9c 93       	st	X, r25
    4230:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4232:	fe 01       	movw	r30, r28
    4234:	e1 56       	subi	r30, 0x61	; 97
    4236:	ff 4f       	sbci	r31, 0xFF	; 255
    4238:	80 81       	ld	r24, Z
    423a:	91 81       	ldd	r25, Z+1	; 0x01
    423c:	00 97       	sbiw	r24, 0x00	; 0
    423e:	d1 f6       	brne	.-76     	; 0x41f4 <MENU_vidControlMenu+0xdf6>
    4240:	28 c0       	rjmp	.+80     	; 0x4292 <MENU_vidControlMenu+0xe94>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4242:	8e 01       	movw	r16, r28
    4244:	01 56       	subi	r16, 0x61	; 97
    4246:	1f 4f       	sbci	r17, 0xFF	; 255
    4248:	fe 01       	movw	r30, r28
    424a:	ef 55       	subi	r30, 0x5F	; 95
    424c:	ff 4f       	sbci	r31, 0xFF	; 255
    424e:	60 81       	ld	r22, Z
    4250:	71 81       	ldd	r23, Z+1	; 0x01
    4252:	82 81       	ldd	r24, Z+2	; 0x02
    4254:	93 81       	ldd	r25, Z+3	; 0x03
    4256:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    425a:	dc 01       	movw	r26, r24
    425c:	cb 01       	movw	r24, r22
    425e:	f8 01       	movw	r30, r16
    4260:	91 83       	std	Z+1, r25	; 0x01
    4262:	80 83       	st	Z, r24
    4264:	de 01       	movw	r26, r28
    4266:	a5 56       	subi	r26, 0x65	; 101
    4268:	bf 4f       	sbci	r27, 0xFF	; 255
    426a:	fe 01       	movw	r30, r28
    426c:	e1 56       	subi	r30, 0x61	; 97
    426e:	ff 4f       	sbci	r31, 0xFF	; 255
    4270:	80 81       	ld	r24, Z
    4272:	91 81       	ldd	r25, Z+1	; 0x01
    4274:	11 96       	adiw	r26, 0x01	; 1
    4276:	9c 93       	st	X, r25
    4278:	8e 93       	st	-X, r24
    427a:	fe 01       	movw	r30, r28
    427c:	e5 56       	subi	r30, 0x65	; 101
    427e:	ff 4f       	sbci	r31, 0xFF	; 255
    4280:	80 81       	ld	r24, Z
    4282:	91 81       	ldd	r25, Z+1	; 0x01
    4284:	01 97       	sbiw	r24, 0x01	; 1
    4286:	f1 f7       	brne	.-4      	; 0x4284 <MENU_vidControlMenu+0xe86>
    4288:	fe 01       	movw	r30, r28
    428a:	e5 56       	subi	r30, 0x65	; 101
    428c:	ff 4f       	sbci	r31, 0xFF	; 255
    428e:	91 83       	std	Z+1, r25	; 0x01
    4290:	80 83       	st	Z, r24
							_delay_ms(500);
							Local_u8Choice = '-';
    4292:	fe 01       	movw	r30, r28
    4294:	e3 5f       	subi	r30, 0xF3	; 243
    4296:	fe 4f       	sbci	r31, 0xFE	; 254
    4298:	8d e2       	ldi	r24, 0x2D	; 45
    429a:	80 83       	st	Z, r24
    429c:	7c c1       	rjmp	.+760    	; 0x4596 <MENU_vidControlMenu+0x1198>
							break;
						case '4':

							DIO_enuSetPinValue(DIO_u8_PORTD, DIO_u8_PIN2, DIO_u8_HIGH);
    429e:	83 e0       	ldi	r24, 0x03	; 3
    42a0:	62 e0       	ldi	r22, 0x02	; 2
    42a2:	41 e0       	ldi	r20, 0x01	; 1
    42a4:	0e 94 51 09 	call	0x12a2	; 0x12a2 <DIO_enuSetPinValue>
    42a8:	fe 01       	movw	r30, r28
    42aa:	e9 56       	subi	r30, 0x69	; 105
    42ac:	ff 4f       	sbci	r31, 0xFF	; 255
    42ae:	80 e0       	ldi	r24, 0x00	; 0
    42b0:	90 e8       	ldi	r25, 0x80	; 128
    42b2:	ab eb       	ldi	r26, 0xBB	; 187
    42b4:	b4 e4       	ldi	r27, 0x44	; 68
    42b6:	80 83       	st	Z, r24
    42b8:	91 83       	std	Z+1, r25	; 0x01
    42ba:	a2 83       	std	Z+2, r26	; 0x02
    42bc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42be:	8e 01       	movw	r16, r28
    42c0:	0d 56       	subi	r16, 0x6D	; 109
    42c2:	1f 4f       	sbci	r17, 0xFF	; 255
    42c4:	fe 01       	movw	r30, r28
    42c6:	e9 56       	subi	r30, 0x69	; 105
    42c8:	ff 4f       	sbci	r31, 0xFF	; 255
    42ca:	60 81       	ld	r22, Z
    42cc:	71 81       	ldd	r23, Z+1	; 0x01
    42ce:	82 81       	ldd	r24, Z+2	; 0x02
    42d0:	93 81       	ldd	r25, Z+3	; 0x03
    42d2:	20 e0       	ldi	r18, 0x00	; 0
    42d4:	30 e0       	ldi	r19, 0x00	; 0
    42d6:	4a e7       	ldi	r20, 0x7A	; 122
    42d8:	55 e4       	ldi	r21, 0x45	; 69
    42da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42de:	dc 01       	movw	r26, r24
    42e0:	cb 01       	movw	r24, r22
    42e2:	f8 01       	movw	r30, r16
    42e4:	80 83       	st	Z, r24
    42e6:	91 83       	std	Z+1, r25	; 0x01
    42e8:	a2 83       	std	Z+2, r26	; 0x02
    42ea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    42ec:	fe 01       	movw	r30, r28
    42ee:	ed 56       	subi	r30, 0x6D	; 109
    42f0:	ff 4f       	sbci	r31, 0xFF	; 255
    42f2:	60 81       	ld	r22, Z
    42f4:	71 81       	ldd	r23, Z+1	; 0x01
    42f6:	82 81       	ldd	r24, Z+2	; 0x02
    42f8:	93 81       	ldd	r25, Z+3	; 0x03
    42fa:	20 e0       	ldi	r18, 0x00	; 0
    42fc:	30 e0       	ldi	r19, 0x00	; 0
    42fe:	40 e8       	ldi	r20, 0x80	; 128
    4300:	5f e3       	ldi	r21, 0x3F	; 63
    4302:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4306:	88 23       	and	r24, r24
    4308:	44 f4       	brge	.+16     	; 0x431a <MENU_vidControlMenu+0xf1c>
		__ticks = 1;
    430a:	fe 01       	movw	r30, r28
    430c:	ef 56       	subi	r30, 0x6F	; 111
    430e:	ff 4f       	sbci	r31, 0xFF	; 255
    4310:	81 e0       	ldi	r24, 0x01	; 1
    4312:	90 e0       	ldi	r25, 0x00	; 0
    4314:	91 83       	std	Z+1, r25	; 0x01
    4316:	80 83       	st	Z, r24
    4318:	64 c0       	rjmp	.+200    	; 0x43e2 <MENU_vidControlMenu+0xfe4>
	else if (__tmp > 65535)
    431a:	fe 01       	movw	r30, r28
    431c:	ed 56       	subi	r30, 0x6D	; 109
    431e:	ff 4f       	sbci	r31, 0xFF	; 255
    4320:	60 81       	ld	r22, Z
    4322:	71 81       	ldd	r23, Z+1	; 0x01
    4324:	82 81       	ldd	r24, Z+2	; 0x02
    4326:	93 81       	ldd	r25, Z+3	; 0x03
    4328:	20 e0       	ldi	r18, 0x00	; 0
    432a:	3f ef       	ldi	r19, 0xFF	; 255
    432c:	4f e7       	ldi	r20, 0x7F	; 127
    432e:	57 e4       	ldi	r21, 0x47	; 71
    4330:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4334:	18 16       	cp	r1, r24
    4336:	0c f0       	brlt	.+2      	; 0x433a <MENU_vidControlMenu+0xf3c>
    4338:	43 c0       	rjmp	.+134    	; 0x43c0 <MENU_vidControlMenu+0xfc2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    433a:	fe 01       	movw	r30, r28
    433c:	e9 56       	subi	r30, 0x69	; 105
    433e:	ff 4f       	sbci	r31, 0xFF	; 255
    4340:	60 81       	ld	r22, Z
    4342:	71 81       	ldd	r23, Z+1	; 0x01
    4344:	82 81       	ldd	r24, Z+2	; 0x02
    4346:	93 81       	ldd	r25, Z+3	; 0x03
    4348:	20 e0       	ldi	r18, 0x00	; 0
    434a:	30 e0       	ldi	r19, 0x00	; 0
    434c:	40 e2       	ldi	r20, 0x20	; 32
    434e:	51 e4       	ldi	r21, 0x41	; 65
    4350:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4354:	dc 01       	movw	r26, r24
    4356:	cb 01       	movw	r24, r22
    4358:	8e 01       	movw	r16, r28
    435a:	0f 56       	subi	r16, 0x6F	; 111
    435c:	1f 4f       	sbci	r17, 0xFF	; 255
    435e:	bc 01       	movw	r22, r24
    4360:	cd 01       	movw	r24, r26
    4362:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4366:	dc 01       	movw	r26, r24
    4368:	cb 01       	movw	r24, r22
    436a:	f8 01       	movw	r30, r16
    436c:	91 83       	std	Z+1, r25	; 0x01
    436e:	80 83       	st	Z, r24
    4370:	1f c0       	rjmp	.+62     	; 0x43b0 <MENU_vidControlMenu+0xfb2>
    4372:	fe 01       	movw	r30, r28
    4374:	e1 57       	subi	r30, 0x71	; 113
    4376:	ff 4f       	sbci	r31, 0xFF	; 255
    4378:	80 e9       	ldi	r24, 0x90	; 144
    437a:	91 e0       	ldi	r25, 0x01	; 1
    437c:	91 83       	std	Z+1, r25	; 0x01
    437e:	80 83       	st	Z, r24
    4380:	fe 01       	movw	r30, r28
    4382:	e1 57       	subi	r30, 0x71	; 113
    4384:	ff 4f       	sbci	r31, 0xFF	; 255
    4386:	80 81       	ld	r24, Z
    4388:	91 81       	ldd	r25, Z+1	; 0x01
    438a:	01 97       	sbiw	r24, 0x01	; 1
    438c:	f1 f7       	brne	.-4      	; 0x438a <MENU_vidControlMenu+0xf8c>
    438e:	fe 01       	movw	r30, r28
    4390:	e1 57       	subi	r30, 0x71	; 113
    4392:	ff 4f       	sbci	r31, 0xFF	; 255
    4394:	91 83       	std	Z+1, r25	; 0x01
    4396:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4398:	de 01       	movw	r26, r28
    439a:	af 56       	subi	r26, 0x6F	; 111
    439c:	bf 4f       	sbci	r27, 0xFF	; 255
    439e:	fe 01       	movw	r30, r28
    43a0:	ef 56       	subi	r30, 0x6F	; 111
    43a2:	ff 4f       	sbci	r31, 0xFF	; 255
    43a4:	80 81       	ld	r24, Z
    43a6:	91 81       	ldd	r25, Z+1	; 0x01
    43a8:	01 97       	sbiw	r24, 0x01	; 1
    43aa:	11 96       	adiw	r26, 0x01	; 1
    43ac:	9c 93       	st	X, r25
    43ae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43b0:	fe 01       	movw	r30, r28
    43b2:	ef 56       	subi	r30, 0x6F	; 111
    43b4:	ff 4f       	sbci	r31, 0xFF	; 255
    43b6:	80 81       	ld	r24, Z
    43b8:	91 81       	ldd	r25, Z+1	; 0x01
    43ba:	00 97       	sbiw	r24, 0x00	; 0
    43bc:	d1 f6       	brne	.-76     	; 0x4372 <MENU_vidControlMenu+0xf74>
    43be:	27 c0       	rjmp	.+78     	; 0x440e <MENU_vidControlMenu+0x1010>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43c0:	8e 01       	movw	r16, r28
    43c2:	0f 56       	subi	r16, 0x6F	; 111
    43c4:	1f 4f       	sbci	r17, 0xFF	; 255
    43c6:	fe 01       	movw	r30, r28
    43c8:	ed 56       	subi	r30, 0x6D	; 109
    43ca:	ff 4f       	sbci	r31, 0xFF	; 255
    43cc:	60 81       	ld	r22, Z
    43ce:	71 81       	ldd	r23, Z+1	; 0x01
    43d0:	82 81       	ldd	r24, Z+2	; 0x02
    43d2:	93 81       	ldd	r25, Z+3	; 0x03
    43d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43d8:	dc 01       	movw	r26, r24
    43da:	cb 01       	movw	r24, r22
    43dc:	f8 01       	movw	r30, r16
    43de:	91 83       	std	Z+1, r25	; 0x01
    43e0:	80 83       	st	Z, r24
    43e2:	de 01       	movw	r26, r28
    43e4:	a3 57       	subi	r26, 0x73	; 115
    43e6:	bf 4f       	sbci	r27, 0xFF	; 255
    43e8:	fe 01       	movw	r30, r28
    43ea:	ef 56       	subi	r30, 0x6F	; 111
    43ec:	ff 4f       	sbci	r31, 0xFF	; 255
    43ee:	80 81       	ld	r24, Z
    43f0:	91 81       	ldd	r25, Z+1	; 0x01
    43f2:	8d 93       	st	X+, r24
    43f4:	9c 93       	st	X, r25
    43f6:	fe 01       	movw	r30, r28
    43f8:	e3 57       	subi	r30, 0x73	; 115
    43fa:	ff 4f       	sbci	r31, 0xFF	; 255
    43fc:	80 81       	ld	r24, Z
    43fe:	91 81       	ldd	r25, Z+1	; 0x01
    4400:	01 97       	sbiw	r24, 0x01	; 1
    4402:	f1 f7       	brne	.-4      	; 0x4400 <MENU_vidControlMenu+0x1002>
    4404:	fe 01       	movw	r30, r28
    4406:	e3 57       	subi	r30, 0x73	; 115
    4408:	ff 4f       	sbci	r31, 0xFF	; 255
    440a:	91 83       	std	Z+1, r25	; 0x01
    440c:	80 83       	st	Z, r24
							_delay_ms(1500);
							DIO_enuSetPinValue(DIO_u8_PORTD, DIO_u8_PIN2, DIO_u8_LOW);
    440e:	83 e0       	ldi	r24, 0x03	; 3
    4410:	62 e0       	ldi	r22, 0x02	; 2
    4412:	40 e0       	ldi	r20, 0x00	; 0
    4414:	0e 94 51 09 	call	0x12a2	; 0x12a2 <DIO_enuSetPinValue>
							LCD_Clear_Display();
    4418:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_Clear_Display>
							LCD_enuSendString("Main Door Closed");
    441c:	86 ec       	ldi	r24, 0xC6	; 198
    441e:	91 e0       	ldi	r25, 0x01	; 1
    4420:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
    4424:	fe 01       	movw	r30, r28
    4426:	e7 57       	subi	r30, 0x77	; 119
    4428:	ff 4f       	sbci	r31, 0xFF	; 255
    442a:	80 e0       	ldi	r24, 0x00	; 0
    442c:	90 e0       	ldi	r25, 0x00	; 0
    442e:	aa ef       	ldi	r26, 0xFA	; 250
    4430:	b3 e4       	ldi	r27, 0x43	; 67
    4432:	80 83       	st	Z, r24
    4434:	91 83       	std	Z+1, r25	; 0x01
    4436:	a2 83       	std	Z+2, r26	; 0x02
    4438:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    443a:	8e 01       	movw	r16, r28
    443c:	0b 57       	subi	r16, 0x7B	; 123
    443e:	1f 4f       	sbci	r17, 0xFF	; 255
    4440:	fe 01       	movw	r30, r28
    4442:	e7 57       	subi	r30, 0x77	; 119
    4444:	ff 4f       	sbci	r31, 0xFF	; 255
    4446:	60 81       	ld	r22, Z
    4448:	71 81       	ldd	r23, Z+1	; 0x01
    444a:	82 81       	ldd	r24, Z+2	; 0x02
    444c:	93 81       	ldd	r25, Z+3	; 0x03
    444e:	20 e0       	ldi	r18, 0x00	; 0
    4450:	30 e0       	ldi	r19, 0x00	; 0
    4452:	4a e7       	ldi	r20, 0x7A	; 122
    4454:	55 e4       	ldi	r21, 0x45	; 69
    4456:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    445a:	dc 01       	movw	r26, r24
    445c:	cb 01       	movw	r24, r22
    445e:	f8 01       	movw	r30, r16
    4460:	80 83       	st	Z, r24
    4462:	91 83       	std	Z+1, r25	; 0x01
    4464:	a2 83       	std	Z+2, r26	; 0x02
    4466:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4468:	fe 01       	movw	r30, r28
    446a:	eb 57       	subi	r30, 0x7B	; 123
    446c:	ff 4f       	sbci	r31, 0xFF	; 255
    446e:	60 81       	ld	r22, Z
    4470:	71 81       	ldd	r23, Z+1	; 0x01
    4472:	82 81       	ldd	r24, Z+2	; 0x02
    4474:	93 81       	ldd	r25, Z+3	; 0x03
    4476:	20 e0       	ldi	r18, 0x00	; 0
    4478:	30 e0       	ldi	r19, 0x00	; 0
    447a:	40 e8       	ldi	r20, 0x80	; 128
    447c:	5f e3       	ldi	r21, 0x3F	; 63
    447e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4482:	88 23       	and	r24, r24
    4484:	44 f4       	brge	.+16     	; 0x4496 <MENU_vidControlMenu+0x1098>
		__ticks = 1;
    4486:	fe 01       	movw	r30, r28
    4488:	ed 57       	subi	r30, 0x7D	; 125
    448a:	ff 4f       	sbci	r31, 0xFF	; 255
    448c:	81 e0       	ldi	r24, 0x01	; 1
    448e:	90 e0       	ldi	r25, 0x00	; 0
    4490:	91 83       	std	Z+1, r25	; 0x01
    4492:	80 83       	st	Z, r24
    4494:	64 c0       	rjmp	.+200    	; 0x455e <MENU_vidControlMenu+0x1160>
	else if (__tmp > 65535)
    4496:	fe 01       	movw	r30, r28
    4498:	eb 57       	subi	r30, 0x7B	; 123
    449a:	ff 4f       	sbci	r31, 0xFF	; 255
    449c:	60 81       	ld	r22, Z
    449e:	71 81       	ldd	r23, Z+1	; 0x01
    44a0:	82 81       	ldd	r24, Z+2	; 0x02
    44a2:	93 81       	ldd	r25, Z+3	; 0x03
    44a4:	20 e0       	ldi	r18, 0x00	; 0
    44a6:	3f ef       	ldi	r19, 0xFF	; 255
    44a8:	4f e7       	ldi	r20, 0x7F	; 127
    44aa:	57 e4       	ldi	r21, 0x47	; 71
    44ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    44b0:	18 16       	cp	r1, r24
    44b2:	0c f0       	brlt	.+2      	; 0x44b6 <MENU_vidControlMenu+0x10b8>
    44b4:	43 c0       	rjmp	.+134    	; 0x453c <MENU_vidControlMenu+0x113e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44b6:	fe 01       	movw	r30, r28
    44b8:	e7 57       	subi	r30, 0x77	; 119
    44ba:	ff 4f       	sbci	r31, 0xFF	; 255
    44bc:	60 81       	ld	r22, Z
    44be:	71 81       	ldd	r23, Z+1	; 0x01
    44c0:	82 81       	ldd	r24, Z+2	; 0x02
    44c2:	93 81       	ldd	r25, Z+3	; 0x03
    44c4:	20 e0       	ldi	r18, 0x00	; 0
    44c6:	30 e0       	ldi	r19, 0x00	; 0
    44c8:	40 e2       	ldi	r20, 0x20	; 32
    44ca:	51 e4       	ldi	r21, 0x41	; 65
    44cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44d0:	dc 01       	movw	r26, r24
    44d2:	cb 01       	movw	r24, r22
    44d4:	8e 01       	movw	r16, r28
    44d6:	0d 57       	subi	r16, 0x7D	; 125
    44d8:	1f 4f       	sbci	r17, 0xFF	; 255
    44da:	bc 01       	movw	r22, r24
    44dc:	cd 01       	movw	r24, r26
    44de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44e2:	dc 01       	movw	r26, r24
    44e4:	cb 01       	movw	r24, r22
    44e6:	f8 01       	movw	r30, r16
    44e8:	91 83       	std	Z+1, r25	; 0x01
    44ea:	80 83       	st	Z, r24
    44ec:	1f c0       	rjmp	.+62     	; 0x452c <MENU_vidControlMenu+0x112e>
    44ee:	fe 01       	movw	r30, r28
    44f0:	ef 57       	subi	r30, 0x7F	; 127
    44f2:	ff 4f       	sbci	r31, 0xFF	; 255
    44f4:	80 e9       	ldi	r24, 0x90	; 144
    44f6:	91 e0       	ldi	r25, 0x01	; 1
    44f8:	91 83       	std	Z+1, r25	; 0x01
    44fa:	80 83       	st	Z, r24
    44fc:	fe 01       	movw	r30, r28
    44fe:	ef 57       	subi	r30, 0x7F	; 127
    4500:	ff 4f       	sbci	r31, 0xFF	; 255
    4502:	80 81       	ld	r24, Z
    4504:	91 81       	ldd	r25, Z+1	; 0x01
    4506:	01 97       	sbiw	r24, 0x01	; 1
    4508:	f1 f7       	brne	.-4      	; 0x4506 <MENU_vidControlMenu+0x1108>
    450a:	fe 01       	movw	r30, r28
    450c:	ef 57       	subi	r30, 0x7F	; 127
    450e:	ff 4f       	sbci	r31, 0xFF	; 255
    4510:	91 83       	std	Z+1, r25	; 0x01
    4512:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4514:	de 01       	movw	r26, r28
    4516:	ad 57       	subi	r26, 0x7D	; 125
    4518:	bf 4f       	sbci	r27, 0xFF	; 255
    451a:	fe 01       	movw	r30, r28
    451c:	ed 57       	subi	r30, 0x7D	; 125
    451e:	ff 4f       	sbci	r31, 0xFF	; 255
    4520:	80 81       	ld	r24, Z
    4522:	91 81       	ldd	r25, Z+1	; 0x01
    4524:	01 97       	sbiw	r24, 0x01	; 1
    4526:	11 96       	adiw	r26, 0x01	; 1
    4528:	9c 93       	st	X, r25
    452a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    452c:	fe 01       	movw	r30, r28
    452e:	ed 57       	subi	r30, 0x7D	; 125
    4530:	ff 4f       	sbci	r31, 0xFF	; 255
    4532:	80 81       	ld	r24, Z
    4534:	91 81       	ldd	r25, Z+1	; 0x01
    4536:	00 97       	sbiw	r24, 0x00	; 0
    4538:	d1 f6       	brne	.-76     	; 0x44ee <MENU_vidControlMenu+0x10f0>
    453a:	28 c0       	rjmp	.+80     	; 0x458c <MENU_vidControlMenu+0x118e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    453c:	8e 01       	movw	r16, r28
    453e:	0d 57       	subi	r16, 0x7D	; 125
    4540:	1f 4f       	sbci	r17, 0xFF	; 255
    4542:	fe 01       	movw	r30, r28
    4544:	eb 57       	subi	r30, 0x7B	; 123
    4546:	ff 4f       	sbci	r31, 0xFF	; 255
    4548:	60 81       	ld	r22, Z
    454a:	71 81       	ldd	r23, Z+1	; 0x01
    454c:	82 81       	ldd	r24, Z+2	; 0x02
    454e:	93 81       	ldd	r25, Z+3	; 0x03
    4550:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4554:	dc 01       	movw	r26, r24
    4556:	cb 01       	movw	r24, r22
    4558:	f8 01       	movw	r30, r16
    455a:	91 83       	std	Z+1, r25	; 0x01
    455c:	80 83       	st	Z, r24
    455e:	de 01       	movw	r26, r28
    4560:	a1 58       	subi	r26, 0x81	; 129
    4562:	bf 4f       	sbci	r27, 0xFF	; 255
    4564:	fe 01       	movw	r30, r28
    4566:	ed 57       	subi	r30, 0x7D	; 125
    4568:	ff 4f       	sbci	r31, 0xFF	; 255
    456a:	80 81       	ld	r24, Z
    456c:	91 81       	ldd	r25, Z+1	; 0x01
    456e:	11 96       	adiw	r26, 0x01	; 1
    4570:	9c 93       	st	X, r25
    4572:	8e 93       	st	-X, r24
    4574:	fe 01       	movw	r30, r28
    4576:	e1 58       	subi	r30, 0x81	; 129
    4578:	ff 4f       	sbci	r31, 0xFF	; 255
    457a:	80 81       	ld	r24, Z
    457c:	91 81       	ldd	r25, Z+1	; 0x01
    457e:	01 97       	sbiw	r24, 0x01	; 1
    4580:	f1 f7       	brne	.-4      	; 0x457e <MENU_vidControlMenu+0x1180>
    4582:	fe 01       	movw	r30, r28
    4584:	e1 58       	subi	r30, 0x81	; 129
    4586:	ff 4f       	sbci	r31, 0xFF	; 255
    4588:	91 83       	std	Z+1, r25	; 0x01
    458a:	80 83       	st	Z, r24
							_delay_ms(500);

							Local_u8Choice = '-';
    458c:	fe 01       	movw	r30, r28
    458e:	e3 5f       	subi	r30, 0xF3	; 243
    4590:	fe 4f       	sbci	r31, 0xFE	; 254
    4592:	8d e2       	ldi	r24, 0x2D	; 45
    4594:	80 83       	st	Z, r24
						case '/':
							break;
						case '-':
							break;
						}
					} while (Local_u8Choice != '-' && Local_u8Choice != '/');
    4596:	fe 01       	movw	r30, r28
    4598:	e3 5f       	subi	r30, 0xF3	; 243
    459a:	fe 4f       	sbci	r31, 0xFE	; 254
    459c:	80 81       	ld	r24, Z
    459e:	8d 32       	cpi	r24, 0x2D	; 45
    45a0:	39 f0       	breq	.+14     	; 0x45b0 <MENU_vidControlMenu+0x11b2>
    45a2:	fe 01       	movw	r30, r28
    45a4:	e3 5f       	subi	r30, 0xF3	; 243
    45a6:	fe 4f       	sbci	r31, 0xFE	; 254
    45a8:	80 81       	ld	r24, Z
    45aa:	8f 32       	cpi	r24, 0x2F	; 47
    45ac:	09 f0       	breq	.+2      	; 0x45b0 <MENU_vidControlMenu+0x11b2>
    45ae:	d9 cb       	rjmp	.-2126   	; 0x3d62 <MENU_vidControlMenu+0x964>
					Local_u8Choice = 0;
    45b0:	fe 01       	movw	r30, r28
    45b2:	e3 5f       	subi	r30, 0xF3	; 243
    45b4:	fe 4f       	sbci	r31, 0xFE	; 254
    45b6:	10 82       	st	Z, r1
				case '/':
					break;
				case '-':
					break;
				}
			} while (Local_u8Choice != '-' && Local_u8Choice != '/');
    45b8:	fe 01       	movw	r30, r28
    45ba:	e3 5f       	subi	r30, 0xF3	; 243
    45bc:	fe 4f       	sbci	r31, 0xFE	; 254
    45be:	80 81       	ld	r24, Z
    45c0:	8d 32       	cpi	r24, 0x2D	; 45
    45c2:	41 f0       	breq	.+16     	; 0x45d4 <MENU_vidControlMenu+0x11d6>
    45c4:	fe 01       	movw	r30, r28
    45c6:	e3 5f       	subi	r30, 0xF3	; 243
    45c8:	fe 4f       	sbci	r31, 0xFE	; 254
    45ca:	80 81       	ld	r24, Z
    45cc:	8f 32       	cpi	r24, 0x2F	; 47
    45ce:	11 f0       	breq	.+4      	; 0x45d4 <MENU_vidControlMenu+0x11d6>
    45d0:	0c 94 50 1a 	jmp	0x34a0	; 0x34a0 <MENU_vidControlMenu+0xa2>
			Local_u8Choice = 0;
    45d4:	fe 01       	movw	r30, r28
    45d6:	e3 5f       	subi	r30, 0xF3	; 243
    45d8:	fe 4f       	sbci	r31, 0xFE	; 254
    45da:	10 82       	st	Z, r1
    45dc:	0c 94 10 1a 	jmp	0x3420	; 0x3420 <MENU_vidControlMenu+0x22>
			break;
		case '2':
			do
			{
				LCD_Clear_Display();
    45e0:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_Clear_Display>
				LCD_enuSendString("1:Room1 2:Room2");
    45e4:	82 e4       	ldi	r24, 0x42	; 66
    45e6:	91 e0       	ldi	r25, 0x01	; 1
    45e8:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
				LCD_enuChangePosition(1, 0);
    45ec:	81 e0       	ldi	r24, 0x01	; 1
    45ee:	60 e0       	ldi	r22, 0x00	; 0
    45f0:	0e 94 1e 12 	call	0x243c	; 0x243c <LCD_enuChangePosition>
				LCD_enuSendString("3:Room3");
    45f4:	87 ed       	ldi	r24, 0xD7	; 215
    45f6:	91 e0       	ldi	r25, 0x01	; 1
    45f8:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
				Local_u8Choice = GetChioce();
    45fc:	0e 94 28 2b 	call	0x5650	; 0x5650 <GetChioce>
    4600:	fe 01       	movw	r30, r28
    4602:	e3 5f       	subi	r30, 0xF3	; 243
    4604:	fe 4f       	sbci	r31, 0xFE	; 254
    4606:	80 83       	st	Z, r24
				switch (Local_u8Choice)
    4608:	fe 01       	movw	r30, r28
    460a:	e3 5f       	subi	r30, 0xF3	; 243
    460c:	fe 4f       	sbci	r31, 0xFE	; 254
    460e:	80 81       	ld	r24, Z
    4610:	28 2f       	mov	r18, r24
    4612:	30 e0       	ldi	r19, 0x00	; 0
    4614:	c6 5e       	subi	r28, 0xE6	; 230
    4616:	de 4f       	sbci	r29, 0xFE	; 254
    4618:	39 83       	std	Y+1, r19	; 0x01
    461a:	28 83       	st	Y, r18
    461c:	ca 51       	subi	r28, 0x1A	; 26
    461e:	d1 40       	sbci	r29, 0x01	; 1
    4620:	c6 5e       	subi	r28, 0xE6	; 230
    4622:	de 4f       	sbci	r29, 0xFE	; 254
    4624:	88 81       	ld	r24, Y
    4626:	99 81       	ldd	r25, Y+1	; 0x01
    4628:	ca 51       	subi	r28, 0x1A	; 26
    462a:	d1 40       	sbci	r29, 0x01	; 1
    462c:	82 33       	cpi	r24, 0x32	; 50
    462e:	91 05       	cpc	r25, r1
    4630:	b9 f0       	breq	.+46     	; 0x4660 <MENU_vidControlMenu+0x1262>
    4632:	c6 5e       	subi	r28, 0xE6	; 230
    4634:	de 4f       	sbci	r29, 0xFE	; 254
    4636:	e8 81       	ld	r30, Y
    4638:	f9 81       	ldd	r31, Y+1	; 0x01
    463a:	ca 51       	subi	r28, 0x1A	; 26
    463c:	d1 40       	sbci	r29, 0x01	; 1
    463e:	e3 33       	cpi	r30, 0x33	; 51
    4640:	f1 05       	cpc	r31, r1
    4642:	a1 f0       	breq	.+40     	; 0x466c <MENU_vidControlMenu+0x126e>
    4644:	c6 5e       	subi	r28, 0xE6	; 230
    4646:	de 4f       	sbci	r29, 0xFE	; 254
    4648:	28 81       	ld	r18, Y
    464a:	39 81       	ldd	r19, Y+1	; 0x01
    464c:	ca 51       	subi	r28, 0x1A	; 26
    464e:	d1 40       	sbci	r29, 0x01	; 1
    4650:	21 33       	cpi	r18, 0x31	; 49
    4652:	31 05       	cpc	r19, r1
    4654:	81 f4       	brne	.+32     	; 0x4676 <MENU_vidControlMenu+0x1278>
				{
				case '1':
					Local_u8RoomOffset = 0;
    4656:	fe 01       	movw	r30, r28
    4658:	e5 5f       	subi	r30, 0xF5	; 245
    465a:	fe 4f       	sbci	r31, 0xFE	; 254
    465c:	10 82       	st	Z, r1
    465e:	0b c0       	rjmp	.+22     	; 0x4676 <MENU_vidControlMenu+0x1278>
					break;
				case '2':
					Local_u8RoomOffset = 10;
    4660:	fe 01       	movw	r30, r28
    4662:	e5 5f       	subi	r30, 0xF5	; 245
    4664:	fe 4f       	sbci	r31, 0xFE	; 254
    4666:	8a e0       	ldi	r24, 0x0A	; 10
    4668:	80 83       	st	Z, r24
    466a:	05 c0       	rjmp	.+10     	; 0x4676 <MENU_vidControlMenu+0x1278>
					break;
				case '3':
					Local_u8RoomOffset = 20;
    466c:	fe 01       	movw	r30, r28
    466e:	e5 5f       	subi	r30, 0xF5	; 245
    4670:	fe 4f       	sbci	r31, 0xFE	; 254
    4672:	84 e1       	ldi	r24, 0x14	; 20
    4674:	80 83       	st	Z, r24
				case '/':
					break;
				case '-':
					break;
				}
				if (Local_u8Choice == '-')
    4676:	fe 01       	movw	r30, r28
    4678:	e3 5f       	subi	r30, 0xF3	; 243
    467a:	fe 4f       	sbci	r31, 0xFE	; 254
    467c:	80 81       	ld	r24, Z
    467e:	8d 32       	cpi	r24, 0x2D	; 45
    4680:	09 f4       	brne	.+2      	; 0x4684 <MENU_vidControlMenu+0x1286>
    4682:	ff c6       	rjmp	.+3582   	; 0x5482 <MENU_vidControlMenu+0x2084>
					break;
				do
				{
					LCD_Clear_Display();
    4684:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_Clear_Display>
					LCD_enuSendString("1: Lights");
    4688:	8f ed       	ldi	r24, 0xDF	; 223
    468a:	91 e0       	ldi	r25, 0x01	; 1
    468c:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
					LCD_enuChangePosition(1, 0);
    4690:	81 e0       	ldi	r24, 0x01	; 1
    4692:	60 e0       	ldi	r22, 0x00	; 0
    4694:	0e 94 1e 12 	call	0x243c	; 0x243c <LCD_enuChangePosition>
					LCD_enuSendString("2: Conditioner v");
    4698:	89 ee       	ldi	r24, 0xE9	; 233
    469a:	91 e0       	ldi	r25, 0x01	; 1
    469c:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
					Local_u8Choice = GetChioce();
    46a0:	0e 94 28 2b 	call	0x5650	; 0x5650 <GetChioce>
    46a4:	fe 01       	movw	r30, r28
    46a6:	e3 5f       	subi	r30, 0xF3	; 243
    46a8:	fe 4f       	sbci	r31, 0xFE	; 254
    46aa:	80 83       	st	Z, r24
					switch (Local_u8Choice)
    46ac:	fe 01       	movw	r30, r28
    46ae:	e3 5f       	subi	r30, 0xF3	; 243
    46b0:	fe 4f       	sbci	r31, 0xFE	; 254
    46b2:	80 81       	ld	r24, Z
    46b4:	e8 2f       	mov	r30, r24
    46b6:	f0 e0       	ldi	r31, 0x00	; 0
    46b8:	c8 5e       	subi	r28, 0xE8	; 232
    46ba:	de 4f       	sbci	r29, 0xFE	; 254
    46bc:	f9 83       	std	Y+1, r31	; 0x01
    46be:	e8 83       	st	Y, r30
    46c0:	c8 51       	subi	r28, 0x18	; 24
    46c2:	d1 40       	sbci	r29, 0x01	; 1
    46c4:	c8 5e       	subi	r28, 0xE8	; 232
    46c6:	de 4f       	sbci	r29, 0xFE	; 254
    46c8:	28 81       	ld	r18, Y
    46ca:	39 81       	ldd	r19, Y+1	; 0x01
    46cc:	c8 51       	subi	r28, 0x18	; 24
    46ce:	d1 40       	sbci	r29, 0x01	; 1
    46d0:	21 33       	cpi	r18, 0x31	; 49
    46d2:	31 05       	cpc	r19, r1
    46d4:	a9 f0       	breq	.+42     	; 0x4700 <MENU_vidControlMenu+0x1302>
    46d6:	c8 5e       	subi	r28, 0xE8	; 232
    46d8:	de 4f       	sbci	r29, 0xFE	; 254
    46da:	88 81       	ld	r24, Y
    46dc:	99 81       	ldd	r25, Y+1	; 0x01
    46de:	c8 51       	subi	r28, 0x18	; 24
    46e0:	d1 40       	sbci	r29, 0x01	; 1
    46e2:	82 33       	cpi	r24, 0x32	; 50
    46e4:	91 05       	cpc	r25, r1
    46e6:	09 f4       	brne	.+2      	; 0x46ea <MENU_vidControlMenu+0x12ec>
    46e8:	e0 c1       	rjmp	.+960    	; 0x4aaa <MENU_vidControlMenu+0x16ac>
    46ea:	c8 5e       	subi	r28, 0xE8	; 232
    46ec:	de 4f       	sbci	r29, 0xFE	; 254
    46ee:	e8 81       	ld	r30, Y
    46f0:	f9 81       	ldd	r31, Y+1	; 0x01
    46f2:	c8 51       	subi	r28, 0x18	; 24
    46f4:	d1 40       	sbci	r29, 0x01	; 1
    46f6:	ea 32       	cpi	r30, 0x2A	; 42
    46f8:	f1 05       	cpc	r31, r1
    46fa:	09 f4       	brne	.+2      	; 0x46fe <MENU_vidControlMenu+0x1300>
    46fc:	ab c3       	rjmp	.+1878   	; 0x4e54 <MENU_vidControlMenu+0x1a56>
    46fe:	a3 c6       	rjmp	.+3398   	; 0x5446 <MENU_vidControlMenu+0x2048>
					{
					case '1':
						do
						{
							LCD_Clear_Display();
    4700:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_Clear_Display>
							LCD_enuSendString("1: Turn On");
    4704:	8a ef       	ldi	r24, 0xFA	; 250
    4706:	91 e0       	ldi	r25, 0x01	; 1
    4708:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
							LCD_enuChangePosition(1, 0);
    470c:	81 e0       	ldi	r24, 0x01	; 1
    470e:	60 e0       	ldi	r22, 0x00	; 0
    4710:	0e 94 1e 12 	call	0x243c	; 0x243c <LCD_enuChangePosition>
							LCD_enuSendString("2: Turn Off");
    4714:	85 e0       	ldi	r24, 0x05	; 5
    4716:	92 e0       	ldi	r25, 0x02	; 2
    4718:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
							Local_u8Choice = GetChioce();
    471c:	0e 94 28 2b 	call	0x5650	; 0x5650 <GetChioce>
    4720:	fe 01       	movw	r30, r28
    4722:	e3 5f       	subi	r30, 0xF3	; 243
    4724:	fe 4f       	sbci	r31, 0xFE	; 254
    4726:	80 83       	st	Z, r24
							switch (Local_u8Choice)
    4728:	fe 01       	movw	r30, r28
    472a:	e3 5f       	subi	r30, 0xF3	; 243
    472c:	fe 4f       	sbci	r31, 0xFE	; 254
    472e:	80 81       	ld	r24, Z
    4730:	28 2f       	mov	r18, r24
    4732:	30 e0       	ldi	r19, 0x00	; 0
    4734:	ca 5e       	subi	r28, 0xEA	; 234
    4736:	de 4f       	sbci	r29, 0xFE	; 254
    4738:	39 83       	std	Y+1, r19	; 0x01
    473a:	28 83       	st	Y, r18
    473c:	c6 51       	subi	r28, 0x16	; 22
    473e:	d1 40       	sbci	r29, 0x01	; 1
    4740:	ca 5e       	subi	r28, 0xEA	; 234
    4742:	de 4f       	sbci	r29, 0xFE	; 254
    4744:	88 81       	ld	r24, Y
    4746:	99 81       	ldd	r25, Y+1	; 0x01
    4748:	c6 51       	subi	r28, 0x16	; 22
    474a:	d1 40       	sbci	r29, 0x01	; 1
    474c:	81 33       	cpi	r24, 0x31	; 49
    474e:	91 05       	cpc	r25, r1
    4750:	59 f0       	breq	.+22     	; 0x4768 <MENU_vidControlMenu+0x136a>
    4752:	ca 5e       	subi	r28, 0xEA	; 234
    4754:	de 4f       	sbci	r29, 0xFE	; 254
    4756:	e8 81       	ld	r30, Y
    4758:	f9 81       	ldd	r31, Y+1	; 0x01
    475a:	c6 51       	subi	r28, 0x16	; 22
    475c:	d1 40       	sbci	r29, 0x01	; 1
    475e:	e2 33       	cpi	r30, 0x32	; 50
    4760:	f1 05       	cpc	r31, r1
    4762:	09 f4       	brne	.+2      	; 0x4766 <MENU_vidControlMenu+0x1368>
    4764:	c9 c0       	rjmp	.+402    	; 0x48f8 <MENU_vidControlMenu+0x14fa>
    4766:	8f c1       	rjmp	.+798    	; 0x4a86 <MENU_vidControlMenu+0x1688>
							{
							case '1':

								MENU_vidSendInstruction(Local_u8RoomOffset + 6, 0);
    4768:	fe 01       	movw	r30, r28
    476a:	e5 5f       	subi	r30, 0xF5	; 245
    476c:	fe 4f       	sbci	r31, 0xFE	; 254
    476e:	80 81       	ld	r24, Z
    4770:	8a 5f       	subi	r24, 0xFA	; 250
    4772:	60 e0       	ldi	r22, 0x00	; 0
    4774:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <MENU_vidSendInstruction>

								LCD_Clear_Display();
    4778:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_Clear_Display>
								LCD_enuSendString("Light turned On");
    477c:	81 e1       	ldi	r24, 0x11	; 17
    477e:	92 e0       	ldi	r25, 0x02	; 2
    4780:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
    4784:	fe 01       	movw	r30, r28
    4786:	e5 58       	subi	r30, 0x85	; 133
    4788:	ff 4f       	sbci	r31, 0xFF	; 255
    478a:	80 e0       	ldi	r24, 0x00	; 0
    478c:	90 e0       	ldi	r25, 0x00	; 0
    478e:	aa ef       	ldi	r26, 0xFA	; 250
    4790:	b3 e4       	ldi	r27, 0x43	; 67
    4792:	80 83       	st	Z, r24
    4794:	91 83       	std	Z+1, r25	; 0x01
    4796:	a2 83       	std	Z+2, r26	; 0x02
    4798:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    479a:	8e 01       	movw	r16, r28
    479c:	09 58       	subi	r16, 0x89	; 137
    479e:	1f 4f       	sbci	r17, 0xFF	; 255
    47a0:	fe 01       	movw	r30, r28
    47a2:	e5 58       	subi	r30, 0x85	; 133
    47a4:	ff 4f       	sbci	r31, 0xFF	; 255
    47a6:	60 81       	ld	r22, Z
    47a8:	71 81       	ldd	r23, Z+1	; 0x01
    47aa:	82 81       	ldd	r24, Z+2	; 0x02
    47ac:	93 81       	ldd	r25, Z+3	; 0x03
    47ae:	20 e0       	ldi	r18, 0x00	; 0
    47b0:	30 e0       	ldi	r19, 0x00	; 0
    47b2:	4a e7       	ldi	r20, 0x7A	; 122
    47b4:	55 e4       	ldi	r21, 0x45	; 69
    47b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47ba:	dc 01       	movw	r26, r24
    47bc:	cb 01       	movw	r24, r22
    47be:	f8 01       	movw	r30, r16
    47c0:	80 83       	st	Z, r24
    47c2:	91 83       	std	Z+1, r25	; 0x01
    47c4:	a2 83       	std	Z+2, r26	; 0x02
    47c6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    47c8:	fe 01       	movw	r30, r28
    47ca:	e9 58       	subi	r30, 0x89	; 137
    47cc:	ff 4f       	sbci	r31, 0xFF	; 255
    47ce:	60 81       	ld	r22, Z
    47d0:	71 81       	ldd	r23, Z+1	; 0x01
    47d2:	82 81       	ldd	r24, Z+2	; 0x02
    47d4:	93 81       	ldd	r25, Z+3	; 0x03
    47d6:	20 e0       	ldi	r18, 0x00	; 0
    47d8:	30 e0       	ldi	r19, 0x00	; 0
    47da:	40 e8       	ldi	r20, 0x80	; 128
    47dc:	5f e3       	ldi	r21, 0x3F	; 63
    47de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    47e2:	88 23       	and	r24, r24
    47e4:	44 f4       	brge	.+16     	; 0x47f6 <MENU_vidControlMenu+0x13f8>
		__ticks = 1;
    47e6:	fe 01       	movw	r30, r28
    47e8:	eb 58       	subi	r30, 0x8B	; 139
    47ea:	ff 4f       	sbci	r31, 0xFF	; 255
    47ec:	81 e0       	ldi	r24, 0x01	; 1
    47ee:	90 e0       	ldi	r25, 0x00	; 0
    47f0:	91 83       	std	Z+1, r25	; 0x01
    47f2:	80 83       	st	Z, r24
    47f4:	64 c0       	rjmp	.+200    	; 0x48be <MENU_vidControlMenu+0x14c0>
	else if (__tmp > 65535)
    47f6:	fe 01       	movw	r30, r28
    47f8:	e9 58       	subi	r30, 0x89	; 137
    47fa:	ff 4f       	sbci	r31, 0xFF	; 255
    47fc:	60 81       	ld	r22, Z
    47fe:	71 81       	ldd	r23, Z+1	; 0x01
    4800:	82 81       	ldd	r24, Z+2	; 0x02
    4802:	93 81       	ldd	r25, Z+3	; 0x03
    4804:	20 e0       	ldi	r18, 0x00	; 0
    4806:	3f ef       	ldi	r19, 0xFF	; 255
    4808:	4f e7       	ldi	r20, 0x7F	; 127
    480a:	57 e4       	ldi	r21, 0x47	; 71
    480c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4810:	18 16       	cp	r1, r24
    4812:	0c f0       	brlt	.+2      	; 0x4816 <MENU_vidControlMenu+0x1418>
    4814:	43 c0       	rjmp	.+134    	; 0x489c <MENU_vidControlMenu+0x149e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4816:	fe 01       	movw	r30, r28
    4818:	e5 58       	subi	r30, 0x85	; 133
    481a:	ff 4f       	sbci	r31, 0xFF	; 255
    481c:	60 81       	ld	r22, Z
    481e:	71 81       	ldd	r23, Z+1	; 0x01
    4820:	82 81       	ldd	r24, Z+2	; 0x02
    4822:	93 81       	ldd	r25, Z+3	; 0x03
    4824:	20 e0       	ldi	r18, 0x00	; 0
    4826:	30 e0       	ldi	r19, 0x00	; 0
    4828:	40 e2       	ldi	r20, 0x20	; 32
    482a:	51 e4       	ldi	r21, 0x41	; 65
    482c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4830:	dc 01       	movw	r26, r24
    4832:	cb 01       	movw	r24, r22
    4834:	8e 01       	movw	r16, r28
    4836:	0b 58       	subi	r16, 0x8B	; 139
    4838:	1f 4f       	sbci	r17, 0xFF	; 255
    483a:	bc 01       	movw	r22, r24
    483c:	cd 01       	movw	r24, r26
    483e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4842:	dc 01       	movw	r26, r24
    4844:	cb 01       	movw	r24, r22
    4846:	f8 01       	movw	r30, r16
    4848:	91 83       	std	Z+1, r25	; 0x01
    484a:	80 83       	st	Z, r24
    484c:	1f c0       	rjmp	.+62     	; 0x488c <MENU_vidControlMenu+0x148e>
    484e:	fe 01       	movw	r30, r28
    4850:	ed 58       	subi	r30, 0x8D	; 141
    4852:	ff 4f       	sbci	r31, 0xFF	; 255
    4854:	80 e9       	ldi	r24, 0x90	; 144
    4856:	91 e0       	ldi	r25, 0x01	; 1
    4858:	91 83       	std	Z+1, r25	; 0x01
    485a:	80 83       	st	Z, r24
    485c:	fe 01       	movw	r30, r28
    485e:	ed 58       	subi	r30, 0x8D	; 141
    4860:	ff 4f       	sbci	r31, 0xFF	; 255
    4862:	80 81       	ld	r24, Z
    4864:	91 81       	ldd	r25, Z+1	; 0x01
    4866:	01 97       	sbiw	r24, 0x01	; 1
    4868:	f1 f7       	brne	.-4      	; 0x4866 <MENU_vidControlMenu+0x1468>
    486a:	fe 01       	movw	r30, r28
    486c:	ed 58       	subi	r30, 0x8D	; 141
    486e:	ff 4f       	sbci	r31, 0xFF	; 255
    4870:	91 83       	std	Z+1, r25	; 0x01
    4872:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4874:	de 01       	movw	r26, r28
    4876:	ab 58       	subi	r26, 0x8B	; 139
    4878:	bf 4f       	sbci	r27, 0xFF	; 255
    487a:	fe 01       	movw	r30, r28
    487c:	eb 58       	subi	r30, 0x8B	; 139
    487e:	ff 4f       	sbci	r31, 0xFF	; 255
    4880:	80 81       	ld	r24, Z
    4882:	91 81       	ldd	r25, Z+1	; 0x01
    4884:	01 97       	sbiw	r24, 0x01	; 1
    4886:	11 96       	adiw	r26, 0x01	; 1
    4888:	9c 93       	st	X, r25
    488a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    488c:	fe 01       	movw	r30, r28
    488e:	eb 58       	subi	r30, 0x8B	; 139
    4890:	ff 4f       	sbci	r31, 0xFF	; 255
    4892:	80 81       	ld	r24, Z
    4894:	91 81       	ldd	r25, Z+1	; 0x01
    4896:	00 97       	sbiw	r24, 0x00	; 0
    4898:	d1 f6       	brne	.-76     	; 0x484e <MENU_vidControlMenu+0x1450>
    489a:	28 c0       	rjmp	.+80     	; 0x48ec <MENU_vidControlMenu+0x14ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    489c:	8e 01       	movw	r16, r28
    489e:	0b 58       	subi	r16, 0x8B	; 139
    48a0:	1f 4f       	sbci	r17, 0xFF	; 255
    48a2:	fe 01       	movw	r30, r28
    48a4:	e9 58       	subi	r30, 0x89	; 137
    48a6:	ff 4f       	sbci	r31, 0xFF	; 255
    48a8:	60 81       	ld	r22, Z
    48aa:	71 81       	ldd	r23, Z+1	; 0x01
    48ac:	82 81       	ldd	r24, Z+2	; 0x02
    48ae:	93 81       	ldd	r25, Z+3	; 0x03
    48b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48b4:	dc 01       	movw	r26, r24
    48b6:	cb 01       	movw	r24, r22
    48b8:	f8 01       	movw	r30, r16
    48ba:	91 83       	std	Z+1, r25	; 0x01
    48bc:	80 83       	st	Z, r24
    48be:	de 01       	movw	r26, r28
    48c0:	af 58       	subi	r26, 0x8F	; 143
    48c2:	bf 4f       	sbci	r27, 0xFF	; 255
    48c4:	fe 01       	movw	r30, r28
    48c6:	eb 58       	subi	r30, 0x8B	; 139
    48c8:	ff 4f       	sbci	r31, 0xFF	; 255
    48ca:	80 81       	ld	r24, Z
    48cc:	91 81       	ldd	r25, Z+1	; 0x01
    48ce:	11 96       	adiw	r26, 0x01	; 1
    48d0:	9c 93       	st	X, r25
    48d2:	8e 93       	st	-X, r24
    48d4:	fe 01       	movw	r30, r28
    48d6:	ef 58       	subi	r30, 0x8F	; 143
    48d8:	ff 4f       	sbci	r31, 0xFF	; 255
    48da:	80 81       	ld	r24, Z
    48dc:	91 81       	ldd	r25, Z+1	; 0x01
    48de:	01 97       	sbiw	r24, 0x01	; 1
    48e0:	f1 f7       	brne	.-4      	; 0x48de <MENU_vidControlMenu+0x14e0>
    48e2:	fe 01       	movw	r30, r28
    48e4:	ef 58       	subi	r30, 0x8F	; 143
    48e6:	ff 4f       	sbci	r31, 0xFF	; 255
    48e8:	91 83       	std	Z+1, r25	; 0x01
    48ea:	80 83       	st	Z, r24
								_delay_ms(500);
								Local_u8Choice = '-';
    48ec:	fe 01       	movw	r30, r28
    48ee:	e3 5f       	subi	r30, 0xF3	; 243
    48f0:	fe 4f       	sbci	r31, 0xFE	; 254
    48f2:	8d e2       	ldi	r24, 0x2D	; 45
    48f4:	80 83       	st	Z, r24
    48f6:	c7 c0       	rjmp	.+398    	; 0x4a86 <MENU_vidControlMenu+0x1688>
								break;
							case '2':
								MENU_vidSendInstruction(Local_u8RoomOffset + 7, 0);
    48f8:	fe 01       	movw	r30, r28
    48fa:	e5 5f       	subi	r30, 0xF5	; 245
    48fc:	fe 4f       	sbci	r31, 0xFE	; 254
    48fe:	80 81       	ld	r24, Z
    4900:	89 5f       	subi	r24, 0xF9	; 249
    4902:	60 e0       	ldi	r22, 0x00	; 0
    4904:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <MENU_vidSendInstruction>

								LCD_Clear_Display();
    4908:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_Clear_Display>
								LCD_enuSendString("Light turned Off");
    490c:	81 e2       	ldi	r24, 0x21	; 33
    490e:	92 e0       	ldi	r25, 0x02	; 2
    4910:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
    4914:	fe 01       	movw	r30, r28
    4916:	e3 59       	subi	r30, 0x93	; 147
    4918:	ff 4f       	sbci	r31, 0xFF	; 255
    491a:	80 e0       	ldi	r24, 0x00	; 0
    491c:	90 e0       	ldi	r25, 0x00	; 0
    491e:	aa ef       	ldi	r26, 0xFA	; 250
    4920:	b3 e4       	ldi	r27, 0x43	; 67
    4922:	80 83       	st	Z, r24
    4924:	91 83       	std	Z+1, r25	; 0x01
    4926:	a2 83       	std	Z+2, r26	; 0x02
    4928:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    492a:	8e 01       	movw	r16, r28
    492c:	07 59       	subi	r16, 0x97	; 151
    492e:	1f 4f       	sbci	r17, 0xFF	; 255
    4930:	fe 01       	movw	r30, r28
    4932:	e3 59       	subi	r30, 0x93	; 147
    4934:	ff 4f       	sbci	r31, 0xFF	; 255
    4936:	60 81       	ld	r22, Z
    4938:	71 81       	ldd	r23, Z+1	; 0x01
    493a:	82 81       	ldd	r24, Z+2	; 0x02
    493c:	93 81       	ldd	r25, Z+3	; 0x03
    493e:	20 e0       	ldi	r18, 0x00	; 0
    4940:	30 e0       	ldi	r19, 0x00	; 0
    4942:	4a e7       	ldi	r20, 0x7A	; 122
    4944:	55 e4       	ldi	r21, 0x45	; 69
    4946:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    494a:	dc 01       	movw	r26, r24
    494c:	cb 01       	movw	r24, r22
    494e:	f8 01       	movw	r30, r16
    4950:	80 83       	st	Z, r24
    4952:	91 83       	std	Z+1, r25	; 0x01
    4954:	a2 83       	std	Z+2, r26	; 0x02
    4956:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4958:	fe 01       	movw	r30, r28
    495a:	e7 59       	subi	r30, 0x97	; 151
    495c:	ff 4f       	sbci	r31, 0xFF	; 255
    495e:	60 81       	ld	r22, Z
    4960:	71 81       	ldd	r23, Z+1	; 0x01
    4962:	82 81       	ldd	r24, Z+2	; 0x02
    4964:	93 81       	ldd	r25, Z+3	; 0x03
    4966:	20 e0       	ldi	r18, 0x00	; 0
    4968:	30 e0       	ldi	r19, 0x00	; 0
    496a:	40 e8       	ldi	r20, 0x80	; 128
    496c:	5f e3       	ldi	r21, 0x3F	; 63
    496e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4972:	88 23       	and	r24, r24
    4974:	44 f4       	brge	.+16     	; 0x4986 <MENU_vidControlMenu+0x1588>
		__ticks = 1;
    4976:	fe 01       	movw	r30, r28
    4978:	e9 59       	subi	r30, 0x99	; 153
    497a:	ff 4f       	sbci	r31, 0xFF	; 255
    497c:	81 e0       	ldi	r24, 0x01	; 1
    497e:	90 e0       	ldi	r25, 0x00	; 0
    4980:	91 83       	std	Z+1, r25	; 0x01
    4982:	80 83       	st	Z, r24
    4984:	64 c0       	rjmp	.+200    	; 0x4a4e <MENU_vidControlMenu+0x1650>
	else if (__tmp > 65535)
    4986:	fe 01       	movw	r30, r28
    4988:	e7 59       	subi	r30, 0x97	; 151
    498a:	ff 4f       	sbci	r31, 0xFF	; 255
    498c:	60 81       	ld	r22, Z
    498e:	71 81       	ldd	r23, Z+1	; 0x01
    4990:	82 81       	ldd	r24, Z+2	; 0x02
    4992:	93 81       	ldd	r25, Z+3	; 0x03
    4994:	20 e0       	ldi	r18, 0x00	; 0
    4996:	3f ef       	ldi	r19, 0xFF	; 255
    4998:	4f e7       	ldi	r20, 0x7F	; 127
    499a:	57 e4       	ldi	r21, 0x47	; 71
    499c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    49a0:	18 16       	cp	r1, r24
    49a2:	0c f0       	brlt	.+2      	; 0x49a6 <MENU_vidControlMenu+0x15a8>
    49a4:	43 c0       	rjmp	.+134    	; 0x4a2c <MENU_vidControlMenu+0x162e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49a6:	fe 01       	movw	r30, r28
    49a8:	e3 59       	subi	r30, 0x93	; 147
    49aa:	ff 4f       	sbci	r31, 0xFF	; 255
    49ac:	60 81       	ld	r22, Z
    49ae:	71 81       	ldd	r23, Z+1	; 0x01
    49b0:	82 81       	ldd	r24, Z+2	; 0x02
    49b2:	93 81       	ldd	r25, Z+3	; 0x03
    49b4:	20 e0       	ldi	r18, 0x00	; 0
    49b6:	30 e0       	ldi	r19, 0x00	; 0
    49b8:	40 e2       	ldi	r20, 0x20	; 32
    49ba:	51 e4       	ldi	r21, 0x41	; 65
    49bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49c0:	dc 01       	movw	r26, r24
    49c2:	cb 01       	movw	r24, r22
    49c4:	8e 01       	movw	r16, r28
    49c6:	09 59       	subi	r16, 0x99	; 153
    49c8:	1f 4f       	sbci	r17, 0xFF	; 255
    49ca:	bc 01       	movw	r22, r24
    49cc:	cd 01       	movw	r24, r26
    49ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49d2:	dc 01       	movw	r26, r24
    49d4:	cb 01       	movw	r24, r22
    49d6:	f8 01       	movw	r30, r16
    49d8:	91 83       	std	Z+1, r25	; 0x01
    49da:	80 83       	st	Z, r24
    49dc:	1f c0       	rjmp	.+62     	; 0x4a1c <MENU_vidControlMenu+0x161e>
    49de:	fe 01       	movw	r30, r28
    49e0:	eb 59       	subi	r30, 0x9B	; 155
    49e2:	ff 4f       	sbci	r31, 0xFF	; 255
    49e4:	80 e9       	ldi	r24, 0x90	; 144
    49e6:	91 e0       	ldi	r25, 0x01	; 1
    49e8:	91 83       	std	Z+1, r25	; 0x01
    49ea:	80 83       	st	Z, r24
    49ec:	fe 01       	movw	r30, r28
    49ee:	eb 59       	subi	r30, 0x9B	; 155
    49f0:	ff 4f       	sbci	r31, 0xFF	; 255
    49f2:	80 81       	ld	r24, Z
    49f4:	91 81       	ldd	r25, Z+1	; 0x01
    49f6:	01 97       	sbiw	r24, 0x01	; 1
    49f8:	f1 f7       	brne	.-4      	; 0x49f6 <MENU_vidControlMenu+0x15f8>
    49fa:	fe 01       	movw	r30, r28
    49fc:	eb 59       	subi	r30, 0x9B	; 155
    49fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4a00:	91 83       	std	Z+1, r25	; 0x01
    4a02:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a04:	de 01       	movw	r26, r28
    4a06:	a9 59       	subi	r26, 0x99	; 153
    4a08:	bf 4f       	sbci	r27, 0xFF	; 255
    4a0a:	fe 01       	movw	r30, r28
    4a0c:	e9 59       	subi	r30, 0x99	; 153
    4a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a10:	80 81       	ld	r24, Z
    4a12:	91 81       	ldd	r25, Z+1	; 0x01
    4a14:	01 97       	sbiw	r24, 0x01	; 1
    4a16:	11 96       	adiw	r26, 0x01	; 1
    4a18:	9c 93       	st	X, r25
    4a1a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a1c:	fe 01       	movw	r30, r28
    4a1e:	e9 59       	subi	r30, 0x99	; 153
    4a20:	ff 4f       	sbci	r31, 0xFF	; 255
    4a22:	80 81       	ld	r24, Z
    4a24:	91 81       	ldd	r25, Z+1	; 0x01
    4a26:	00 97       	sbiw	r24, 0x00	; 0
    4a28:	d1 f6       	brne	.-76     	; 0x49de <MENU_vidControlMenu+0x15e0>
    4a2a:	28 c0       	rjmp	.+80     	; 0x4a7c <MENU_vidControlMenu+0x167e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a2c:	8e 01       	movw	r16, r28
    4a2e:	09 59       	subi	r16, 0x99	; 153
    4a30:	1f 4f       	sbci	r17, 0xFF	; 255
    4a32:	fe 01       	movw	r30, r28
    4a34:	e7 59       	subi	r30, 0x97	; 151
    4a36:	ff 4f       	sbci	r31, 0xFF	; 255
    4a38:	60 81       	ld	r22, Z
    4a3a:	71 81       	ldd	r23, Z+1	; 0x01
    4a3c:	82 81       	ldd	r24, Z+2	; 0x02
    4a3e:	93 81       	ldd	r25, Z+3	; 0x03
    4a40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a44:	dc 01       	movw	r26, r24
    4a46:	cb 01       	movw	r24, r22
    4a48:	f8 01       	movw	r30, r16
    4a4a:	91 83       	std	Z+1, r25	; 0x01
    4a4c:	80 83       	st	Z, r24
    4a4e:	de 01       	movw	r26, r28
    4a50:	ad 59       	subi	r26, 0x9D	; 157
    4a52:	bf 4f       	sbci	r27, 0xFF	; 255
    4a54:	fe 01       	movw	r30, r28
    4a56:	e9 59       	subi	r30, 0x99	; 153
    4a58:	ff 4f       	sbci	r31, 0xFF	; 255
    4a5a:	80 81       	ld	r24, Z
    4a5c:	91 81       	ldd	r25, Z+1	; 0x01
    4a5e:	11 96       	adiw	r26, 0x01	; 1
    4a60:	9c 93       	st	X, r25
    4a62:	8e 93       	st	-X, r24
    4a64:	fe 01       	movw	r30, r28
    4a66:	ed 59       	subi	r30, 0x9D	; 157
    4a68:	ff 4f       	sbci	r31, 0xFF	; 255
    4a6a:	80 81       	ld	r24, Z
    4a6c:	91 81       	ldd	r25, Z+1	; 0x01
    4a6e:	01 97       	sbiw	r24, 0x01	; 1
    4a70:	f1 f7       	brne	.-4      	; 0x4a6e <MENU_vidControlMenu+0x1670>
    4a72:	fe 01       	movw	r30, r28
    4a74:	ed 59       	subi	r30, 0x9D	; 157
    4a76:	ff 4f       	sbci	r31, 0xFF	; 255
    4a78:	91 83       	std	Z+1, r25	; 0x01
    4a7a:	80 83       	st	Z, r24
								_delay_ms(500);
								Local_u8Choice = '-';
    4a7c:	fe 01       	movw	r30, r28
    4a7e:	e3 5f       	subi	r30, 0xF3	; 243
    4a80:	fe 4f       	sbci	r31, 0xFE	; 254
    4a82:	8d e2       	ldi	r24, 0x2D	; 45
    4a84:	80 83       	st	Z, r24
							case '/':
								break;
							case '-':
								break;
							}
						} while (Local_u8Choice != '-' && Local_u8Choice != '/');
    4a86:	fe 01       	movw	r30, r28
    4a88:	e3 5f       	subi	r30, 0xF3	; 243
    4a8a:	fe 4f       	sbci	r31, 0xFE	; 254
    4a8c:	80 81       	ld	r24, Z
    4a8e:	8d 32       	cpi	r24, 0x2D	; 45
    4a90:	39 f0       	breq	.+14     	; 0x4aa0 <MENU_vidControlMenu+0x16a2>
    4a92:	fe 01       	movw	r30, r28
    4a94:	e3 5f       	subi	r30, 0xF3	; 243
    4a96:	fe 4f       	sbci	r31, 0xFE	; 254
    4a98:	80 81       	ld	r24, Z
    4a9a:	8f 32       	cpi	r24, 0x2F	; 47
    4a9c:	09 f0       	breq	.+2      	; 0x4aa0 <MENU_vidControlMenu+0x16a2>
    4a9e:	30 ce       	rjmp	.-928    	; 0x4700 <MENU_vidControlMenu+0x1302>
						Local_u8Choice = 0;
    4aa0:	fe 01       	movw	r30, r28
    4aa2:	e3 5f       	subi	r30, 0xF3	; 243
    4aa4:	fe 4f       	sbci	r31, 0xFE	; 254
    4aa6:	10 82       	st	Z, r1
    4aa8:	ce c4       	rjmp	.+2460   	; 0x5446 <MENU_vidControlMenu+0x2048>
						break;
					case '2':
						do
						{
							LCD_Clear_Display();
    4aaa:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_Clear_Display>
							LCD_enuSendString("1: Turn on");
    4aae:	82 e3       	ldi	r24, 0x32	; 50
    4ab0:	92 e0       	ldi	r25, 0x02	; 2
    4ab2:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
							LCD_enuChangePosition(1, 0);
    4ab6:	81 e0       	ldi	r24, 0x01	; 1
    4ab8:	60 e0       	ldi	r22, 0x00	; 0
    4aba:	0e 94 1e 12 	call	0x243c	; 0x243c <LCD_enuChangePosition>
							LCD_enuSendString("2: Turn Off");
    4abe:	85 e0       	ldi	r24, 0x05	; 5
    4ac0:	92 e0       	ldi	r25, 0x02	; 2
    4ac2:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
							Local_u8Choice = GetChioce();
    4ac6:	0e 94 28 2b 	call	0x5650	; 0x5650 <GetChioce>
    4aca:	fe 01       	movw	r30, r28
    4acc:	e3 5f       	subi	r30, 0xF3	; 243
    4ace:	fe 4f       	sbci	r31, 0xFE	; 254
    4ad0:	80 83       	st	Z, r24
							switch (Local_u8Choice)
    4ad2:	fe 01       	movw	r30, r28
    4ad4:	e3 5f       	subi	r30, 0xF3	; 243
    4ad6:	fe 4f       	sbci	r31, 0xFE	; 254
    4ad8:	80 81       	ld	r24, Z
    4ada:	28 2f       	mov	r18, r24
    4adc:	30 e0       	ldi	r19, 0x00	; 0
    4ade:	cc 5e       	subi	r28, 0xEC	; 236
    4ae0:	de 4f       	sbci	r29, 0xFE	; 254
    4ae2:	39 83       	std	Y+1, r19	; 0x01
    4ae4:	28 83       	st	Y, r18
    4ae6:	c4 51       	subi	r28, 0x14	; 20
    4ae8:	d1 40       	sbci	r29, 0x01	; 1
    4aea:	cc 5e       	subi	r28, 0xEC	; 236
    4aec:	de 4f       	sbci	r29, 0xFE	; 254
    4aee:	88 81       	ld	r24, Y
    4af0:	99 81       	ldd	r25, Y+1	; 0x01
    4af2:	c4 51       	subi	r28, 0x14	; 20
    4af4:	d1 40       	sbci	r29, 0x01	; 1
    4af6:	81 33       	cpi	r24, 0x31	; 49
    4af8:	91 05       	cpc	r25, r1
    4afa:	59 f0       	breq	.+22     	; 0x4b12 <MENU_vidControlMenu+0x1714>
    4afc:	cc 5e       	subi	r28, 0xEC	; 236
    4afe:	de 4f       	sbci	r29, 0xFE	; 254
    4b00:	e8 81       	ld	r30, Y
    4b02:	f9 81       	ldd	r31, Y+1	; 0x01
    4b04:	c4 51       	subi	r28, 0x14	; 20
    4b06:	d1 40       	sbci	r29, 0x01	; 1
    4b08:	e2 33       	cpi	r30, 0x32	; 50
    4b0a:	f1 05       	cpc	r31, r1
    4b0c:	09 f4       	brne	.+2      	; 0x4b10 <MENU_vidControlMenu+0x1712>
    4b0e:	c9 c0       	rjmp	.+402    	; 0x4ca2 <MENU_vidControlMenu+0x18a4>
    4b10:	8f c1       	rjmp	.+798    	; 0x4e30 <MENU_vidControlMenu+0x1a32>
							{
							case '1':
								MENU_vidSendInstruction(Local_u8RoomOffset + 8, 0);
    4b12:	fe 01       	movw	r30, r28
    4b14:	e5 5f       	subi	r30, 0xF5	; 245
    4b16:	fe 4f       	sbci	r31, 0xFE	; 254
    4b18:	80 81       	ld	r24, Z
    4b1a:	88 5f       	subi	r24, 0xF8	; 248
    4b1c:	60 e0       	ldi	r22, 0x00	; 0
    4b1e:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <MENU_vidSendInstruction>

								LCD_Clear_Display();
    4b22:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_Clear_Display>
								LCD_enuSendString("Cond. Turned On");
    4b26:	8d e3       	ldi	r24, 0x3D	; 61
    4b28:	92 e0       	ldi	r25, 0x02	; 2
    4b2a:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
    4b2e:	fe 01       	movw	r30, r28
    4b30:	e1 5a       	subi	r30, 0xA1	; 161
    4b32:	ff 4f       	sbci	r31, 0xFF	; 255
    4b34:	80 e0       	ldi	r24, 0x00	; 0
    4b36:	90 e0       	ldi	r25, 0x00	; 0
    4b38:	aa ef       	ldi	r26, 0xFA	; 250
    4b3a:	b3 e4       	ldi	r27, 0x43	; 67
    4b3c:	80 83       	st	Z, r24
    4b3e:	91 83       	std	Z+1, r25	; 0x01
    4b40:	a2 83       	std	Z+2, r26	; 0x02
    4b42:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b44:	8e 01       	movw	r16, r28
    4b46:	05 5a       	subi	r16, 0xA5	; 165
    4b48:	1f 4f       	sbci	r17, 0xFF	; 255
    4b4a:	fe 01       	movw	r30, r28
    4b4c:	e1 5a       	subi	r30, 0xA1	; 161
    4b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b50:	60 81       	ld	r22, Z
    4b52:	71 81       	ldd	r23, Z+1	; 0x01
    4b54:	82 81       	ldd	r24, Z+2	; 0x02
    4b56:	93 81       	ldd	r25, Z+3	; 0x03
    4b58:	20 e0       	ldi	r18, 0x00	; 0
    4b5a:	30 e0       	ldi	r19, 0x00	; 0
    4b5c:	4a e7       	ldi	r20, 0x7A	; 122
    4b5e:	55 e4       	ldi	r21, 0x45	; 69
    4b60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b64:	dc 01       	movw	r26, r24
    4b66:	cb 01       	movw	r24, r22
    4b68:	f8 01       	movw	r30, r16
    4b6a:	80 83       	st	Z, r24
    4b6c:	91 83       	std	Z+1, r25	; 0x01
    4b6e:	a2 83       	std	Z+2, r26	; 0x02
    4b70:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4b72:	fe 01       	movw	r30, r28
    4b74:	e5 5a       	subi	r30, 0xA5	; 165
    4b76:	ff 4f       	sbci	r31, 0xFF	; 255
    4b78:	60 81       	ld	r22, Z
    4b7a:	71 81       	ldd	r23, Z+1	; 0x01
    4b7c:	82 81       	ldd	r24, Z+2	; 0x02
    4b7e:	93 81       	ldd	r25, Z+3	; 0x03
    4b80:	20 e0       	ldi	r18, 0x00	; 0
    4b82:	30 e0       	ldi	r19, 0x00	; 0
    4b84:	40 e8       	ldi	r20, 0x80	; 128
    4b86:	5f e3       	ldi	r21, 0x3F	; 63
    4b88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4b8c:	88 23       	and	r24, r24
    4b8e:	44 f4       	brge	.+16     	; 0x4ba0 <MENU_vidControlMenu+0x17a2>
		__ticks = 1;
    4b90:	fe 01       	movw	r30, r28
    4b92:	e7 5a       	subi	r30, 0xA7	; 167
    4b94:	ff 4f       	sbci	r31, 0xFF	; 255
    4b96:	81 e0       	ldi	r24, 0x01	; 1
    4b98:	90 e0       	ldi	r25, 0x00	; 0
    4b9a:	91 83       	std	Z+1, r25	; 0x01
    4b9c:	80 83       	st	Z, r24
    4b9e:	64 c0       	rjmp	.+200    	; 0x4c68 <MENU_vidControlMenu+0x186a>
	else if (__tmp > 65535)
    4ba0:	fe 01       	movw	r30, r28
    4ba2:	e5 5a       	subi	r30, 0xA5	; 165
    4ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ba6:	60 81       	ld	r22, Z
    4ba8:	71 81       	ldd	r23, Z+1	; 0x01
    4baa:	82 81       	ldd	r24, Z+2	; 0x02
    4bac:	93 81       	ldd	r25, Z+3	; 0x03
    4bae:	20 e0       	ldi	r18, 0x00	; 0
    4bb0:	3f ef       	ldi	r19, 0xFF	; 255
    4bb2:	4f e7       	ldi	r20, 0x7F	; 127
    4bb4:	57 e4       	ldi	r21, 0x47	; 71
    4bb6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4bba:	18 16       	cp	r1, r24
    4bbc:	0c f0       	brlt	.+2      	; 0x4bc0 <MENU_vidControlMenu+0x17c2>
    4bbe:	43 c0       	rjmp	.+134    	; 0x4c46 <MENU_vidControlMenu+0x1848>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4bc0:	fe 01       	movw	r30, r28
    4bc2:	e1 5a       	subi	r30, 0xA1	; 161
    4bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    4bc6:	60 81       	ld	r22, Z
    4bc8:	71 81       	ldd	r23, Z+1	; 0x01
    4bca:	82 81       	ldd	r24, Z+2	; 0x02
    4bcc:	93 81       	ldd	r25, Z+3	; 0x03
    4bce:	20 e0       	ldi	r18, 0x00	; 0
    4bd0:	30 e0       	ldi	r19, 0x00	; 0
    4bd2:	40 e2       	ldi	r20, 0x20	; 32
    4bd4:	51 e4       	ldi	r21, 0x41	; 65
    4bd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bda:	dc 01       	movw	r26, r24
    4bdc:	cb 01       	movw	r24, r22
    4bde:	8e 01       	movw	r16, r28
    4be0:	07 5a       	subi	r16, 0xA7	; 167
    4be2:	1f 4f       	sbci	r17, 0xFF	; 255
    4be4:	bc 01       	movw	r22, r24
    4be6:	cd 01       	movw	r24, r26
    4be8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bec:	dc 01       	movw	r26, r24
    4bee:	cb 01       	movw	r24, r22
    4bf0:	f8 01       	movw	r30, r16
    4bf2:	91 83       	std	Z+1, r25	; 0x01
    4bf4:	80 83       	st	Z, r24
    4bf6:	1f c0       	rjmp	.+62     	; 0x4c36 <MENU_vidControlMenu+0x1838>
    4bf8:	fe 01       	movw	r30, r28
    4bfa:	e9 5a       	subi	r30, 0xA9	; 169
    4bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    4bfe:	80 e9       	ldi	r24, 0x90	; 144
    4c00:	91 e0       	ldi	r25, 0x01	; 1
    4c02:	91 83       	std	Z+1, r25	; 0x01
    4c04:	80 83       	st	Z, r24
    4c06:	fe 01       	movw	r30, r28
    4c08:	e9 5a       	subi	r30, 0xA9	; 169
    4c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c0c:	80 81       	ld	r24, Z
    4c0e:	91 81       	ldd	r25, Z+1	; 0x01
    4c10:	01 97       	sbiw	r24, 0x01	; 1
    4c12:	f1 f7       	brne	.-4      	; 0x4c10 <MENU_vidControlMenu+0x1812>
    4c14:	fe 01       	movw	r30, r28
    4c16:	e9 5a       	subi	r30, 0xA9	; 169
    4c18:	ff 4f       	sbci	r31, 0xFF	; 255
    4c1a:	91 83       	std	Z+1, r25	; 0x01
    4c1c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c1e:	de 01       	movw	r26, r28
    4c20:	a7 5a       	subi	r26, 0xA7	; 167
    4c22:	bf 4f       	sbci	r27, 0xFF	; 255
    4c24:	fe 01       	movw	r30, r28
    4c26:	e7 5a       	subi	r30, 0xA7	; 167
    4c28:	ff 4f       	sbci	r31, 0xFF	; 255
    4c2a:	80 81       	ld	r24, Z
    4c2c:	91 81       	ldd	r25, Z+1	; 0x01
    4c2e:	01 97       	sbiw	r24, 0x01	; 1
    4c30:	11 96       	adiw	r26, 0x01	; 1
    4c32:	9c 93       	st	X, r25
    4c34:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c36:	fe 01       	movw	r30, r28
    4c38:	e7 5a       	subi	r30, 0xA7	; 167
    4c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c3c:	80 81       	ld	r24, Z
    4c3e:	91 81       	ldd	r25, Z+1	; 0x01
    4c40:	00 97       	sbiw	r24, 0x00	; 0
    4c42:	d1 f6       	brne	.-76     	; 0x4bf8 <MENU_vidControlMenu+0x17fa>
    4c44:	28 c0       	rjmp	.+80     	; 0x4c96 <MENU_vidControlMenu+0x1898>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c46:	8e 01       	movw	r16, r28
    4c48:	07 5a       	subi	r16, 0xA7	; 167
    4c4a:	1f 4f       	sbci	r17, 0xFF	; 255
    4c4c:	fe 01       	movw	r30, r28
    4c4e:	e5 5a       	subi	r30, 0xA5	; 165
    4c50:	ff 4f       	sbci	r31, 0xFF	; 255
    4c52:	60 81       	ld	r22, Z
    4c54:	71 81       	ldd	r23, Z+1	; 0x01
    4c56:	82 81       	ldd	r24, Z+2	; 0x02
    4c58:	93 81       	ldd	r25, Z+3	; 0x03
    4c5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c5e:	dc 01       	movw	r26, r24
    4c60:	cb 01       	movw	r24, r22
    4c62:	f8 01       	movw	r30, r16
    4c64:	91 83       	std	Z+1, r25	; 0x01
    4c66:	80 83       	st	Z, r24
    4c68:	de 01       	movw	r26, r28
    4c6a:	ab 5a       	subi	r26, 0xAB	; 171
    4c6c:	bf 4f       	sbci	r27, 0xFF	; 255
    4c6e:	fe 01       	movw	r30, r28
    4c70:	e7 5a       	subi	r30, 0xA7	; 167
    4c72:	ff 4f       	sbci	r31, 0xFF	; 255
    4c74:	80 81       	ld	r24, Z
    4c76:	91 81       	ldd	r25, Z+1	; 0x01
    4c78:	11 96       	adiw	r26, 0x01	; 1
    4c7a:	9c 93       	st	X, r25
    4c7c:	8e 93       	st	-X, r24
    4c7e:	fe 01       	movw	r30, r28
    4c80:	eb 5a       	subi	r30, 0xAB	; 171
    4c82:	ff 4f       	sbci	r31, 0xFF	; 255
    4c84:	80 81       	ld	r24, Z
    4c86:	91 81       	ldd	r25, Z+1	; 0x01
    4c88:	01 97       	sbiw	r24, 0x01	; 1
    4c8a:	f1 f7       	brne	.-4      	; 0x4c88 <MENU_vidControlMenu+0x188a>
    4c8c:	fe 01       	movw	r30, r28
    4c8e:	eb 5a       	subi	r30, 0xAB	; 171
    4c90:	ff 4f       	sbci	r31, 0xFF	; 255
    4c92:	91 83       	std	Z+1, r25	; 0x01
    4c94:	80 83       	st	Z, r24
								_delay_ms(500);

								Local_u8Choice = '-';
    4c96:	fe 01       	movw	r30, r28
    4c98:	e3 5f       	subi	r30, 0xF3	; 243
    4c9a:	fe 4f       	sbci	r31, 0xFE	; 254
    4c9c:	8d e2       	ldi	r24, 0x2D	; 45
    4c9e:	80 83       	st	Z, r24
    4ca0:	c7 c0       	rjmp	.+398    	; 0x4e30 <MENU_vidControlMenu+0x1a32>
								break;
							case '2':
								MENU_vidSendInstruction(Local_u8RoomOffset + 9, 0);
    4ca2:	fe 01       	movw	r30, r28
    4ca4:	e5 5f       	subi	r30, 0xF5	; 245
    4ca6:	fe 4f       	sbci	r31, 0xFE	; 254
    4ca8:	80 81       	ld	r24, Z
    4caa:	87 5f       	subi	r24, 0xF7	; 247
    4cac:	60 e0       	ldi	r22, 0x00	; 0
    4cae:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <MENU_vidSendInstruction>

								LCD_Clear_Display();
    4cb2:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_Clear_Display>
								LCD_enuSendString("Cond. Turned Off");
    4cb6:	8d e4       	ldi	r24, 0x4D	; 77
    4cb8:	92 e0       	ldi	r25, 0x02	; 2
    4cba:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
    4cbe:	fe 01       	movw	r30, r28
    4cc0:	ef 5a       	subi	r30, 0xAF	; 175
    4cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    4cc4:	80 e0       	ldi	r24, 0x00	; 0
    4cc6:	90 e0       	ldi	r25, 0x00	; 0
    4cc8:	aa ef       	ldi	r26, 0xFA	; 250
    4cca:	b3 e4       	ldi	r27, 0x43	; 67
    4ccc:	80 83       	st	Z, r24
    4cce:	91 83       	std	Z+1, r25	; 0x01
    4cd0:	a2 83       	std	Z+2, r26	; 0x02
    4cd2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4cd4:	8e 01       	movw	r16, r28
    4cd6:	03 5b       	subi	r16, 0xB3	; 179
    4cd8:	1f 4f       	sbci	r17, 0xFF	; 255
    4cda:	fe 01       	movw	r30, r28
    4cdc:	ef 5a       	subi	r30, 0xAF	; 175
    4cde:	ff 4f       	sbci	r31, 0xFF	; 255
    4ce0:	60 81       	ld	r22, Z
    4ce2:	71 81       	ldd	r23, Z+1	; 0x01
    4ce4:	82 81       	ldd	r24, Z+2	; 0x02
    4ce6:	93 81       	ldd	r25, Z+3	; 0x03
    4ce8:	20 e0       	ldi	r18, 0x00	; 0
    4cea:	30 e0       	ldi	r19, 0x00	; 0
    4cec:	4a e7       	ldi	r20, 0x7A	; 122
    4cee:	55 e4       	ldi	r21, 0x45	; 69
    4cf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cf4:	dc 01       	movw	r26, r24
    4cf6:	cb 01       	movw	r24, r22
    4cf8:	f8 01       	movw	r30, r16
    4cfa:	80 83       	st	Z, r24
    4cfc:	91 83       	std	Z+1, r25	; 0x01
    4cfe:	a2 83       	std	Z+2, r26	; 0x02
    4d00:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4d02:	fe 01       	movw	r30, r28
    4d04:	e3 5b       	subi	r30, 0xB3	; 179
    4d06:	ff 4f       	sbci	r31, 0xFF	; 255
    4d08:	60 81       	ld	r22, Z
    4d0a:	71 81       	ldd	r23, Z+1	; 0x01
    4d0c:	82 81       	ldd	r24, Z+2	; 0x02
    4d0e:	93 81       	ldd	r25, Z+3	; 0x03
    4d10:	20 e0       	ldi	r18, 0x00	; 0
    4d12:	30 e0       	ldi	r19, 0x00	; 0
    4d14:	40 e8       	ldi	r20, 0x80	; 128
    4d16:	5f e3       	ldi	r21, 0x3F	; 63
    4d18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4d1c:	88 23       	and	r24, r24
    4d1e:	44 f4       	brge	.+16     	; 0x4d30 <MENU_vidControlMenu+0x1932>
		__ticks = 1;
    4d20:	fe 01       	movw	r30, r28
    4d22:	e5 5b       	subi	r30, 0xB5	; 181
    4d24:	ff 4f       	sbci	r31, 0xFF	; 255
    4d26:	81 e0       	ldi	r24, 0x01	; 1
    4d28:	90 e0       	ldi	r25, 0x00	; 0
    4d2a:	91 83       	std	Z+1, r25	; 0x01
    4d2c:	80 83       	st	Z, r24
    4d2e:	64 c0       	rjmp	.+200    	; 0x4df8 <MENU_vidControlMenu+0x19fa>
	else if (__tmp > 65535)
    4d30:	fe 01       	movw	r30, r28
    4d32:	e3 5b       	subi	r30, 0xB3	; 179
    4d34:	ff 4f       	sbci	r31, 0xFF	; 255
    4d36:	60 81       	ld	r22, Z
    4d38:	71 81       	ldd	r23, Z+1	; 0x01
    4d3a:	82 81       	ldd	r24, Z+2	; 0x02
    4d3c:	93 81       	ldd	r25, Z+3	; 0x03
    4d3e:	20 e0       	ldi	r18, 0x00	; 0
    4d40:	3f ef       	ldi	r19, 0xFF	; 255
    4d42:	4f e7       	ldi	r20, 0x7F	; 127
    4d44:	57 e4       	ldi	r21, 0x47	; 71
    4d46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4d4a:	18 16       	cp	r1, r24
    4d4c:	0c f0       	brlt	.+2      	; 0x4d50 <MENU_vidControlMenu+0x1952>
    4d4e:	43 c0       	rjmp	.+134    	; 0x4dd6 <MENU_vidControlMenu+0x19d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d50:	fe 01       	movw	r30, r28
    4d52:	ef 5a       	subi	r30, 0xAF	; 175
    4d54:	ff 4f       	sbci	r31, 0xFF	; 255
    4d56:	60 81       	ld	r22, Z
    4d58:	71 81       	ldd	r23, Z+1	; 0x01
    4d5a:	82 81       	ldd	r24, Z+2	; 0x02
    4d5c:	93 81       	ldd	r25, Z+3	; 0x03
    4d5e:	20 e0       	ldi	r18, 0x00	; 0
    4d60:	30 e0       	ldi	r19, 0x00	; 0
    4d62:	40 e2       	ldi	r20, 0x20	; 32
    4d64:	51 e4       	ldi	r21, 0x41	; 65
    4d66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d6a:	dc 01       	movw	r26, r24
    4d6c:	cb 01       	movw	r24, r22
    4d6e:	8e 01       	movw	r16, r28
    4d70:	05 5b       	subi	r16, 0xB5	; 181
    4d72:	1f 4f       	sbci	r17, 0xFF	; 255
    4d74:	bc 01       	movw	r22, r24
    4d76:	cd 01       	movw	r24, r26
    4d78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d7c:	dc 01       	movw	r26, r24
    4d7e:	cb 01       	movw	r24, r22
    4d80:	f8 01       	movw	r30, r16
    4d82:	91 83       	std	Z+1, r25	; 0x01
    4d84:	80 83       	st	Z, r24
    4d86:	1f c0       	rjmp	.+62     	; 0x4dc6 <MENU_vidControlMenu+0x19c8>
    4d88:	fe 01       	movw	r30, r28
    4d8a:	e7 5b       	subi	r30, 0xB7	; 183
    4d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d8e:	80 e9       	ldi	r24, 0x90	; 144
    4d90:	91 e0       	ldi	r25, 0x01	; 1
    4d92:	91 83       	std	Z+1, r25	; 0x01
    4d94:	80 83       	st	Z, r24
    4d96:	fe 01       	movw	r30, r28
    4d98:	e7 5b       	subi	r30, 0xB7	; 183
    4d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    4d9c:	80 81       	ld	r24, Z
    4d9e:	91 81       	ldd	r25, Z+1	; 0x01
    4da0:	01 97       	sbiw	r24, 0x01	; 1
    4da2:	f1 f7       	brne	.-4      	; 0x4da0 <MENU_vidControlMenu+0x19a2>
    4da4:	fe 01       	movw	r30, r28
    4da6:	e7 5b       	subi	r30, 0xB7	; 183
    4da8:	ff 4f       	sbci	r31, 0xFF	; 255
    4daa:	91 83       	std	Z+1, r25	; 0x01
    4dac:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4dae:	de 01       	movw	r26, r28
    4db0:	a5 5b       	subi	r26, 0xB5	; 181
    4db2:	bf 4f       	sbci	r27, 0xFF	; 255
    4db4:	fe 01       	movw	r30, r28
    4db6:	e5 5b       	subi	r30, 0xB5	; 181
    4db8:	ff 4f       	sbci	r31, 0xFF	; 255
    4dba:	80 81       	ld	r24, Z
    4dbc:	91 81       	ldd	r25, Z+1	; 0x01
    4dbe:	01 97       	sbiw	r24, 0x01	; 1
    4dc0:	11 96       	adiw	r26, 0x01	; 1
    4dc2:	9c 93       	st	X, r25
    4dc4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4dc6:	fe 01       	movw	r30, r28
    4dc8:	e5 5b       	subi	r30, 0xB5	; 181
    4dca:	ff 4f       	sbci	r31, 0xFF	; 255
    4dcc:	80 81       	ld	r24, Z
    4dce:	91 81       	ldd	r25, Z+1	; 0x01
    4dd0:	00 97       	sbiw	r24, 0x00	; 0
    4dd2:	d1 f6       	brne	.-76     	; 0x4d88 <MENU_vidControlMenu+0x198a>
    4dd4:	28 c0       	rjmp	.+80     	; 0x4e26 <MENU_vidControlMenu+0x1a28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4dd6:	8e 01       	movw	r16, r28
    4dd8:	05 5b       	subi	r16, 0xB5	; 181
    4dda:	1f 4f       	sbci	r17, 0xFF	; 255
    4ddc:	fe 01       	movw	r30, r28
    4dde:	e3 5b       	subi	r30, 0xB3	; 179
    4de0:	ff 4f       	sbci	r31, 0xFF	; 255
    4de2:	60 81       	ld	r22, Z
    4de4:	71 81       	ldd	r23, Z+1	; 0x01
    4de6:	82 81       	ldd	r24, Z+2	; 0x02
    4de8:	93 81       	ldd	r25, Z+3	; 0x03
    4dea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dee:	dc 01       	movw	r26, r24
    4df0:	cb 01       	movw	r24, r22
    4df2:	f8 01       	movw	r30, r16
    4df4:	91 83       	std	Z+1, r25	; 0x01
    4df6:	80 83       	st	Z, r24
    4df8:	de 01       	movw	r26, r28
    4dfa:	a9 5b       	subi	r26, 0xB9	; 185
    4dfc:	bf 4f       	sbci	r27, 0xFF	; 255
    4dfe:	fe 01       	movw	r30, r28
    4e00:	e5 5b       	subi	r30, 0xB5	; 181
    4e02:	ff 4f       	sbci	r31, 0xFF	; 255
    4e04:	80 81       	ld	r24, Z
    4e06:	91 81       	ldd	r25, Z+1	; 0x01
    4e08:	11 96       	adiw	r26, 0x01	; 1
    4e0a:	9c 93       	st	X, r25
    4e0c:	8e 93       	st	-X, r24
    4e0e:	fe 01       	movw	r30, r28
    4e10:	e9 5b       	subi	r30, 0xB9	; 185
    4e12:	ff 4f       	sbci	r31, 0xFF	; 255
    4e14:	80 81       	ld	r24, Z
    4e16:	91 81       	ldd	r25, Z+1	; 0x01
    4e18:	01 97       	sbiw	r24, 0x01	; 1
    4e1a:	f1 f7       	brne	.-4      	; 0x4e18 <MENU_vidControlMenu+0x1a1a>
    4e1c:	fe 01       	movw	r30, r28
    4e1e:	e9 5b       	subi	r30, 0xB9	; 185
    4e20:	ff 4f       	sbci	r31, 0xFF	; 255
    4e22:	91 83       	std	Z+1, r25	; 0x01
    4e24:	80 83       	st	Z, r24
								_delay_ms(500);

								Local_u8Choice = '-';
    4e26:	fe 01       	movw	r30, r28
    4e28:	e3 5f       	subi	r30, 0xF3	; 243
    4e2a:	fe 4f       	sbci	r31, 0xFE	; 254
    4e2c:	8d e2       	ldi	r24, 0x2D	; 45
    4e2e:	80 83       	st	Z, r24
							case '/':
								break;
							case '-':
								break;
							}
						} while (Local_u8Choice != '-' && Local_u8Choice != '/');
    4e30:	fe 01       	movw	r30, r28
    4e32:	e3 5f       	subi	r30, 0xF3	; 243
    4e34:	fe 4f       	sbci	r31, 0xFE	; 254
    4e36:	80 81       	ld	r24, Z
    4e38:	8d 32       	cpi	r24, 0x2D	; 45
    4e3a:	39 f0       	breq	.+14     	; 0x4e4a <MENU_vidControlMenu+0x1a4c>
    4e3c:	fe 01       	movw	r30, r28
    4e3e:	e3 5f       	subi	r30, 0xF3	; 243
    4e40:	fe 4f       	sbci	r31, 0xFE	; 254
    4e42:	80 81       	ld	r24, Z
    4e44:	8f 32       	cpi	r24, 0x2F	; 47
    4e46:	09 f0       	breq	.+2      	; 0x4e4a <MENU_vidControlMenu+0x1a4c>
    4e48:	30 ce       	rjmp	.-928    	; 0x4aaa <MENU_vidControlMenu+0x16ac>
						Local_u8Choice = 0;
    4e4a:	fe 01       	movw	r30, r28
    4e4c:	e3 5f       	subi	r30, 0xF3	; 243
    4e4e:	fe 4f       	sbci	r31, 0xFE	; 254
    4e50:	10 82       	st	Z, r1
    4e52:	f9 c2       	rjmp	.+1522   	; 0x5446 <MENU_vidControlMenu+0x2048>
						break;
					case '*':
						do
						{
							LCD_Clear_Display();
    4e54:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_Clear_Display>
							LCD_enuSendString("3: TV          ^");
    4e58:	8e e5       	ldi	r24, 0x5E	; 94
    4e5a:	92 e0       	ldi	r25, 0x02	; 2
    4e5c:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
							LCD_enuChangePosition(1, 0);
    4e60:	81 e0       	ldi	r24, 0x01	; 1
    4e62:	60 e0       	ldi	r22, 0x00	; 0
    4e64:	0e 94 1e 12 	call	0x243c	; 0x243c <LCD_enuChangePosition>
							LCD_enuSendString("4: Window");
    4e68:	8f e6       	ldi	r24, 0x6F	; 111
    4e6a:	92 e0       	ldi	r25, 0x02	; 2
    4e6c:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
							Local_u8Choice = GetChioce();
    4e70:	0e 94 28 2b 	call	0x5650	; 0x5650 <GetChioce>
    4e74:	fe 01       	movw	r30, r28
    4e76:	e3 5f       	subi	r30, 0xF3	; 243
    4e78:	fe 4f       	sbci	r31, 0xFE	; 254
    4e7a:	80 83       	st	Z, r24
							switch (Local_u8Choice)
    4e7c:	fe 01       	movw	r30, r28
    4e7e:	e3 5f       	subi	r30, 0xF3	; 243
    4e80:	fe 4f       	sbci	r31, 0xFE	; 254
    4e82:	80 81       	ld	r24, Z
    4e84:	28 2f       	mov	r18, r24
    4e86:	30 e0       	ldi	r19, 0x00	; 0
    4e88:	ce 5e       	subi	r28, 0xEE	; 238
    4e8a:	de 4f       	sbci	r29, 0xFE	; 254
    4e8c:	39 83       	std	Y+1, r19	; 0x01
    4e8e:	28 83       	st	Y, r18
    4e90:	c2 51       	subi	r28, 0x12	; 18
    4e92:	d1 40       	sbci	r29, 0x01	; 1
    4e94:	ce 5e       	subi	r28, 0xEE	; 238
    4e96:	de 4f       	sbci	r29, 0xFE	; 254
    4e98:	88 81       	ld	r24, Y
    4e9a:	99 81       	ldd	r25, Y+1	; 0x01
    4e9c:	c2 51       	subi	r28, 0x12	; 18
    4e9e:	d1 40       	sbci	r29, 0x01	; 1
    4ea0:	83 33       	cpi	r24, 0x33	; 51
    4ea2:	91 05       	cpc	r25, r1
    4ea4:	59 f0       	breq	.+22     	; 0x4ebc <MENU_vidControlMenu+0x1abe>
    4ea6:	ce 5e       	subi	r28, 0xEE	; 238
    4ea8:	de 4f       	sbci	r29, 0xFE	; 254
    4eaa:	e8 81       	ld	r30, Y
    4eac:	f9 81       	ldd	r31, Y+1	; 0x01
    4eae:	c2 51       	subi	r28, 0x12	; 18
    4eb0:	d1 40       	sbci	r29, 0x01	; 1
    4eb2:	e4 33       	cpi	r30, 0x34	; 52
    4eb4:	f1 05       	cpc	r31, r1
    4eb6:	09 f4       	brne	.+2      	; 0x4eba <MENU_vidControlMenu+0x1abc>
    4eb8:	65 c1       	rjmp	.+714    	; 0x5184 <MENU_vidControlMenu+0x1d86>
    4eba:	b4 c2       	rjmp	.+1384   	; 0x5424 <MENU_vidControlMenu+0x2026>
							{
							case '3':
								do
								{
									LCD_Clear_Display();
    4ebc:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_Clear_Display>
									LCD_enuSendString("1: Turn On");
    4ec0:	8a ef       	ldi	r24, 0xFA	; 250
    4ec2:	91 e0       	ldi	r25, 0x01	; 1
    4ec4:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
									LCD_enuChangePosition(1, 0);
    4ec8:	81 e0       	ldi	r24, 0x01	; 1
    4eca:	60 e0       	ldi	r22, 0x00	; 0
    4ecc:	0e 94 1e 12 	call	0x243c	; 0x243c <LCD_enuChangePosition>
									LCD_enuSendString("2: Turn Off");
    4ed0:	85 e0       	ldi	r24, 0x05	; 5
    4ed2:	92 e0       	ldi	r25, 0x02	; 2
    4ed4:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
									Local_u8Choice = GetChioce();
    4ed8:	0e 94 28 2b 	call	0x5650	; 0x5650 <GetChioce>
    4edc:	fe 01       	movw	r30, r28
    4ede:	e3 5f       	subi	r30, 0xF3	; 243
    4ee0:	fe 4f       	sbci	r31, 0xFE	; 254
    4ee2:	80 83       	st	Z, r24
									switch (Local_u8Choice)
    4ee4:	fe 01       	movw	r30, r28
    4ee6:	e3 5f       	subi	r30, 0xF3	; 243
    4ee8:	fe 4f       	sbci	r31, 0xFE	; 254
    4eea:	80 81       	ld	r24, Z
    4eec:	28 2f       	mov	r18, r24
    4eee:	30 e0       	ldi	r19, 0x00	; 0
    4ef0:	c0 5f       	subi	r28, 0xF0	; 240
    4ef2:	de 4f       	sbci	r29, 0xFE	; 254
    4ef4:	39 83       	std	Y+1, r19	; 0x01
    4ef6:	28 83       	st	Y, r18
    4ef8:	c0 51       	subi	r28, 0x10	; 16
    4efa:	d1 40       	sbci	r29, 0x01	; 1
    4efc:	c0 5f       	subi	r28, 0xF0	; 240
    4efe:	de 4f       	sbci	r29, 0xFE	; 254
    4f00:	88 81       	ld	r24, Y
    4f02:	99 81       	ldd	r25, Y+1	; 0x01
    4f04:	c0 51       	subi	r28, 0x10	; 16
    4f06:	d1 40       	sbci	r29, 0x01	; 1
    4f08:	81 33       	cpi	r24, 0x31	; 49
    4f0a:	91 05       	cpc	r25, r1
    4f0c:	59 f0       	breq	.+22     	; 0x4f24 <MENU_vidControlMenu+0x1b26>
    4f0e:	c0 5f       	subi	r28, 0xF0	; 240
    4f10:	de 4f       	sbci	r29, 0xFE	; 254
    4f12:	e8 81       	ld	r30, Y
    4f14:	f9 81       	ldd	r31, Y+1	; 0x01
    4f16:	c0 51       	subi	r28, 0x10	; 16
    4f18:	d1 40       	sbci	r29, 0x01	; 1
    4f1a:	e2 33       	cpi	r30, 0x32	; 50
    4f1c:	f1 05       	cpc	r31, r1
    4f1e:	09 f4       	brne	.+2      	; 0x4f22 <MENU_vidControlMenu+0x1b24>
    4f20:	9a c0       	rjmp	.+308    	; 0x5056 <MENU_vidControlMenu+0x1c58>
    4f22:	1e c1       	rjmp	.+572    	; 0x5160 <MENU_vidControlMenu+0x1d62>
									{
									case '1':
										MENU_vidSendInstruction(Local_u8RoomOffset + 12, 0);
    4f24:	fe 01       	movw	r30, r28
    4f26:	e5 5f       	subi	r30, 0xF5	; 245
    4f28:	fe 4f       	sbci	r31, 0xFE	; 254
    4f2a:	80 81       	ld	r24, Z
    4f2c:	84 5f       	subi	r24, 0xF4	; 244
    4f2e:	60 e0       	ldi	r22, 0x00	; 0
    4f30:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <MENU_vidSendInstruction>

										LCD_Clear_Display();
    4f34:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_Clear_Display>
										LCD_enuSendString("TV turned On");
    4f38:	89 e7       	ldi	r24, 0x79	; 121
    4f3a:	92 e0       	ldi	r25, 0x02	; 2
    4f3c:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
    4f40:	fe 01       	movw	r30, r28
    4f42:	ed 5b       	subi	r30, 0xBD	; 189
    4f44:	ff 4f       	sbci	r31, 0xFF	; 255
    4f46:	80 e0       	ldi	r24, 0x00	; 0
    4f48:	90 e0       	ldi	r25, 0x00	; 0
    4f4a:	aa ef       	ldi	r26, 0xFA	; 250
    4f4c:	b3 e4       	ldi	r27, 0x43	; 67
    4f4e:	80 83       	st	Z, r24
    4f50:	91 83       	std	Z+1, r25	; 0x01
    4f52:	a2 83       	std	Z+2, r26	; 0x02
    4f54:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f56:	8e 01       	movw	r16, r28
    4f58:	01 5c       	subi	r16, 0xC1	; 193
    4f5a:	1f 4f       	sbci	r17, 0xFF	; 255
    4f5c:	fe 01       	movw	r30, r28
    4f5e:	ed 5b       	subi	r30, 0xBD	; 189
    4f60:	ff 4f       	sbci	r31, 0xFF	; 255
    4f62:	60 81       	ld	r22, Z
    4f64:	71 81       	ldd	r23, Z+1	; 0x01
    4f66:	82 81       	ldd	r24, Z+2	; 0x02
    4f68:	93 81       	ldd	r25, Z+3	; 0x03
    4f6a:	20 e0       	ldi	r18, 0x00	; 0
    4f6c:	30 e0       	ldi	r19, 0x00	; 0
    4f6e:	4a e7       	ldi	r20, 0x7A	; 122
    4f70:	55 e4       	ldi	r21, 0x45	; 69
    4f72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f76:	dc 01       	movw	r26, r24
    4f78:	cb 01       	movw	r24, r22
    4f7a:	f8 01       	movw	r30, r16
    4f7c:	80 83       	st	Z, r24
    4f7e:	91 83       	std	Z+1, r25	; 0x01
    4f80:	a2 83       	std	Z+2, r26	; 0x02
    4f82:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4f84:	fe 01       	movw	r30, r28
    4f86:	ff 96       	adiw	r30, 0x3f	; 63
    4f88:	60 81       	ld	r22, Z
    4f8a:	71 81       	ldd	r23, Z+1	; 0x01
    4f8c:	82 81       	ldd	r24, Z+2	; 0x02
    4f8e:	93 81       	ldd	r25, Z+3	; 0x03
    4f90:	20 e0       	ldi	r18, 0x00	; 0
    4f92:	30 e0       	ldi	r19, 0x00	; 0
    4f94:	40 e8       	ldi	r20, 0x80	; 128
    4f96:	5f e3       	ldi	r21, 0x3F	; 63
    4f98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4f9c:	88 23       	and	r24, r24
    4f9e:	2c f4       	brge	.+10     	; 0x4faa <MENU_vidControlMenu+0x1bac>
		__ticks = 1;
    4fa0:	81 e0       	ldi	r24, 0x01	; 1
    4fa2:	90 e0       	ldi	r25, 0x00	; 0
    4fa4:	9e af       	std	Y+62, r25	; 0x3e
    4fa6:	8d af       	std	Y+61, r24	; 0x3d
    4fa8:	46 c0       	rjmp	.+140    	; 0x5036 <MENU_vidControlMenu+0x1c38>
	else if (__tmp > 65535)
    4faa:	fe 01       	movw	r30, r28
    4fac:	ff 96       	adiw	r30, 0x3f	; 63
    4fae:	60 81       	ld	r22, Z
    4fb0:	71 81       	ldd	r23, Z+1	; 0x01
    4fb2:	82 81       	ldd	r24, Z+2	; 0x02
    4fb4:	93 81       	ldd	r25, Z+3	; 0x03
    4fb6:	20 e0       	ldi	r18, 0x00	; 0
    4fb8:	3f ef       	ldi	r19, 0xFF	; 255
    4fba:	4f e7       	ldi	r20, 0x7F	; 127
    4fbc:	57 e4       	ldi	r21, 0x47	; 71
    4fbe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4fc2:	18 16       	cp	r1, r24
    4fc4:	64 f5       	brge	.+88     	; 0x501e <MENU_vidControlMenu+0x1c20>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4fc6:	fe 01       	movw	r30, r28
    4fc8:	ed 5b       	subi	r30, 0xBD	; 189
    4fca:	ff 4f       	sbci	r31, 0xFF	; 255
    4fcc:	60 81       	ld	r22, Z
    4fce:	71 81       	ldd	r23, Z+1	; 0x01
    4fd0:	82 81       	ldd	r24, Z+2	; 0x02
    4fd2:	93 81       	ldd	r25, Z+3	; 0x03
    4fd4:	20 e0       	ldi	r18, 0x00	; 0
    4fd6:	30 e0       	ldi	r19, 0x00	; 0
    4fd8:	40 e2       	ldi	r20, 0x20	; 32
    4fda:	51 e4       	ldi	r21, 0x41	; 65
    4fdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fe0:	dc 01       	movw	r26, r24
    4fe2:	cb 01       	movw	r24, r22
    4fe4:	bc 01       	movw	r22, r24
    4fe6:	cd 01       	movw	r24, r26
    4fe8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fec:	dc 01       	movw	r26, r24
    4fee:	cb 01       	movw	r24, r22
    4ff0:	9e af       	std	Y+62, r25	; 0x3e
    4ff2:	8d af       	std	Y+61, r24	; 0x3d
    4ff4:	0f c0       	rjmp	.+30     	; 0x5014 <MENU_vidControlMenu+0x1c16>
    4ff6:	80 e9       	ldi	r24, 0x90	; 144
    4ff8:	91 e0       	ldi	r25, 0x01	; 1
    4ffa:	9c af       	std	Y+60, r25	; 0x3c
    4ffc:	8b af       	std	Y+59, r24	; 0x3b
    4ffe:	8b ad       	ldd	r24, Y+59	; 0x3b
    5000:	9c ad       	ldd	r25, Y+60	; 0x3c
    5002:	01 97       	sbiw	r24, 0x01	; 1
    5004:	f1 f7       	brne	.-4      	; 0x5002 <MENU_vidControlMenu+0x1c04>
    5006:	9c af       	std	Y+60, r25	; 0x3c
    5008:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    500a:	8d ad       	ldd	r24, Y+61	; 0x3d
    500c:	9e ad       	ldd	r25, Y+62	; 0x3e
    500e:	01 97       	sbiw	r24, 0x01	; 1
    5010:	9e af       	std	Y+62, r25	; 0x3e
    5012:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5014:	8d ad       	ldd	r24, Y+61	; 0x3d
    5016:	9e ad       	ldd	r25, Y+62	; 0x3e
    5018:	00 97       	sbiw	r24, 0x00	; 0
    501a:	69 f7       	brne	.-38     	; 0x4ff6 <MENU_vidControlMenu+0x1bf8>
    501c:	16 c0       	rjmp	.+44     	; 0x504a <MENU_vidControlMenu+0x1c4c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    501e:	fe 01       	movw	r30, r28
    5020:	ff 96       	adiw	r30, 0x3f	; 63
    5022:	60 81       	ld	r22, Z
    5024:	71 81       	ldd	r23, Z+1	; 0x01
    5026:	82 81       	ldd	r24, Z+2	; 0x02
    5028:	93 81       	ldd	r25, Z+3	; 0x03
    502a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    502e:	dc 01       	movw	r26, r24
    5030:	cb 01       	movw	r24, r22
    5032:	9e af       	std	Y+62, r25	; 0x3e
    5034:	8d af       	std	Y+61, r24	; 0x3d
    5036:	8d ad       	ldd	r24, Y+61	; 0x3d
    5038:	9e ad       	ldd	r25, Y+62	; 0x3e
    503a:	9a af       	std	Y+58, r25	; 0x3a
    503c:	89 af       	std	Y+57, r24	; 0x39
    503e:	89 ad       	ldd	r24, Y+57	; 0x39
    5040:	9a ad       	ldd	r25, Y+58	; 0x3a
    5042:	01 97       	sbiw	r24, 0x01	; 1
    5044:	f1 f7       	brne	.-4      	; 0x5042 <MENU_vidControlMenu+0x1c44>
    5046:	9a af       	std	Y+58, r25	; 0x3a
    5048:	89 af       	std	Y+57, r24	; 0x39
										_delay_ms(500);
										Local_u8Choice = '-';
    504a:	fe 01       	movw	r30, r28
    504c:	e3 5f       	subi	r30, 0xF3	; 243
    504e:	fe 4f       	sbci	r31, 0xFE	; 254
    5050:	8d e2       	ldi	r24, 0x2D	; 45
    5052:	80 83       	st	Z, r24
    5054:	85 c0       	rjmp	.+266    	; 0x5160 <MENU_vidControlMenu+0x1d62>
										break;
									case '2':
										MENU_vidSendInstruction(Local_u8RoomOffset + 13, 0);
    5056:	fe 01       	movw	r30, r28
    5058:	e5 5f       	subi	r30, 0xF5	; 245
    505a:	fe 4f       	sbci	r31, 0xFE	; 254
    505c:	80 81       	ld	r24, Z
    505e:	83 5f       	subi	r24, 0xF3	; 243
    5060:	60 e0       	ldi	r22, 0x00	; 0
    5062:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <MENU_vidSendInstruction>

										LCD_Clear_Display();
    5066:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_Clear_Display>
										LCD_enuSendString("TV turned Off");
    506a:	86 e8       	ldi	r24, 0x86	; 134
    506c:	92 e0       	ldi	r25, 0x02	; 2
    506e:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
    5072:	80 e0       	ldi	r24, 0x00	; 0
    5074:	90 e0       	ldi	r25, 0x00	; 0
    5076:	aa ef       	ldi	r26, 0xFA	; 250
    5078:	b3 e4       	ldi	r27, 0x43	; 67
    507a:	8d ab       	std	Y+53, r24	; 0x35
    507c:	9e ab       	std	Y+54, r25	; 0x36
    507e:	af ab       	std	Y+55, r26	; 0x37
    5080:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5082:	6d a9       	ldd	r22, Y+53	; 0x35
    5084:	7e a9       	ldd	r23, Y+54	; 0x36
    5086:	8f a9       	ldd	r24, Y+55	; 0x37
    5088:	98 ad       	ldd	r25, Y+56	; 0x38
    508a:	20 e0       	ldi	r18, 0x00	; 0
    508c:	30 e0       	ldi	r19, 0x00	; 0
    508e:	4a e7       	ldi	r20, 0x7A	; 122
    5090:	55 e4       	ldi	r21, 0x45	; 69
    5092:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5096:	dc 01       	movw	r26, r24
    5098:	cb 01       	movw	r24, r22
    509a:	89 ab       	std	Y+49, r24	; 0x31
    509c:	9a ab       	std	Y+50, r25	; 0x32
    509e:	ab ab       	std	Y+51, r26	; 0x33
    50a0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    50a2:	69 a9       	ldd	r22, Y+49	; 0x31
    50a4:	7a a9       	ldd	r23, Y+50	; 0x32
    50a6:	8b a9       	ldd	r24, Y+51	; 0x33
    50a8:	9c a9       	ldd	r25, Y+52	; 0x34
    50aa:	20 e0       	ldi	r18, 0x00	; 0
    50ac:	30 e0       	ldi	r19, 0x00	; 0
    50ae:	40 e8       	ldi	r20, 0x80	; 128
    50b0:	5f e3       	ldi	r21, 0x3F	; 63
    50b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    50b6:	88 23       	and	r24, r24
    50b8:	2c f4       	brge	.+10     	; 0x50c4 <MENU_vidControlMenu+0x1cc6>
		__ticks = 1;
    50ba:	81 e0       	ldi	r24, 0x01	; 1
    50bc:	90 e0       	ldi	r25, 0x00	; 0
    50be:	98 ab       	std	Y+48, r25	; 0x30
    50c0:	8f a7       	std	Y+47, r24	; 0x2f
    50c2:	3f c0       	rjmp	.+126    	; 0x5142 <MENU_vidControlMenu+0x1d44>
	else if (__tmp > 65535)
    50c4:	69 a9       	ldd	r22, Y+49	; 0x31
    50c6:	7a a9       	ldd	r23, Y+50	; 0x32
    50c8:	8b a9       	ldd	r24, Y+51	; 0x33
    50ca:	9c a9       	ldd	r25, Y+52	; 0x34
    50cc:	20 e0       	ldi	r18, 0x00	; 0
    50ce:	3f ef       	ldi	r19, 0xFF	; 255
    50d0:	4f e7       	ldi	r20, 0x7F	; 127
    50d2:	57 e4       	ldi	r21, 0x47	; 71
    50d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    50d8:	18 16       	cp	r1, r24
    50da:	4c f5       	brge	.+82     	; 0x512e <MENU_vidControlMenu+0x1d30>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    50dc:	6d a9       	ldd	r22, Y+53	; 0x35
    50de:	7e a9       	ldd	r23, Y+54	; 0x36
    50e0:	8f a9       	ldd	r24, Y+55	; 0x37
    50e2:	98 ad       	ldd	r25, Y+56	; 0x38
    50e4:	20 e0       	ldi	r18, 0x00	; 0
    50e6:	30 e0       	ldi	r19, 0x00	; 0
    50e8:	40 e2       	ldi	r20, 0x20	; 32
    50ea:	51 e4       	ldi	r21, 0x41	; 65
    50ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50f0:	dc 01       	movw	r26, r24
    50f2:	cb 01       	movw	r24, r22
    50f4:	bc 01       	movw	r22, r24
    50f6:	cd 01       	movw	r24, r26
    50f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50fc:	dc 01       	movw	r26, r24
    50fe:	cb 01       	movw	r24, r22
    5100:	98 ab       	std	Y+48, r25	; 0x30
    5102:	8f a7       	std	Y+47, r24	; 0x2f
    5104:	0f c0       	rjmp	.+30     	; 0x5124 <MENU_vidControlMenu+0x1d26>
    5106:	80 e9       	ldi	r24, 0x90	; 144
    5108:	91 e0       	ldi	r25, 0x01	; 1
    510a:	9e a7       	std	Y+46, r25	; 0x2e
    510c:	8d a7       	std	Y+45, r24	; 0x2d
    510e:	8d a5       	ldd	r24, Y+45	; 0x2d
    5110:	9e a5       	ldd	r25, Y+46	; 0x2e
    5112:	01 97       	sbiw	r24, 0x01	; 1
    5114:	f1 f7       	brne	.-4      	; 0x5112 <MENU_vidControlMenu+0x1d14>
    5116:	9e a7       	std	Y+46, r25	; 0x2e
    5118:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    511a:	8f a5       	ldd	r24, Y+47	; 0x2f
    511c:	98 a9       	ldd	r25, Y+48	; 0x30
    511e:	01 97       	sbiw	r24, 0x01	; 1
    5120:	98 ab       	std	Y+48, r25	; 0x30
    5122:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5124:	8f a5       	ldd	r24, Y+47	; 0x2f
    5126:	98 a9       	ldd	r25, Y+48	; 0x30
    5128:	00 97       	sbiw	r24, 0x00	; 0
    512a:	69 f7       	brne	.-38     	; 0x5106 <MENU_vidControlMenu+0x1d08>
    512c:	14 c0       	rjmp	.+40     	; 0x5156 <MENU_vidControlMenu+0x1d58>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    512e:	69 a9       	ldd	r22, Y+49	; 0x31
    5130:	7a a9       	ldd	r23, Y+50	; 0x32
    5132:	8b a9       	ldd	r24, Y+51	; 0x33
    5134:	9c a9       	ldd	r25, Y+52	; 0x34
    5136:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    513a:	dc 01       	movw	r26, r24
    513c:	cb 01       	movw	r24, r22
    513e:	98 ab       	std	Y+48, r25	; 0x30
    5140:	8f a7       	std	Y+47, r24	; 0x2f
    5142:	8f a5       	ldd	r24, Y+47	; 0x2f
    5144:	98 a9       	ldd	r25, Y+48	; 0x30
    5146:	9c a7       	std	Y+44, r25	; 0x2c
    5148:	8b a7       	std	Y+43, r24	; 0x2b
    514a:	8b a5       	ldd	r24, Y+43	; 0x2b
    514c:	9c a5       	ldd	r25, Y+44	; 0x2c
    514e:	01 97       	sbiw	r24, 0x01	; 1
    5150:	f1 f7       	brne	.-4      	; 0x514e <MENU_vidControlMenu+0x1d50>
    5152:	9c a7       	std	Y+44, r25	; 0x2c
    5154:	8b a7       	std	Y+43, r24	; 0x2b
										_delay_ms(500);
										Local_u8Choice = '-';
    5156:	fe 01       	movw	r30, r28
    5158:	e3 5f       	subi	r30, 0xF3	; 243
    515a:	fe 4f       	sbci	r31, 0xFE	; 254
    515c:	8d e2       	ldi	r24, 0x2D	; 45
    515e:	80 83       	st	Z, r24
									case '/':
										break;
									case '-':
										break;
									}
								} while (Local_u8Choice != '-' && Local_u8Choice != '/');
    5160:	fe 01       	movw	r30, r28
    5162:	e3 5f       	subi	r30, 0xF3	; 243
    5164:	fe 4f       	sbci	r31, 0xFE	; 254
    5166:	80 81       	ld	r24, Z
    5168:	8d 32       	cpi	r24, 0x2D	; 45
    516a:	39 f0       	breq	.+14     	; 0x517a <MENU_vidControlMenu+0x1d7c>
    516c:	fe 01       	movw	r30, r28
    516e:	e3 5f       	subi	r30, 0xF3	; 243
    5170:	fe 4f       	sbci	r31, 0xFE	; 254
    5172:	80 81       	ld	r24, Z
    5174:	8f 32       	cpi	r24, 0x2F	; 47
    5176:	09 f0       	breq	.+2      	; 0x517a <MENU_vidControlMenu+0x1d7c>
    5178:	a1 ce       	rjmp	.-702    	; 0x4ebc <MENU_vidControlMenu+0x1abe>
								Local_u8Choice = 0;
    517a:	fe 01       	movw	r30, r28
    517c:	e3 5f       	subi	r30, 0xF3	; 243
    517e:	fe 4f       	sbci	r31, 0xFE	; 254
    5180:	10 82       	st	Z, r1
    5182:	50 c1       	rjmp	.+672    	; 0x5424 <MENU_vidControlMenu+0x2026>
								break;
							case '4':
								do
								{
									LCD_Clear_Display();
    5184:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_Clear_Display>
									LCD_enuSendString("1: Open");
    5188:	84 e9       	ldi	r24, 0x94	; 148
    518a:	92 e0       	ldi	r25, 0x02	; 2
    518c:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
									LCD_enuChangePosition(1, 0);
    5190:	81 e0       	ldi	r24, 0x01	; 1
    5192:	60 e0       	ldi	r22, 0x00	; 0
    5194:	0e 94 1e 12 	call	0x243c	; 0x243c <LCD_enuChangePosition>
									LCD_enuSendString("2: Close");
    5198:	8c e9       	ldi	r24, 0x9C	; 156
    519a:	92 e0       	ldi	r25, 0x02	; 2
    519c:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
									Local_u8Choice = GetChioce();
    51a0:	0e 94 28 2b 	call	0x5650	; 0x5650 <GetChioce>
    51a4:	fe 01       	movw	r30, r28
    51a6:	e3 5f       	subi	r30, 0xF3	; 243
    51a8:	fe 4f       	sbci	r31, 0xFE	; 254
    51aa:	80 83       	st	Z, r24
									switch (Local_u8Choice)
    51ac:	fe 01       	movw	r30, r28
    51ae:	e3 5f       	subi	r30, 0xF3	; 243
    51b0:	fe 4f       	sbci	r31, 0xFE	; 254
    51b2:	80 81       	ld	r24, Z
    51b4:	28 2f       	mov	r18, r24
    51b6:	30 e0       	ldi	r19, 0x00	; 0
    51b8:	c2 5f       	subi	r28, 0xF2	; 242
    51ba:	de 4f       	sbci	r29, 0xFE	; 254
    51bc:	39 83       	std	Y+1, r19	; 0x01
    51be:	28 83       	st	Y, r18
    51c0:	ce 50       	subi	r28, 0x0E	; 14
    51c2:	d1 40       	sbci	r29, 0x01	; 1
    51c4:	c2 5f       	subi	r28, 0xF2	; 242
    51c6:	de 4f       	sbci	r29, 0xFE	; 254
    51c8:	88 81       	ld	r24, Y
    51ca:	99 81       	ldd	r25, Y+1	; 0x01
    51cc:	ce 50       	subi	r28, 0x0E	; 14
    51ce:	d1 40       	sbci	r29, 0x01	; 1
    51d0:	81 33       	cpi	r24, 0x31	; 49
    51d2:	91 05       	cpc	r25, r1
    51d4:	59 f0       	breq	.+22     	; 0x51ec <MENU_vidControlMenu+0x1dee>
    51d6:	c2 5f       	subi	r28, 0xF2	; 242
    51d8:	de 4f       	sbci	r29, 0xFE	; 254
    51da:	e8 81       	ld	r30, Y
    51dc:	f9 81       	ldd	r31, Y+1	; 0x01
    51de:	ce 50       	subi	r28, 0x0E	; 14
    51e0:	d1 40       	sbci	r29, 0x01	; 1
    51e2:	e2 33       	cpi	r30, 0x32	; 50
    51e4:	f1 05       	cpc	r31, r1
    51e6:	09 f4       	brne	.+2      	; 0x51ea <MENU_vidControlMenu+0x1dec>
    51e8:	87 c0       	rjmp	.+270    	; 0x52f8 <MENU_vidControlMenu+0x1efa>
    51ea:	0b c1       	rjmp	.+534    	; 0x5402 <MENU_vidControlMenu+0x2004>
									{
									case '1':
										MENU_vidSendInstruction(Local_u8RoomOffset + 14, 0);
    51ec:	fe 01       	movw	r30, r28
    51ee:	e5 5f       	subi	r30, 0xF5	; 245
    51f0:	fe 4f       	sbci	r31, 0xFE	; 254
    51f2:	80 81       	ld	r24, Z
    51f4:	82 5f       	subi	r24, 0xF2	; 242
    51f6:	60 e0       	ldi	r22, 0x00	; 0
    51f8:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <MENU_vidSendInstruction>

										LCD_Clear_Display();
    51fc:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_Clear_Display>
										LCD_enuSendString("Window Opened");
    5200:	85 ea       	ldi	r24, 0xA5	; 165
    5202:	92 e0       	ldi	r25, 0x02	; 2
    5204:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
    5208:	80 e0       	ldi	r24, 0x00	; 0
    520a:	90 e0       	ldi	r25, 0x00	; 0
    520c:	aa ef       	ldi	r26, 0xFA	; 250
    520e:	b3 e4       	ldi	r27, 0x43	; 67
    5210:	8f a3       	std	Y+39, r24	; 0x27
    5212:	98 a7       	std	Y+40, r25	; 0x28
    5214:	a9 a7       	std	Y+41, r26	; 0x29
    5216:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5218:	6f a1       	ldd	r22, Y+39	; 0x27
    521a:	78 a5       	ldd	r23, Y+40	; 0x28
    521c:	89 a5       	ldd	r24, Y+41	; 0x29
    521e:	9a a5       	ldd	r25, Y+42	; 0x2a
    5220:	20 e0       	ldi	r18, 0x00	; 0
    5222:	30 e0       	ldi	r19, 0x00	; 0
    5224:	4a e7       	ldi	r20, 0x7A	; 122
    5226:	55 e4       	ldi	r21, 0x45	; 69
    5228:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    522c:	dc 01       	movw	r26, r24
    522e:	cb 01       	movw	r24, r22
    5230:	8b a3       	std	Y+35, r24	; 0x23
    5232:	9c a3       	std	Y+36, r25	; 0x24
    5234:	ad a3       	std	Y+37, r26	; 0x25
    5236:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5238:	6b a1       	ldd	r22, Y+35	; 0x23
    523a:	7c a1       	ldd	r23, Y+36	; 0x24
    523c:	8d a1       	ldd	r24, Y+37	; 0x25
    523e:	9e a1       	ldd	r25, Y+38	; 0x26
    5240:	20 e0       	ldi	r18, 0x00	; 0
    5242:	30 e0       	ldi	r19, 0x00	; 0
    5244:	40 e8       	ldi	r20, 0x80	; 128
    5246:	5f e3       	ldi	r21, 0x3F	; 63
    5248:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    524c:	88 23       	and	r24, r24
    524e:	2c f4       	brge	.+10     	; 0x525a <MENU_vidControlMenu+0x1e5c>
		__ticks = 1;
    5250:	81 e0       	ldi	r24, 0x01	; 1
    5252:	90 e0       	ldi	r25, 0x00	; 0
    5254:	9a a3       	std	Y+34, r25	; 0x22
    5256:	89 a3       	std	Y+33, r24	; 0x21
    5258:	3f c0       	rjmp	.+126    	; 0x52d8 <MENU_vidControlMenu+0x1eda>
	else if (__tmp > 65535)
    525a:	6b a1       	ldd	r22, Y+35	; 0x23
    525c:	7c a1       	ldd	r23, Y+36	; 0x24
    525e:	8d a1       	ldd	r24, Y+37	; 0x25
    5260:	9e a1       	ldd	r25, Y+38	; 0x26
    5262:	20 e0       	ldi	r18, 0x00	; 0
    5264:	3f ef       	ldi	r19, 0xFF	; 255
    5266:	4f e7       	ldi	r20, 0x7F	; 127
    5268:	57 e4       	ldi	r21, 0x47	; 71
    526a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    526e:	18 16       	cp	r1, r24
    5270:	4c f5       	brge	.+82     	; 0x52c4 <MENU_vidControlMenu+0x1ec6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5272:	6f a1       	ldd	r22, Y+39	; 0x27
    5274:	78 a5       	ldd	r23, Y+40	; 0x28
    5276:	89 a5       	ldd	r24, Y+41	; 0x29
    5278:	9a a5       	ldd	r25, Y+42	; 0x2a
    527a:	20 e0       	ldi	r18, 0x00	; 0
    527c:	30 e0       	ldi	r19, 0x00	; 0
    527e:	40 e2       	ldi	r20, 0x20	; 32
    5280:	51 e4       	ldi	r21, 0x41	; 65
    5282:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5286:	dc 01       	movw	r26, r24
    5288:	cb 01       	movw	r24, r22
    528a:	bc 01       	movw	r22, r24
    528c:	cd 01       	movw	r24, r26
    528e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5292:	dc 01       	movw	r26, r24
    5294:	cb 01       	movw	r24, r22
    5296:	9a a3       	std	Y+34, r25	; 0x22
    5298:	89 a3       	std	Y+33, r24	; 0x21
    529a:	0f c0       	rjmp	.+30     	; 0x52ba <MENU_vidControlMenu+0x1ebc>
    529c:	80 e9       	ldi	r24, 0x90	; 144
    529e:	91 e0       	ldi	r25, 0x01	; 1
    52a0:	98 a3       	std	Y+32, r25	; 0x20
    52a2:	8f 8f       	std	Y+31, r24	; 0x1f
    52a4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    52a6:	98 a1       	ldd	r25, Y+32	; 0x20
    52a8:	01 97       	sbiw	r24, 0x01	; 1
    52aa:	f1 f7       	brne	.-4      	; 0x52a8 <MENU_vidControlMenu+0x1eaa>
    52ac:	98 a3       	std	Y+32, r25	; 0x20
    52ae:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    52b0:	89 a1       	ldd	r24, Y+33	; 0x21
    52b2:	9a a1       	ldd	r25, Y+34	; 0x22
    52b4:	01 97       	sbiw	r24, 0x01	; 1
    52b6:	9a a3       	std	Y+34, r25	; 0x22
    52b8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    52ba:	89 a1       	ldd	r24, Y+33	; 0x21
    52bc:	9a a1       	ldd	r25, Y+34	; 0x22
    52be:	00 97       	sbiw	r24, 0x00	; 0
    52c0:	69 f7       	brne	.-38     	; 0x529c <MENU_vidControlMenu+0x1e9e>
    52c2:	14 c0       	rjmp	.+40     	; 0x52ec <MENU_vidControlMenu+0x1eee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    52c4:	6b a1       	ldd	r22, Y+35	; 0x23
    52c6:	7c a1       	ldd	r23, Y+36	; 0x24
    52c8:	8d a1       	ldd	r24, Y+37	; 0x25
    52ca:	9e a1       	ldd	r25, Y+38	; 0x26
    52cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52d0:	dc 01       	movw	r26, r24
    52d2:	cb 01       	movw	r24, r22
    52d4:	9a a3       	std	Y+34, r25	; 0x22
    52d6:	89 a3       	std	Y+33, r24	; 0x21
    52d8:	89 a1       	ldd	r24, Y+33	; 0x21
    52da:	9a a1       	ldd	r25, Y+34	; 0x22
    52dc:	9e 8f       	std	Y+30, r25	; 0x1e
    52de:	8d 8f       	std	Y+29, r24	; 0x1d
    52e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    52e2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    52e4:	01 97       	sbiw	r24, 0x01	; 1
    52e6:	f1 f7       	brne	.-4      	; 0x52e4 <MENU_vidControlMenu+0x1ee6>
    52e8:	9e 8f       	std	Y+30, r25	; 0x1e
    52ea:	8d 8f       	std	Y+29, r24	; 0x1d
										_delay_ms(500);
										Local_u8Choice = '-';
    52ec:	fe 01       	movw	r30, r28
    52ee:	e3 5f       	subi	r30, 0xF3	; 243
    52f0:	fe 4f       	sbci	r31, 0xFE	; 254
    52f2:	8d e2       	ldi	r24, 0x2D	; 45
    52f4:	80 83       	st	Z, r24
    52f6:	85 c0       	rjmp	.+266    	; 0x5402 <MENU_vidControlMenu+0x2004>
										break;
									case '2':
										MENU_vidSendInstruction(Local_u8RoomOffset + 15, 0);
    52f8:	fe 01       	movw	r30, r28
    52fa:	e5 5f       	subi	r30, 0xF5	; 245
    52fc:	fe 4f       	sbci	r31, 0xFE	; 254
    52fe:	80 81       	ld	r24, Z
    5300:	81 5f       	subi	r24, 0xF1	; 241
    5302:	60 e0       	ldi	r22, 0x00	; 0
    5304:	0e 94 d5 2b 	call	0x57aa	; 0x57aa <MENU_vidSendInstruction>

										LCD_Clear_Display();
    5308:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_Clear_Display>
										LCD_enuSendString("Window Closed");
    530c:	83 eb       	ldi	r24, 0xB3	; 179
    530e:	92 e0       	ldi	r25, 0x02	; 2
    5310:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
    5314:	80 e0       	ldi	r24, 0x00	; 0
    5316:	90 e0       	ldi	r25, 0x00	; 0
    5318:	aa ef       	ldi	r26, 0xFA	; 250
    531a:	b3 e4       	ldi	r27, 0x43	; 67
    531c:	89 8f       	std	Y+25, r24	; 0x19
    531e:	9a 8f       	std	Y+26, r25	; 0x1a
    5320:	ab 8f       	std	Y+27, r26	; 0x1b
    5322:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5324:	69 8d       	ldd	r22, Y+25	; 0x19
    5326:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5328:	8b 8d       	ldd	r24, Y+27	; 0x1b
    532a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    532c:	20 e0       	ldi	r18, 0x00	; 0
    532e:	30 e0       	ldi	r19, 0x00	; 0
    5330:	4a e7       	ldi	r20, 0x7A	; 122
    5332:	55 e4       	ldi	r21, 0x45	; 69
    5334:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5338:	dc 01       	movw	r26, r24
    533a:	cb 01       	movw	r24, r22
    533c:	8d 8b       	std	Y+21, r24	; 0x15
    533e:	9e 8b       	std	Y+22, r25	; 0x16
    5340:	af 8b       	std	Y+23, r26	; 0x17
    5342:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5344:	6d 89       	ldd	r22, Y+21	; 0x15
    5346:	7e 89       	ldd	r23, Y+22	; 0x16
    5348:	8f 89       	ldd	r24, Y+23	; 0x17
    534a:	98 8d       	ldd	r25, Y+24	; 0x18
    534c:	20 e0       	ldi	r18, 0x00	; 0
    534e:	30 e0       	ldi	r19, 0x00	; 0
    5350:	40 e8       	ldi	r20, 0x80	; 128
    5352:	5f e3       	ldi	r21, 0x3F	; 63
    5354:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5358:	88 23       	and	r24, r24
    535a:	2c f4       	brge	.+10     	; 0x5366 <MENU_vidControlMenu+0x1f68>
		__ticks = 1;
    535c:	81 e0       	ldi	r24, 0x01	; 1
    535e:	90 e0       	ldi	r25, 0x00	; 0
    5360:	9c 8b       	std	Y+20, r25	; 0x14
    5362:	8b 8b       	std	Y+19, r24	; 0x13
    5364:	3f c0       	rjmp	.+126    	; 0x53e4 <MENU_vidControlMenu+0x1fe6>
	else if (__tmp > 65535)
    5366:	6d 89       	ldd	r22, Y+21	; 0x15
    5368:	7e 89       	ldd	r23, Y+22	; 0x16
    536a:	8f 89       	ldd	r24, Y+23	; 0x17
    536c:	98 8d       	ldd	r25, Y+24	; 0x18
    536e:	20 e0       	ldi	r18, 0x00	; 0
    5370:	3f ef       	ldi	r19, 0xFF	; 255
    5372:	4f e7       	ldi	r20, 0x7F	; 127
    5374:	57 e4       	ldi	r21, 0x47	; 71
    5376:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    537a:	18 16       	cp	r1, r24
    537c:	4c f5       	brge	.+82     	; 0x53d0 <MENU_vidControlMenu+0x1fd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    537e:	69 8d       	ldd	r22, Y+25	; 0x19
    5380:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5382:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5384:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5386:	20 e0       	ldi	r18, 0x00	; 0
    5388:	30 e0       	ldi	r19, 0x00	; 0
    538a:	40 e2       	ldi	r20, 0x20	; 32
    538c:	51 e4       	ldi	r21, 0x41	; 65
    538e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5392:	dc 01       	movw	r26, r24
    5394:	cb 01       	movw	r24, r22
    5396:	bc 01       	movw	r22, r24
    5398:	cd 01       	movw	r24, r26
    539a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    539e:	dc 01       	movw	r26, r24
    53a0:	cb 01       	movw	r24, r22
    53a2:	9c 8b       	std	Y+20, r25	; 0x14
    53a4:	8b 8b       	std	Y+19, r24	; 0x13
    53a6:	0f c0       	rjmp	.+30     	; 0x53c6 <MENU_vidControlMenu+0x1fc8>
    53a8:	80 e9       	ldi	r24, 0x90	; 144
    53aa:	91 e0       	ldi	r25, 0x01	; 1
    53ac:	9a 8b       	std	Y+18, r25	; 0x12
    53ae:	89 8b       	std	Y+17, r24	; 0x11
    53b0:	89 89       	ldd	r24, Y+17	; 0x11
    53b2:	9a 89       	ldd	r25, Y+18	; 0x12
    53b4:	01 97       	sbiw	r24, 0x01	; 1
    53b6:	f1 f7       	brne	.-4      	; 0x53b4 <MENU_vidControlMenu+0x1fb6>
    53b8:	9a 8b       	std	Y+18, r25	; 0x12
    53ba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    53bc:	8b 89       	ldd	r24, Y+19	; 0x13
    53be:	9c 89       	ldd	r25, Y+20	; 0x14
    53c0:	01 97       	sbiw	r24, 0x01	; 1
    53c2:	9c 8b       	std	Y+20, r25	; 0x14
    53c4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    53c6:	8b 89       	ldd	r24, Y+19	; 0x13
    53c8:	9c 89       	ldd	r25, Y+20	; 0x14
    53ca:	00 97       	sbiw	r24, 0x00	; 0
    53cc:	69 f7       	brne	.-38     	; 0x53a8 <MENU_vidControlMenu+0x1faa>
    53ce:	14 c0       	rjmp	.+40     	; 0x53f8 <MENU_vidControlMenu+0x1ffa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    53d0:	6d 89       	ldd	r22, Y+21	; 0x15
    53d2:	7e 89       	ldd	r23, Y+22	; 0x16
    53d4:	8f 89       	ldd	r24, Y+23	; 0x17
    53d6:	98 8d       	ldd	r25, Y+24	; 0x18
    53d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53dc:	dc 01       	movw	r26, r24
    53de:	cb 01       	movw	r24, r22
    53e0:	9c 8b       	std	Y+20, r25	; 0x14
    53e2:	8b 8b       	std	Y+19, r24	; 0x13
    53e4:	8b 89       	ldd	r24, Y+19	; 0x13
    53e6:	9c 89       	ldd	r25, Y+20	; 0x14
    53e8:	98 8b       	std	Y+16, r25	; 0x10
    53ea:	8f 87       	std	Y+15, r24	; 0x0f
    53ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    53ee:	98 89       	ldd	r25, Y+16	; 0x10
    53f0:	01 97       	sbiw	r24, 0x01	; 1
    53f2:	f1 f7       	brne	.-4      	; 0x53f0 <MENU_vidControlMenu+0x1ff2>
    53f4:	98 8b       	std	Y+16, r25	; 0x10
    53f6:	8f 87       	std	Y+15, r24	; 0x0f
										_delay_ms(500);
										Local_u8Choice = '-';
    53f8:	fe 01       	movw	r30, r28
    53fa:	e3 5f       	subi	r30, 0xF3	; 243
    53fc:	fe 4f       	sbci	r31, 0xFE	; 254
    53fe:	8d e2       	ldi	r24, 0x2D	; 45
    5400:	80 83       	st	Z, r24
									case '/':
										break;
									case '-':
										break;
									}
								} while (Local_u8Choice != '-' && Local_u8Choice != '/');
    5402:	fe 01       	movw	r30, r28
    5404:	e3 5f       	subi	r30, 0xF3	; 243
    5406:	fe 4f       	sbci	r31, 0xFE	; 254
    5408:	80 81       	ld	r24, Z
    540a:	8d 32       	cpi	r24, 0x2D	; 45
    540c:	39 f0       	breq	.+14     	; 0x541c <MENU_vidControlMenu+0x201e>
    540e:	fe 01       	movw	r30, r28
    5410:	e3 5f       	subi	r30, 0xF3	; 243
    5412:	fe 4f       	sbci	r31, 0xFE	; 254
    5414:	80 81       	ld	r24, Z
    5416:	8f 32       	cpi	r24, 0x2F	; 47
    5418:	09 f0       	breq	.+2      	; 0x541c <MENU_vidControlMenu+0x201e>
    541a:	b4 ce       	rjmp	.-664    	; 0x5184 <MENU_vidControlMenu+0x1d86>
								Local_u8Choice = 0;
    541c:	fe 01       	movw	r30, r28
    541e:	e3 5f       	subi	r30, 0xF3	; 243
    5420:	fe 4f       	sbci	r31, 0xFE	; 254
    5422:	10 82       	st	Z, r1
							case '/':
								break;
							case '-':
								break;
							}
						} while (Local_u8Choice != '-' && Local_u8Choice != '/');
    5424:	fe 01       	movw	r30, r28
    5426:	e3 5f       	subi	r30, 0xF3	; 243
    5428:	fe 4f       	sbci	r31, 0xFE	; 254
    542a:	80 81       	ld	r24, Z
    542c:	8d 32       	cpi	r24, 0x2D	; 45
    542e:	39 f0       	breq	.+14     	; 0x543e <MENU_vidControlMenu+0x2040>
    5430:	fe 01       	movw	r30, r28
    5432:	e3 5f       	subi	r30, 0xF3	; 243
    5434:	fe 4f       	sbci	r31, 0xFE	; 254
    5436:	80 81       	ld	r24, Z
    5438:	8f 32       	cpi	r24, 0x2F	; 47
    543a:	09 f0       	breq	.+2      	; 0x543e <MENU_vidControlMenu+0x2040>
    543c:	0b cd       	rjmp	.-1514   	; 0x4e54 <MENU_vidControlMenu+0x1a56>
						Local_u8Choice = 0;
    543e:	fe 01       	movw	r30, r28
    5440:	e3 5f       	subi	r30, 0xF3	; 243
    5442:	fe 4f       	sbci	r31, 0xFE	; 254
    5444:	10 82       	st	Z, r1
					case '/':
						break;
					case '-':
						break;
					}
				} while (Local_u8Choice != '-' && Local_u8Choice != '/');
    5446:	fe 01       	movw	r30, r28
    5448:	e3 5f       	subi	r30, 0xF3	; 243
    544a:	fe 4f       	sbci	r31, 0xFE	; 254
    544c:	80 81       	ld	r24, Z
    544e:	8d 32       	cpi	r24, 0x2D	; 45
    5450:	39 f0       	breq	.+14     	; 0x5460 <MENU_vidControlMenu+0x2062>
    5452:	fe 01       	movw	r30, r28
    5454:	e3 5f       	subi	r30, 0xF3	; 243
    5456:	fe 4f       	sbci	r31, 0xFE	; 254
    5458:	80 81       	ld	r24, Z
    545a:	8f 32       	cpi	r24, 0x2F	; 47
    545c:	09 f0       	breq	.+2      	; 0x5460 <MENU_vidControlMenu+0x2062>
    545e:	12 c9       	rjmp	.-3548   	; 0x4684 <MENU_vidControlMenu+0x1286>
				Local_u8Choice = 0;
    5460:	fe 01       	movw	r30, r28
    5462:	e3 5f       	subi	r30, 0xF3	; 243
    5464:	fe 4f       	sbci	r31, 0xFE	; 254
    5466:	10 82       	st	Z, r1
			} while (Local_u8Choice != '-' && Local_u8Choice != '/');
    5468:	fe 01       	movw	r30, r28
    546a:	e3 5f       	subi	r30, 0xF3	; 243
    546c:	fe 4f       	sbci	r31, 0xFE	; 254
    546e:	80 81       	ld	r24, Z
    5470:	8d 32       	cpi	r24, 0x2D	; 45
    5472:	39 f0       	breq	.+14     	; 0x5482 <MENU_vidControlMenu+0x2084>
    5474:	fe 01       	movw	r30, r28
    5476:	e3 5f       	subi	r30, 0xF3	; 243
    5478:	fe 4f       	sbci	r31, 0xFE	; 254
    547a:	80 81       	ld	r24, Z
    547c:	8f 32       	cpi	r24, 0x2F	; 47
    547e:	09 f0       	breq	.+2      	; 0x5482 <MENU_vidControlMenu+0x2084>
    5480:	af c8       	rjmp	.-3746   	; 0x45e0 <MENU_vidControlMenu+0x11e2>
			Local_u8Choice = 0;
    5482:	fe 01       	movw	r30, r28
    5484:	e3 5f       	subi	r30, 0xF3	; 243
    5486:	fe 4f       	sbci	r31, 0xFE	; 254
    5488:	10 82       	st	Z, r1
    548a:	0c 94 10 1a 	jmp	0x3420	; 0x3420 <MENU_vidControlMenu+0x22>
			break;
		case '*':
			do
			{
				LCD_Clear_Display();
    548e:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_Clear_Display>
				LCD_enuSendString("3: Kitchen Unit");
    5492:	81 ec       	ldi	r24, 0xC1	; 193
    5494:	92 e0       	ldi	r25, 0x02	; 2
    5496:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
				LCD_enuChangePosition(1, 0);
    549a:	81 e0       	ldi	r24, 0x01	; 1
    549c:	60 e0       	ldi	r22, 0x00	; 0
    549e:	0e 94 1e 12 	call	0x243c	; 0x243c <LCD_enuChangePosition>
				LCD_enuSendString("               ^");
    54a2:	81 ed       	ldi	r24, 0xD1	; 209
    54a4:	92 e0       	ldi	r25, 0x02	; 2
    54a6:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
				Local_u8Choice = GetChioce();
    54aa:	0e 94 28 2b 	call	0x5650	; 0x5650 <GetChioce>
    54ae:	fe 01       	movw	r30, r28
    54b0:	e3 5f       	subi	r30, 0xF3	; 243
    54b2:	fe 4f       	sbci	r31, 0xFE	; 254
    54b4:	80 83       	st	Z, r24
				switch (Local_u8Choice)
    54b6:	fe 01       	movw	r30, r28
    54b8:	e3 5f       	subi	r30, 0xF3	; 243
    54ba:	fe 4f       	sbci	r31, 0xFE	; 254
    54bc:	80 81       	ld	r24, Z
    54be:	88 2f       	mov	r24, r24
    54c0:	90 e0       	ldi	r25, 0x00	; 0
    54c2:	83 33       	cpi	r24, 0x33	; 51
    54c4:	91 05       	cpc	r25, r1
    54c6:	09 f0       	breq	.+2      	; 0x54ca <MENU_vidControlMenu+0x20cc>
    54c8:	b0 c0       	rjmp	.+352    	; 0x562a <MENU_vidControlMenu+0x222c>
				{
				case '3':
					do
					{
						LCD_Clear_Display();
    54ca:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_Clear_Display>
						LCD_enuSendString("1:WaitFor Oven");
    54ce:	82 ee       	ldi	r24, 0xE2	; 226
    54d0:	92 e0       	ldi	r25, 0x02	; 2
    54d2:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
						Local_u8Choice = GetChioce();
    54d6:	0e 94 28 2b 	call	0x5650	; 0x5650 <GetChioce>
    54da:	fe 01       	movw	r30, r28
    54dc:	e3 5f       	subi	r30, 0xF3	; 243
    54de:	fe 4f       	sbci	r31, 0xFE	; 254
    54e0:	80 83       	st	Z, r24
						switch (Local_u8Choice)
    54e2:	fe 01       	movw	r30, r28
    54e4:	e3 5f       	subi	r30, 0xF3	; 243
    54e6:	fe 4f       	sbci	r31, 0xFE	; 254
    54e8:	80 81       	ld	r24, Z
    54ea:	88 2f       	mov	r24, r24
    54ec:	90 e0       	ldi	r25, 0x00	; 0
    54ee:	81 33       	cpi	r24, 0x31	; 49
    54f0:	91 05       	cpc	r25, r1
    54f2:	09 f0       	breq	.+2      	; 0x54f6 <MENU_vidControlMenu+0x20f8>
    54f4:	89 c0       	rjmp	.+274    	; 0x5608 <MENU_vidControlMenu+0x220a>
						{
						case '1':
							LCD_Clear_Display();
    54f6:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_Clear_Display>
							LCD_enuSendString("Waiting. . . ");
    54fa:	81 ef       	ldi	r24, 0xF1	; 241
    54fc:	92 e0       	ldi	r25, 0x02	; 2
    54fe:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
							MENU_vidWaitAndRecieve(36, 55);
    5502:	84 e2       	ldi	r24, 0x24	; 36
    5504:	67 e3       	ldi	r22, 0x37	; 55
    5506:	0e 94 70 2c 	call	0x58e0	; 0x58e0 <MENU_vidWaitAndRecieve>
							LCD_Clear_Display();
    550a:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_Clear_Display>
							LCD_enuSendString("Oven finished");
    550e:	8f ef       	ldi	r24, 0xFF	; 255
    5510:	92 e0       	ldi	r25, 0x02	; 2
    5512:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
							LaunchBuzzer();
    5516:	0e 94 3a 2b 	call	0x5674	; 0x5674 <LaunchBuzzer>
    551a:	80 e0       	ldi	r24, 0x00	; 0
    551c:	90 e0       	ldi	r25, 0x00	; 0
    551e:	aa ef       	ldi	r26, 0xFA	; 250
    5520:	b3 e4       	ldi	r27, 0x43	; 67
    5522:	8b 87       	std	Y+11, r24	; 0x0b
    5524:	9c 87       	std	Y+12, r25	; 0x0c
    5526:	ad 87       	std	Y+13, r26	; 0x0d
    5528:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    552a:	6b 85       	ldd	r22, Y+11	; 0x0b
    552c:	7c 85       	ldd	r23, Y+12	; 0x0c
    552e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5530:	9e 85       	ldd	r25, Y+14	; 0x0e
    5532:	20 e0       	ldi	r18, 0x00	; 0
    5534:	30 e0       	ldi	r19, 0x00	; 0
    5536:	4a e7       	ldi	r20, 0x7A	; 122
    5538:	55 e4       	ldi	r21, 0x45	; 69
    553a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    553e:	dc 01       	movw	r26, r24
    5540:	cb 01       	movw	r24, r22
    5542:	8f 83       	std	Y+7, r24	; 0x07
    5544:	98 87       	std	Y+8, r25	; 0x08
    5546:	a9 87       	std	Y+9, r26	; 0x09
    5548:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    554a:	6f 81       	ldd	r22, Y+7	; 0x07
    554c:	78 85       	ldd	r23, Y+8	; 0x08
    554e:	89 85       	ldd	r24, Y+9	; 0x09
    5550:	9a 85       	ldd	r25, Y+10	; 0x0a
    5552:	20 e0       	ldi	r18, 0x00	; 0
    5554:	30 e0       	ldi	r19, 0x00	; 0
    5556:	40 e8       	ldi	r20, 0x80	; 128
    5558:	5f e3       	ldi	r21, 0x3F	; 63
    555a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    555e:	88 23       	and	r24, r24
    5560:	2c f4       	brge	.+10     	; 0x556c <MENU_vidControlMenu+0x216e>
		__ticks = 1;
    5562:	81 e0       	ldi	r24, 0x01	; 1
    5564:	90 e0       	ldi	r25, 0x00	; 0
    5566:	9e 83       	std	Y+6, r25	; 0x06
    5568:	8d 83       	std	Y+5, r24	; 0x05
    556a:	3f c0       	rjmp	.+126    	; 0x55ea <MENU_vidControlMenu+0x21ec>
	else if (__tmp > 65535)
    556c:	6f 81       	ldd	r22, Y+7	; 0x07
    556e:	78 85       	ldd	r23, Y+8	; 0x08
    5570:	89 85       	ldd	r24, Y+9	; 0x09
    5572:	9a 85       	ldd	r25, Y+10	; 0x0a
    5574:	20 e0       	ldi	r18, 0x00	; 0
    5576:	3f ef       	ldi	r19, 0xFF	; 255
    5578:	4f e7       	ldi	r20, 0x7F	; 127
    557a:	57 e4       	ldi	r21, 0x47	; 71
    557c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5580:	18 16       	cp	r1, r24
    5582:	4c f5       	brge	.+82     	; 0x55d6 <MENU_vidControlMenu+0x21d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5584:	6b 85       	ldd	r22, Y+11	; 0x0b
    5586:	7c 85       	ldd	r23, Y+12	; 0x0c
    5588:	8d 85       	ldd	r24, Y+13	; 0x0d
    558a:	9e 85       	ldd	r25, Y+14	; 0x0e
    558c:	20 e0       	ldi	r18, 0x00	; 0
    558e:	30 e0       	ldi	r19, 0x00	; 0
    5590:	40 e2       	ldi	r20, 0x20	; 32
    5592:	51 e4       	ldi	r21, 0x41	; 65
    5594:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5598:	dc 01       	movw	r26, r24
    559a:	cb 01       	movw	r24, r22
    559c:	bc 01       	movw	r22, r24
    559e:	cd 01       	movw	r24, r26
    55a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55a4:	dc 01       	movw	r26, r24
    55a6:	cb 01       	movw	r24, r22
    55a8:	9e 83       	std	Y+6, r25	; 0x06
    55aa:	8d 83       	std	Y+5, r24	; 0x05
    55ac:	0f c0       	rjmp	.+30     	; 0x55cc <MENU_vidControlMenu+0x21ce>
    55ae:	80 e9       	ldi	r24, 0x90	; 144
    55b0:	91 e0       	ldi	r25, 0x01	; 1
    55b2:	9c 83       	std	Y+4, r25	; 0x04
    55b4:	8b 83       	std	Y+3, r24	; 0x03
    55b6:	8b 81       	ldd	r24, Y+3	; 0x03
    55b8:	9c 81       	ldd	r25, Y+4	; 0x04
    55ba:	01 97       	sbiw	r24, 0x01	; 1
    55bc:	f1 f7       	brne	.-4      	; 0x55ba <MENU_vidControlMenu+0x21bc>
    55be:	9c 83       	std	Y+4, r25	; 0x04
    55c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    55c2:	8d 81       	ldd	r24, Y+5	; 0x05
    55c4:	9e 81       	ldd	r25, Y+6	; 0x06
    55c6:	01 97       	sbiw	r24, 0x01	; 1
    55c8:	9e 83       	std	Y+6, r25	; 0x06
    55ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    55cc:	8d 81       	ldd	r24, Y+5	; 0x05
    55ce:	9e 81       	ldd	r25, Y+6	; 0x06
    55d0:	00 97       	sbiw	r24, 0x00	; 0
    55d2:	69 f7       	brne	.-38     	; 0x55ae <MENU_vidControlMenu+0x21b0>
    55d4:	14 c0       	rjmp	.+40     	; 0x55fe <MENU_vidControlMenu+0x2200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    55d6:	6f 81       	ldd	r22, Y+7	; 0x07
    55d8:	78 85       	ldd	r23, Y+8	; 0x08
    55da:	89 85       	ldd	r24, Y+9	; 0x09
    55dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    55de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55e2:	dc 01       	movw	r26, r24
    55e4:	cb 01       	movw	r24, r22
    55e6:	9e 83       	std	Y+6, r25	; 0x06
    55e8:	8d 83       	std	Y+5, r24	; 0x05
    55ea:	8d 81       	ldd	r24, Y+5	; 0x05
    55ec:	9e 81       	ldd	r25, Y+6	; 0x06
    55ee:	9a 83       	std	Y+2, r25	; 0x02
    55f0:	89 83       	std	Y+1, r24	; 0x01
    55f2:	89 81       	ldd	r24, Y+1	; 0x01
    55f4:	9a 81       	ldd	r25, Y+2	; 0x02
    55f6:	01 97       	sbiw	r24, 0x01	; 1
    55f8:	f1 f7       	brne	.-4      	; 0x55f6 <MENU_vidControlMenu+0x21f8>
    55fa:	9a 83       	std	Y+2, r25	; 0x02
    55fc:	89 83       	std	Y+1, r24	; 0x01
							_delay_ms(500);
							Local_u8Choice = '-';
    55fe:	fe 01       	movw	r30, r28
    5600:	e3 5f       	subi	r30, 0xF3	; 243
    5602:	fe 4f       	sbci	r31, 0xFE	; 254
    5604:	8d e2       	ldi	r24, 0x2D	; 45
    5606:	80 83       	st	Z, r24
						case '/':
							break;
						case '-':
							break;
						}
					} while (Local_u8Choice != '-' && Local_u8Choice != '/');
    5608:	fe 01       	movw	r30, r28
    560a:	e3 5f       	subi	r30, 0xF3	; 243
    560c:	fe 4f       	sbci	r31, 0xFE	; 254
    560e:	80 81       	ld	r24, Z
    5610:	8d 32       	cpi	r24, 0x2D	; 45
    5612:	39 f0       	breq	.+14     	; 0x5622 <MENU_vidControlMenu+0x2224>
    5614:	fe 01       	movw	r30, r28
    5616:	e3 5f       	subi	r30, 0xF3	; 243
    5618:	fe 4f       	sbci	r31, 0xFE	; 254
    561a:	80 81       	ld	r24, Z
    561c:	8f 32       	cpi	r24, 0x2F	; 47
    561e:	09 f0       	breq	.+2      	; 0x5622 <MENU_vidControlMenu+0x2224>
    5620:	54 cf       	rjmp	.-344    	; 0x54ca <MENU_vidControlMenu+0x20cc>
					Local_u8Choice = 0;
    5622:	fe 01       	movw	r30, r28
    5624:	e3 5f       	subi	r30, 0xF3	; 243
    5626:	fe 4f       	sbci	r31, 0xFE	; 254
    5628:	10 82       	st	Z, r1
				case '/':
					break;
				case '-':
					break;
				}
			} while (Local_u8Choice != '-' && Local_u8Choice != '/');
    562a:	fe 01       	movw	r30, r28
    562c:	e3 5f       	subi	r30, 0xF3	; 243
    562e:	fe 4f       	sbci	r31, 0xFE	; 254
    5630:	80 81       	ld	r24, Z
    5632:	8d 32       	cpi	r24, 0x2D	; 45
    5634:	39 f0       	breq	.+14     	; 0x5644 <MENU_vidControlMenu+0x2246>
    5636:	fe 01       	movw	r30, r28
    5638:	e3 5f       	subi	r30, 0xF3	; 243
    563a:	fe 4f       	sbci	r31, 0xFE	; 254
    563c:	80 81       	ld	r24, Z
    563e:	8f 32       	cpi	r24, 0x2F	; 47
    5640:	09 f0       	breq	.+2      	; 0x5644 <MENU_vidControlMenu+0x2246>
    5642:	25 cf       	rjmp	.-438    	; 0x548e <MENU_vidControlMenu+0x2090>
			Local_u8Choice = 0;
    5644:	fe 01       	movw	r30, r28
    5646:	e3 5f       	subi	r30, 0xF3	; 243
    5648:	fe 4f       	sbci	r31, 0xFE	; 254
    564a:	10 82       	st	Z, r1
    564c:	0c 94 10 1a 	jmp	0x3420	; 0x3420 <MENU_vidControlMenu+0x22>

00005650 <GetChioce>:
			break;
		}
	}
}
u8 GetChioce(void)
{
    5650:	df 93       	push	r29
    5652:	cf 93       	push	r28
    5654:	0f 92       	push	r0
    5656:	cd b7       	in	r28, 0x3d	; 61
    5658:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8_PressedKey = 0;
    565a:	19 82       	std	Y+1, r1	; 0x01
	do
	{
		KEYPAD_vidGetPressedKey(&Local_u8_PressedKey);
    565c:	ce 01       	movw	r24, r28
    565e:	01 96       	adiw	r24, 0x01	; 1
    5660:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <KEYPAD_vidGetPressedKey>
		if (Local_u8_PressedKey != 0)
    5664:	89 81       	ldd	r24, Y+1	; 0x01
    5666:	88 23       	and	r24, r24
    5668:	c9 f3       	breq	.-14     	; 0x565c <GetChioce+0xc>
		{
			return Local_u8_PressedKey;
    566a:	89 81       	ldd	r24, Y+1	; 0x01
		}

	} while (1);
}
    566c:	0f 90       	pop	r0
    566e:	cf 91       	pop	r28
    5670:	df 91       	pop	r29
    5672:	08 95       	ret

00005674 <LaunchBuzzer>:
void LaunchBuzzer(void)
{
    5674:	df 93       	push	r29
    5676:	cf 93       	push	r28
    5678:	cd b7       	in	r28, 0x3d	; 61
    567a:	de b7       	in	r29, 0x3e	; 62
    567c:	2e 97       	sbiw	r28, 0x0e	; 14
    567e:	0f b6       	in	r0, 0x3f	; 63
    5680:	f8 94       	cli
    5682:	de bf       	out	0x3e, r29	; 62
    5684:	0f be       	out	0x3f, r0	; 63
    5686:	cd bf       	out	0x3d, r28	; 61
	DIO_enuSetPinValue(DIO_u8_PORTD, DIO_u8_PIN0, DIO_u8_HIGH);
    5688:	83 e0       	ldi	r24, 0x03	; 3
    568a:	60 e0       	ldi	r22, 0x00	; 0
    568c:	41 e0       	ldi	r20, 0x01	; 1
    568e:	0e 94 51 09 	call	0x12a2	; 0x12a2 <DIO_enuSetPinValue>
    5692:	80 e0       	ldi	r24, 0x00	; 0
    5694:	90 e0       	ldi	r25, 0x00	; 0
    5696:	aa e7       	ldi	r26, 0x7A	; 122
    5698:	b4 e4       	ldi	r27, 0x44	; 68
    569a:	8b 87       	std	Y+11, r24	; 0x0b
    569c:	9c 87       	std	Y+12, r25	; 0x0c
    569e:	ad 87       	std	Y+13, r26	; 0x0d
    56a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    56a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    56a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    56a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    56a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    56aa:	20 e0       	ldi	r18, 0x00	; 0
    56ac:	30 e0       	ldi	r19, 0x00	; 0
    56ae:	4a e7       	ldi	r20, 0x7A	; 122
    56b0:	55 e4       	ldi	r21, 0x45	; 69
    56b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56b6:	dc 01       	movw	r26, r24
    56b8:	cb 01       	movw	r24, r22
    56ba:	8f 83       	std	Y+7, r24	; 0x07
    56bc:	98 87       	std	Y+8, r25	; 0x08
    56be:	a9 87       	std	Y+9, r26	; 0x09
    56c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    56c2:	6f 81       	ldd	r22, Y+7	; 0x07
    56c4:	78 85       	ldd	r23, Y+8	; 0x08
    56c6:	89 85       	ldd	r24, Y+9	; 0x09
    56c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    56ca:	20 e0       	ldi	r18, 0x00	; 0
    56cc:	30 e0       	ldi	r19, 0x00	; 0
    56ce:	40 e8       	ldi	r20, 0x80	; 128
    56d0:	5f e3       	ldi	r21, 0x3F	; 63
    56d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    56d6:	88 23       	and	r24, r24
    56d8:	2c f4       	brge	.+10     	; 0x56e4 <LaunchBuzzer+0x70>
		__ticks = 1;
    56da:	81 e0       	ldi	r24, 0x01	; 1
    56dc:	90 e0       	ldi	r25, 0x00	; 0
    56de:	9e 83       	std	Y+6, r25	; 0x06
    56e0:	8d 83       	std	Y+5, r24	; 0x05
    56e2:	3f c0       	rjmp	.+126    	; 0x5762 <LaunchBuzzer+0xee>
	else if (__tmp > 65535)
    56e4:	6f 81       	ldd	r22, Y+7	; 0x07
    56e6:	78 85       	ldd	r23, Y+8	; 0x08
    56e8:	89 85       	ldd	r24, Y+9	; 0x09
    56ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    56ec:	20 e0       	ldi	r18, 0x00	; 0
    56ee:	3f ef       	ldi	r19, 0xFF	; 255
    56f0:	4f e7       	ldi	r20, 0x7F	; 127
    56f2:	57 e4       	ldi	r21, 0x47	; 71
    56f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    56f8:	18 16       	cp	r1, r24
    56fa:	4c f5       	brge	.+82     	; 0x574e <LaunchBuzzer+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    56fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    56fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    5700:	8d 85       	ldd	r24, Y+13	; 0x0d
    5702:	9e 85       	ldd	r25, Y+14	; 0x0e
    5704:	20 e0       	ldi	r18, 0x00	; 0
    5706:	30 e0       	ldi	r19, 0x00	; 0
    5708:	40 e2       	ldi	r20, 0x20	; 32
    570a:	51 e4       	ldi	r21, 0x41	; 65
    570c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5710:	dc 01       	movw	r26, r24
    5712:	cb 01       	movw	r24, r22
    5714:	bc 01       	movw	r22, r24
    5716:	cd 01       	movw	r24, r26
    5718:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    571c:	dc 01       	movw	r26, r24
    571e:	cb 01       	movw	r24, r22
    5720:	9e 83       	std	Y+6, r25	; 0x06
    5722:	8d 83       	std	Y+5, r24	; 0x05
    5724:	0f c0       	rjmp	.+30     	; 0x5744 <LaunchBuzzer+0xd0>
    5726:	80 e9       	ldi	r24, 0x90	; 144
    5728:	91 e0       	ldi	r25, 0x01	; 1
    572a:	9c 83       	std	Y+4, r25	; 0x04
    572c:	8b 83       	std	Y+3, r24	; 0x03
    572e:	8b 81       	ldd	r24, Y+3	; 0x03
    5730:	9c 81       	ldd	r25, Y+4	; 0x04
    5732:	01 97       	sbiw	r24, 0x01	; 1
    5734:	f1 f7       	brne	.-4      	; 0x5732 <LaunchBuzzer+0xbe>
    5736:	9c 83       	std	Y+4, r25	; 0x04
    5738:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    573a:	8d 81       	ldd	r24, Y+5	; 0x05
    573c:	9e 81       	ldd	r25, Y+6	; 0x06
    573e:	01 97       	sbiw	r24, 0x01	; 1
    5740:	9e 83       	std	Y+6, r25	; 0x06
    5742:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5744:	8d 81       	ldd	r24, Y+5	; 0x05
    5746:	9e 81       	ldd	r25, Y+6	; 0x06
    5748:	00 97       	sbiw	r24, 0x00	; 0
    574a:	69 f7       	brne	.-38     	; 0x5726 <LaunchBuzzer+0xb2>
    574c:	14 c0       	rjmp	.+40     	; 0x5776 <LaunchBuzzer+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    574e:	6f 81       	ldd	r22, Y+7	; 0x07
    5750:	78 85       	ldd	r23, Y+8	; 0x08
    5752:	89 85       	ldd	r24, Y+9	; 0x09
    5754:	9a 85       	ldd	r25, Y+10	; 0x0a
    5756:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    575a:	dc 01       	movw	r26, r24
    575c:	cb 01       	movw	r24, r22
    575e:	9e 83       	std	Y+6, r25	; 0x06
    5760:	8d 83       	std	Y+5, r24	; 0x05
    5762:	8d 81       	ldd	r24, Y+5	; 0x05
    5764:	9e 81       	ldd	r25, Y+6	; 0x06
    5766:	9a 83       	std	Y+2, r25	; 0x02
    5768:	89 83       	std	Y+1, r24	; 0x01
    576a:	89 81       	ldd	r24, Y+1	; 0x01
    576c:	9a 81       	ldd	r25, Y+2	; 0x02
    576e:	01 97       	sbiw	r24, 0x01	; 1
    5770:	f1 f7       	brne	.-4      	; 0x576e <LaunchBuzzer+0xfa>
    5772:	9a 83       	std	Y+2, r25	; 0x02
    5774:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	DIO_enuSetPinValue(DIO_u8_PORTD, DIO_u8_PIN0, DIO_u8_LOW);
    5776:	83 e0       	ldi	r24, 0x03	; 3
    5778:	60 e0       	ldi	r22, 0x00	; 0
    577a:	40 e0       	ldi	r20, 0x00	; 0
    577c:	0e 94 51 09 	call	0x12a2	; 0x12a2 <DIO_enuSetPinValue>
}
    5780:	2e 96       	adiw	r28, 0x0e	; 14
    5782:	0f b6       	in	r0, 0x3f	; 63
    5784:	f8 94       	cli
    5786:	de bf       	out	0x3e, r29	; 62
    5788:	0f be       	out	0x3f, r0	; 63
    578a:	cd bf       	out	0x3d, r28	; 61
    578c:	cf 91       	pop	r28
    578e:	df 91       	pop	r29
    5790:	08 95       	ret

00005792 <ReleaseBuzzer>:
void ReleaseBuzzer(void)
{
    5792:	df 93       	push	r29
    5794:	cf 93       	push	r28
    5796:	cd b7       	in	r28, 0x3d	; 61
    5798:	de b7       	in	r29, 0x3e	; 62
	DIO_enuSetPinValue(DIO_u8_PORTD, DIO_u8_PIN0, DIO_u8_HIGH);
    579a:	83 e0       	ldi	r24, 0x03	; 3
    579c:	60 e0       	ldi	r22, 0x00	; 0
    579e:	41 e0       	ldi	r20, 0x01	; 1
    57a0:	0e 94 51 09 	call	0x12a2	; 0x12a2 <DIO_enuSetPinValue>
}
    57a4:	cf 91       	pop	r28
    57a6:	df 91       	pop	r29
    57a8:	08 95       	ret

000057aa <MENU_vidSendInstruction>:
void MENU_vidSendInstruction(u8 Copy_pu8Instruction, u8 Copy_pu8SlaveSelect)
{
    57aa:	df 93       	push	r29
    57ac:	cf 93       	push	r28
    57ae:	cd b7       	in	r28, 0x3d	; 61
    57b0:	de b7       	in	r29, 0x3e	; 62
    57b2:	60 97       	sbiw	r28, 0x10	; 16
    57b4:	0f b6       	in	r0, 0x3f	; 63
    57b6:	f8 94       	cli
    57b8:	de bf       	out	0x3e, r29	; 62
    57ba:	0f be       	out	0x3f, r0	; 63
    57bc:	cd bf       	out	0x3d, r28	; 61
    57be:	8f 87       	std	Y+15, r24	; 0x0f
    57c0:	68 8b       	std	Y+16, r22	; 0x10
	switch (Copy_pu8SlaveSelect)
    57c2:	88 89       	ldd	r24, Y+16	; 0x10
    57c4:	88 2f       	mov	r24, r24
    57c6:	90 e0       	ldi	r25, 0x00	; 0
    57c8:	00 97       	sbiw	r24, 0x00	; 0
    57ca:	09 f0       	breq	.+2      	; 0x57ce <MENU_vidSendInstruction+0x24>
    57cc:	80 c0       	rjmp	.+256    	; 0x58ce <MENU_vidSendInstruction+0x124>
	{
	case 0:
		DIO_enuSetPinValue(DIO_u8_PORTB, DIO_u8_PIN1, DIO_u8_LOW);
    57ce:	81 e0       	ldi	r24, 0x01	; 1
    57d0:	61 e0       	ldi	r22, 0x01	; 1
    57d2:	40 e0       	ldi	r20, 0x00	; 0
    57d4:	0e 94 51 09 	call	0x12a2	; 0x12a2 <DIO_enuSetPinValue>
		SPI_enuTranscieveAsynch(&Copy_pu8Instruction);
    57d8:	ce 01       	movw	r24, r28
    57da:	0f 96       	adiw	r24, 0x0f	; 15
    57dc:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <SPI_enuTranscieveAsynch>
    57e0:	80 e0       	ldi	r24, 0x00	; 0
    57e2:	90 e0       	ldi	r25, 0x00	; 0
    57e4:	aa e7       	ldi	r26, 0x7A	; 122
    57e6:	b3 e4       	ldi	r27, 0x43	; 67
    57e8:	8b 87       	std	Y+11, r24	; 0x0b
    57ea:	9c 87       	std	Y+12, r25	; 0x0c
    57ec:	ad 87       	std	Y+13, r26	; 0x0d
    57ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    57f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    57f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    57f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    57f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    57f8:	20 e0       	ldi	r18, 0x00	; 0
    57fa:	30 e0       	ldi	r19, 0x00	; 0
    57fc:	4a e7       	ldi	r20, 0x7A	; 122
    57fe:	55 e4       	ldi	r21, 0x45	; 69
    5800:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5804:	dc 01       	movw	r26, r24
    5806:	cb 01       	movw	r24, r22
    5808:	8f 83       	std	Y+7, r24	; 0x07
    580a:	98 87       	std	Y+8, r25	; 0x08
    580c:	a9 87       	std	Y+9, r26	; 0x09
    580e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5810:	6f 81       	ldd	r22, Y+7	; 0x07
    5812:	78 85       	ldd	r23, Y+8	; 0x08
    5814:	89 85       	ldd	r24, Y+9	; 0x09
    5816:	9a 85       	ldd	r25, Y+10	; 0x0a
    5818:	20 e0       	ldi	r18, 0x00	; 0
    581a:	30 e0       	ldi	r19, 0x00	; 0
    581c:	40 e8       	ldi	r20, 0x80	; 128
    581e:	5f e3       	ldi	r21, 0x3F	; 63
    5820:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5824:	88 23       	and	r24, r24
    5826:	2c f4       	brge	.+10     	; 0x5832 <MENU_vidSendInstruction+0x88>
		__ticks = 1;
    5828:	81 e0       	ldi	r24, 0x01	; 1
    582a:	90 e0       	ldi	r25, 0x00	; 0
    582c:	9e 83       	std	Y+6, r25	; 0x06
    582e:	8d 83       	std	Y+5, r24	; 0x05
    5830:	3f c0       	rjmp	.+126    	; 0x58b0 <MENU_vidSendInstruction+0x106>
	else if (__tmp > 65535)
    5832:	6f 81       	ldd	r22, Y+7	; 0x07
    5834:	78 85       	ldd	r23, Y+8	; 0x08
    5836:	89 85       	ldd	r24, Y+9	; 0x09
    5838:	9a 85       	ldd	r25, Y+10	; 0x0a
    583a:	20 e0       	ldi	r18, 0x00	; 0
    583c:	3f ef       	ldi	r19, 0xFF	; 255
    583e:	4f e7       	ldi	r20, 0x7F	; 127
    5840:	57 e4       	ldi	r21, 0x47	; 71
    5842:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5846:	18 16       	cp	r1, r24
    5848:	4c f5       	brge	.+82     	; 0x589c <MENU_vidSendInstruction+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    584a:	6b 85       	ldd	r22, Y+11	; 0x0b
    584c:	7c 85       	ldd	r23, Y+12	; 0x0c
    584e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5850:	9e 85       	ldd	r25, Y+14	; 0x0e
    5852:	20 e0       	ldi	r18, 0x00	; 0
    5854:	30 e0       	ldi	r19, 0x00	; 0
    5856:	40 e2       	ldi	r20, 0x20	; 32
    5858:	51 e4       	ldi	r21, 0x41	; 65
    585a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    585e:	dc 01       	movw	r26, r24
    5860:	cb 01       	movw	r24, r22
    5862:	bc 01       	movw	r22, r24
    5864:	cd 01       	movw	r24, r26
    5866:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    586a:	dc 01       	movw	r26, r24
    586c:	cb 01       	movw	r24, r22
    586e:	9e 83       	std	Y+6, r25	; 0x06
    5870:	8d 83       	std	Y+5, r24	; 0x05
    5872:	0f c0       	rjmp	.+30     	; 0x5892 <MENU_vidSendInstruction+0xe8>
    5874:	80 e9       	ldi	r24, 0x90	; 144
    5876:	91 e0       	ldi	r25, 0x01	; 1
    5878:	9c 83       	std	Y+4, r25	; 0x04
    587a:	8b 83       	std	Y+3, r24	; 0x03
    587c:	8b 81       	ldd	r24, Y+3	; 0x03
    587e:	9c 81       	ldd	r25, Y+4	; 0x04
    5880:	01 97       	sbiw	r24, 0x01	; 1
    5882:	f1 f7       	brne	.-4      	; 0x5880 <MENU_vidSendInstruction+0xd6>
    5884:	9c 83       	std	Y+4, r25	; 0x04
    5886:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5888:	8d 81       	ldd	r24, Y+5	; 0x05
    588a:	9e 81       	ldd	r25, Y+6	; 0x06
    588c:	01 97       	sbiw	r24, 0x01	; 1
    588e:	9e 83       	std	Y+6, r25	; 0x06
    5890:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5892:	8d 81       	ldd	r24, Y+5	; 0x05
    5894:	9e 81       	ldd	r25, Y+6	; 0x06
    5896:	00 97       	sbiw	r24, 0x00	; 0
    5898:	69 f7       	brne	.-38     	; 0x5874 <MENU_vidSendInstruction+0xca>
    589a:	14 c0       	rjmp	.+40     	; 0x58c4 <MENU_vidSendInstruction+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    589c:	6f 81       	ldd	r22, Y+7	; 0x07
    589e:	78 85       	ldd	r23, Y+8	; 0x08
    58a0:	89 85       	ldd	r24, Y+9	; 0x09
    58a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    58a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58a8:	dc 01       	movw	r26, r24
    58aa:	cb 01       	movw	r24, r22
    58ac:	9e 83       	std	Y+6, r25	; 0x06
    58ae:	8d 83       	std	Y+5, r24	; 0x05
    58b0:	8d 81       	ldd	r24, Y+5	; 0x05
    58b2:	9e 81       	ldd	r25, Y+6	; 0x06
    58b4:	9a 83       	std	Y+2, r25	; 0x02
    58b6:	89 83       	std	Y+1, r24	; 0x01
    58b8:	89 81       	ldd	r24, Y+1	; 0x01
    58ba:	9a 81       	ldd	r25, Y+2	; 0x02
    58bc:	01 97       	sbiw	r24, 0x01	; 1
    58be:	f1 f7       	brne	.-4      	; 0x58bc <MENU_vidSendInstruction+0x112>
    58c0:	9a 83       	std	Y+2, r25	; 0x02
    58c2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(250);
		DIO_enuSetPinValue(DIO_u8_PORTB, DIO_u8_PIN1, DIO_u8_HIGH);
    58c4:	81 e0       	ldi	r24, 0x01	; 1
    58c6:	61 e0       	ldi	r22, 0x01	; 1
    58c8:	41 e0       	ldi	r20, 0x01	; 1
    58ca:	0e 94 51 09 	call	0x12a2	; 0x12a2 <DIO_enuSetPinValue>
		break;
	}
}
    58ce:	60 96       	adiw	r28, 0x10	; 16
    58d0:	0f b6       	in	r0, 0x3f	; 63
    58d2:	f8 94       	cli
    58d4:	de bf       	out	0x3e, r29	; 62
    58d6:	0f be       	out	0x3f, r0	; 63
    58d8:	cd bf       	out	0x3d, r28	; 61
    58da:	cf 91       	pop	r28
    58dc:	df 91       	pop	r29
    58de:	08 95       	ret

000058e0 <MENU_vidWaitAndRecieve>:
void MENU_vidWaitAndRecieve(u8 Copy_u8ValueToWaitFor, u8 Copy_u8ValueToSend)
{
    58e0:	df 93       	push	r29
    58e2:	cf 93       	push	r28
    58e4:	cd b7       	in	r28, 0x3d	; 61
    58e6:	de b7       	in	r29, 0x3e	; 62
    58e8:	60 97       	sbiw	r28, 0x10	; 16
    58ea:	0f b6       	in	r0, 0x3f	; 63
    58ec:	f8 94       	cli
    58ee:	de bf       	out	0x3e, r29	; 62
    58f0:	0f be       	out	0x3f, r0	; 63
    58f2:	cd bf       	out	0x3d, r28	; 61
    58f4:	8f 87       	std	Y+15, r24	; 0x0f
    58f6:	68 8b       	std	Y+16, r22	; 0x10
	DIO_enuSetPinValue(DIO_u8_PORTB, DIO_u8_PIN1, DIO_u8_LOW);
    58f8:	81 e0       	ldi	r24, 0x01	; 1
    58fa:	61 e0       	ldi	r22, 0x01	; 1
    58fc:	40 e0       	ldi	r20, 0x00	; 0
    58fe:	0e 94 51 09 	call	0x12a2	; 0x12a2 <DIO_enuSetPinValue>
	while (1)
	{
		SPI_enuTranscieveAsynch(&Copy_u8ValueToSend);
    5902:	ce 01       	movw	r24, r28
    5904:	40 96       	adiw	r24, 0x10	; 16
    5906:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <SPI_enuTranscieveAsynch>
    590a:	80 e0       	ldi	r24, 0x00	; 0
    590c:	90 e0       	ldi	r25, 0x00	; 0
    590e:	aa e7       	ldi	r26, 0x7A	; 122
    5910:	b3 e4       	ldi	r27, 0x43	; 67
    5912:	8b 87       	std	Y+11, r24	; 0x0b
    5914:	9c 87       	std	Y+12, r25	; 0x0c
    5916:	ad 87       	std	Y+13, r26	; 0x0d
    5918:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    591a:	6b 85       	ldd	r22, Y+11	; 0x0b
    591c:	7c 85       	ldd	r23, Y+12	; 0x0c
    591e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5920:	9e 85       	ldd	r25, Y+14	; 0x0e
    5922:	20 e0       	ldi	r18, 0x00	; 0
    5924:	30 e0       	ldi	r19, 0x00	; 0
    5926:	4a e7       	ldi	r20, 0x7A	; 122
    5928:	55 e4       	ldi	r21, 0x45	; 69
    592a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    592e:	dc 01       	movw	r26, r24
    5930:	cb 01       	movw	r24, r22
    5932:	8f 83       	std	Y+7, r24	; 0x07
    5934:	98 87       	std	Y+8, r25	; 0x08
    5936:	a9 87       	std	Y+9, r26	; 0x09
    5938:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    593a:	6f 81       	ldd	r22, Y+7	; 0x07
    593c:	78 85       	ldd	r23, Y+8	; 0x08
    593e:	89 85       	ldd	r24, Y+9	; 0x09
    5940:	9a 85       	ldd	r25, Y+10	; 0x0a
    5942:	20 e0       	ldi	r18, 0x00	; 0
    5944:	30 e0       	ldi	r19, 0x00	; 0
    5946:	40 e8       	ldi	r20, 0x80	; 128
    5948:	5f e3       	ldi	r21, 0x3F	; 63
    594a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    594e:	88 23       	and	r24, r24
    5950:	2c f4       	brge	.+10     	; 0x595c <MENU_vidWaitAndRecieve+0x7c>
		__ticks = 1;
    5952:	81 e0       	ldi	r24, 0x01	; 1
    5954:	90 e0       	ldi	r25, 0x00	; 0
    5956:	9e 83       	std	Y+6, r25	; 0x06
    5958:	8d 83       	std	Y+5, r24	; 0x05
    595a:	3f c0       	rjmp	.+126    	; 0x59da <MENU_vidWaitAndRecieve+0xfa>
	else if (__tmp > 65535)
    595c:	6f 81       	ldd	r22, Y+7	; 0x07
    595e:	78 85       	ldd	r23, Y+8	; 0x08
    5960:	89 85       	ldd	r24, Y+9	; 0x09
    5962:	9a 85       	ldd	r25, Y+10	; 0x0a
    5964:	20 e0       	ldi	r18, 0x00	; 0
    5966:	3f ef       	ldi	r19, 0xFF	; 255
    5968:	4f e7       	ldi	r20, 0x7F	; 127
    596a:	57 e4       	ldi	r21, 0x47	; 71
    596c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5970:	18 16       	cp	r1, r24
    5972:	4c f5       	brge	.+82     	; 0x59c6 <MENU_vidWaitAndRecieve+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5974:	6b 85       	ldd	r22, Y+11	; 0x0b
    5976:	7c 85       	ldd	r23, Y+12	; 0x0c
    5978:	8d 85       	ldd	r24, Y+13	; 0x0d
    597a:	9e 85       	ldd	r25, Y+14	; 0x0e
    597c:	20 e0       	ldi	r18, 0x00	; 0
    597e:	30 e0       	ldi	r19, 0x00	; 0
    5980:	40 e2       	ldi	r20, 0x20	; 32
    5982:	51 e4       	ldi	r21, 0x41	; 65
    5984:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5988:	dc 01       	movw	r26, r24
    598a:	cb 01       	movw	r24, r22
    598c:	bc 01       	movw	r22, r24
    598e:	cd 01       	movw	r24, r26
    5990:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5994:	dc 01       	movw	r26, r24
    5996:	cb 01       	movw	r24, r22
    5998:	9e 83       	std	Y+6, r25	; 0x06
    599a:	8d 83       	std	Y+5, r24	; 0x05
    599c:	0f c0       	rjmp	.+30     	; 0x59bc <MENU_vidWaitAndRecieve+0xdc>
    599e:	80 e9       	ldi	r24, 0x90	; 144
    59a0:	91 e0       	ldi	r25, 0x01	; 1
    59a2:	9c 83       	std	Y+4, r25	; 0x04
    59a4:	8b 83       	std	Y+3, r24	; 0x03
    59a6:	8b 81       	ldd	r24, Y+3	; 0x03
    59a8:	9c 81       	ldd	r25, Y+4	; 0x04
    59aa:	01 97       	sbiw	r24, 0x01	; 1
    59ac:	f1 f7       	brne	.-4      	; 0x59aa <MENU_vidWaitAndRecieve+0xca>
    59ae:	9c 83       	std	Y+4, r25	; 0x04
    59b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    59b2:	8d 81       	ldd	r24, Y+5	; 0x05
    59b4:	9e 81       	ldd	r25, Y+6	; 0x06
    59b6:	01 97       	sbiw	r24, 0x01	; 1
    59b8:	9e 83       	std	Y+6, r25	; 0x06
    59ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    59bc:	8d 81       	ldd	r24, Y+5	; 0x05
    59be:	9e 81       	ldd	r25, Y+6	; 0x06
    59c0:	00 97       	sbiw	r24, 0x00	; 0
    59c2:	69 f7       	brne	.-38     	; 0x599e <MENU_vidWaitAndRecieve+0xbe>
    59c4:	14 c0       	rjmp	.+40     	; 0x59ee <MENU_vidWaitAndRecieve+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    59c6:	6f 81       	ldd	r22, Y+7	; 0x07
    59c8:	78 85       	ldd	r23, Y+8	; 0x08
    59ca:	89 85       	ldd	r24, Y+9	; 0x09
    59cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    59ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    59d2:	dc 01       	movw	r26, r24
    59d4:	cb 01       	movw	r24, r22
    59d6:	9e 83       	std	Y+6, r25	; 0x06
    59d8:	8d 83       	std	Y+5, r24	; 0x05
    59da:	8d 81       	ldd	r24, Y+5	; 0x05
    59dc:	9e 81       	ldd	r25, Y+6	; 0x06
    59de:	9a 83       	std	Y+2, r25	; 0x02
    59e0:	89 83       	std	Y+1, r24	; 0x01
    59e2:	89 81       	ldd	r24, Y+1	; 0x01
    59e4:	9a 81       	ldd	r25, Y+2	; 0x02
    59e6:	01 97       	sbiw	r24, 0x01	; 1
    59e8:	f1 f7       	brne	.-4      	; 0x59e6 <MENU_vidWaitAndRecieve+0x106>
    59ea:	9a 83       	std	Y+2, r25	; 0x02
    59ec:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(250);
		if (SPI_u8RecievedValue() == Copy_u8ValueToWaitFor)
    59ee:	0e 94 20 06 	call	0xc40	; 0xc40 <SPI_u8RecievedValue>
    59f2:	98 2f       	mov	r25, r24
    59f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    59f6:	98 17       	cp	r25, r24
    59f8:	09 f0       	breq	.+2      	; 0x59fc <MENU_vidWaitAndRecieve+0x11c>
    59fa:	83 cf       	rjmp	.-250    	; 0x5902 <MENU_vidWaitAndRecieve+0x22>
			break;
	}
	DIO_enuSetPinValue(DIO_u8_PORTB, DIO_u8_PIN1, DIO_u8_HIGH);
    59fc:	81 e0       	ldi	r24, 0x01	; 1
    59fe:	61 e0       	ldi	r22, 0x01	; 1
    5a00:	41 e0       	ldi	r20, 0x01	; 1
    5a02:	0e 94 51 09 	call	0x12a2	; 0x12a2 <DIO_enuSetPinValue>
}
    5a06:	60 96       	adiw	r28, 0x10	; 16
    5a08:	0f b6       	in	r0, 0x3f	; 63
    5a0a:	f8 94       	cli
    5a0c:	de bf       	out	0x3e, r29	; 62
    5a0e:	0f be       	out	0x3f, r0	; 63
    5a10:	cd bf       	out	0x3d, r28	; 61
    5a12:	cf 91       	pop	r28
    5a14:	df 91       	pop	r29
    5a16:	08 95       	ret

00005a18 <FireAlarm>:
void FireAlarm(void)
{
    5a18:	df 93       	push	r29
    5a1a:	cf 93       	push	r28
    5a1c:	cd b7       	in	r28, 0x3d	; 61
    5a1e:	de b7       	in	r29, 0x3e	; 62
    5a20:	2e 97       	sbiw	r28, 0x0e	; 14
    5a22:	0f b6       	in	r0, 0x3f	; 63
    5a24:	f8 94       	cli
    5a26:	de bf       	out	0x3e, r29	; 62
    5a28:	0f be       	out	0x3f, r0	; 63
    5a2a:	cd bf       	out	0x3d, r28	; 61
	CallEmergancy();
    5a2c:	0e 94 cd 19 	call	0x339a	; 0x339a <CallEmergancy>
	ReleaseBuzzer();
    5a30:	0e 94 c9 2b 	call	0x5792	; 0x5792 <ReleaseBuzzer>
	LCD_Clear_Display();
    5a34:	0e 94 1c 14 	call	0x2838	; 0x2838 <LCD_Clear_Display>
	LCD_enuSendString("Fire Alarm");
    5a38:	8d e0       	ldi	r24, 0x0D	; 13
    5a3a:	93 e0       	ldi	r25, 0x03	; 3
    5a3c:	0e 94 f8 11 	call	0x23f0	; 0x23f0 <LCD_enuSendString>
    5a40:	80 e0       	ldi	r24, 0x00	; 0
    5a42:	90 e0       	ldi	r25, 0x00	; 0
    5a44:	aa e7       	ldi	r26, 0x7A	; 122
    5a46:	b4 e4       	ldi	r27, 0x44	; 68
    5a48:	8b 87       	std	Y+11, r24	; 0x0b
    5a4a:	9c 87       	std	Y+12, r25	; 0x0c
    5a4c:	ad 87       	std	Y+13, r26	; 0x0d
    5a4e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a50:	6b 85       	ldd	r22, Y+11	; 0x0b
    5a52:	7c 85       	ldd	r23, Y+12	; 0x0c
    5a54:	8d 85       	ldd	r24, Y+13	; 0x0d
    5a56:	9e 85       	ldd	r25, Y+14	; 0x0e
    5a58:	20 e0       	ldi	r18, 0x00	; 0
    5a5a:	30 e0       	ldi	r19, 0x00	; 0
    5a5c:	4a e7       	ldi	r20, 0x7A	; 122
    5a5e:	55 e4       	ldi	r21, 0x45	; 69
    5a60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a64:	dc 01       	movw	r26, r24
    5a66:	cb 01       	movw	r24, r22
    5a68:	8f 83       	std	Y+7, r24	; 0x07
    5a6a:	98 87       	std	Y+8, r25	; 0x08
    5a6c:	a9 87       	std	Y+9, r26	; 0x09
    5a6e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5a70:	6f 81       	ldd	r22, Y+7	; 0x07
    5a72:	78 85       	ldd	r23, Y+8	; 0x08
    5a74:	89 85       	ldd	r24, Y+9	; 0x09
    5a76:	9a 85       	ldd	r25, Y+10	; 0x0a
    5a78:	20 e0       	ldi	r18, 0x00	; 0
    5a7a:	30 e0       	ldi	r19, 0x00	; 0
    5a7c:	40 e8       	ldi	r20, 0x80	; 128
    5a7e:	5f e3       	ldi	r21, 0x3F	; 63
    5a80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5a84:	88 23       	and	r24, r24
    5a86:	2c f4       	brge	.+10     	; 0x5a92 <FireAlarm+0x7a>
		__ticks = 1;
    5a88:	81 e0       	ldi	r24, 0x01	; 1
    5a8a:	90 e0       	ldi	r25, 0x00	; 0
    5a8c:	9e 83       	std	Y+6, r25	; 0x06
    5a8e:	8d 83       	std	Y+5, r24	; 0x05
    5a90:	3f c0       	rjmp	.+126    	; 0x5b10 <FireAlarm+0xf8>
	else if (__tmp > 65535)
    5a92:	6f 81       	ldd	r22, Y+7	; 0x07
    5a94:	78 85       	ldd	r23, Y+8	; 0x08
    5a96:	89 85       	ldd	r24, Y+9	; 0x09
    5a98:	9a 85       	ldd	r25, Y+10	; 0x0a
    5a9a:	20 e0       	ldi	r18, 0x00	; 0
    5a9c:	3f ef       	ldi	r19, 0xFF	; 255
    5a9e:	4f e7       	ldi	r20, 0x7F	; 127
    5aa0:	57 e4       	ldi	r21, 0x47	; 71
    5aa2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5aa6:	18 16       	cp	r1, r24
    5aa8:	4c f5       	brge	.+82     	; 0x5afc <FireAlarm+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5aaa:	6b 85       	ldd	r22, Y+11	; 0x0b
    5aac:	7c 85       	ldd	r23, Y+12	; 0x0c
    5aae:	8d 85       	ldd	r24, Y+13	; 0x0d
    5ab0:	9e 85       	ldd	r25, Y+14	; 0x0e
    5ab2:	20 e0       	ldi	r18, 0x00	; 0
    5ab4:	30 e0       	ldi	r19, 0x00	; 0
    5ab6:	40 e2       	ldi	r20, 0x20	; 32
    5ab8:	51 e4       	ldi	r21, 0x41	; 65
    5aba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5abe:	dc 01       	movw	r26, r24
    5ac0:	cb 01       	movw	r24, r22
    5ac2:	bc 01       	movw	r22, r24
    5ac4:	cd 01       	movw	r24, r26
    5ac6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5aca:	dc 01       	movw	r26, r24
    5acc:	cb 01       	movw	r24, r22
    5ace:	9e 83       	std	Y+6, r25	; 0x06
    5ad0:	8d 83       	std	Y+5, r24	; 0x05
    5ad2:	0f c0       	rjmp	.+30     	; 0x5af2 <FireAlarm+0xda>
    5ad4:	80 e9       	ldi	r24, 0x90	; 144
    5ad6:	91 e0       	ldi	r25, 0x01	; 1
    5ad8:	9c 83       	std	Y+4, r25	; 0x04
    5ada:	8b 83       	std	Y+3, r24	; 0x03
    5adc:	8b 81       	ldd	r24, Y+3	; 0x03
    5ade:	9c 81       	ldd	r25, Y+4	; 0x04
    5ae0:	01 97       	sbiw	r24, 0x01	; 1
    5ae2:	f1 f7       	brne	.-4      	; 0x5ae0 <FireAlarm+0xc8>
    5ae4:	9c 83       	std	Y+4, r25	; 0x04
    5ae6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5ae8:	8d 81       	ldd	r24, Y+5	; 0x05
    5aea:	9e 81       	ldd	r25, Y+6	; 0x06
    5aec:	01 97       	sbiw	r24, 0x01	; 1
    5aee:	9e 83       	std	Y+6, r25	; 0x06
    5af0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5af2:	8d 81       	ldd	r24, Y+5	; 0x05
    5af4:	9e 81       	ldd	r25, Y+6	; 0x06
    5af6:	00 97       	sbiw	r24, 0x00	; 0
    5af8:	69 f7       	brne	.-38     	; 0x5ad4 <FireAlarm+0xbc>
    5afa:	14 c0       	rjmp	.+40     	; 0x5b24 <FireAlarm+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5afc:	6f 81       	ldd	r22, Y+7	; 0x07
    5afe:	78 85       	ldd	r23, Y+8	; 0x08
    5b00:	89 85       	ldd	r24, Y+9	; 0x09
    5b02:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b08:	dc 01       	movw	r26, r24
    5b0a:	cb 01       	movw	r24, r22
    5b0c:	9e 83       	std	Y+6, r25	; 0x06
    5b0e:	8d 83       	std	Y+5, r24	; 0x05
    5b10:	8d 81       	ldd	r24, Y+5	; 0x05
    5b12:	9e 81       	ldd	r25, Y+6	; 0x06
    5b14:	9a 83       	std	Y+2, r25	; 0x02
    5b16:	89 83       	std	Y+1, r24	; 0x01
    5b18:	89 81       	ldd	r24, Y+1	; 0x01
    5b1a:	9a 81       	ldd	r25, Y+2	; 0x02
    5b1c:	01 97       	sbiw	r24, 0x01	; 1
    5b1e:	f1 f7       	brne	.-4      	; 0x5b1c <FireAlarm+0x104>
    5b20:	9a 83       	std	Y+2, r25	; 0x02
    5b22:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);

}
    5b24:	2e 96       	adiw	r28, 0x0e	; 14
    5b26:	0f b6       	in	r0, 0x3f	; 63
    5b28:	f8 94       	cli
    5b2a:	de bf       	out	0x3e, r29	; 62
    5b2c:	0f be       	out	0x3f, r0	; 63
    5b2e:	cd bf       	out	0x3d, r28	; 61
    5b30:	cf 91       	pop	r28
    5b32:	df 91       	pop	r29
    5b34:	08 95       	ret

00005b36 <main>:
 */
//=====================================================[MasterUnit]=============================================
#include"SECURITY_APP/SECURITY_APP_int.h"
#include"MENU_APP/MENU_int.h"
void main()
{
    5b36:	df 93       	push	r29
    5b38:	cf 93       	push	r28
    5b3a:	cd b7       	in	r28, 0x3d	; 61
    5b3c:	de b7       	in	r29, 0x3e	; 62
	APP_voidInit();
    5b3e:	0e 94 e5 19 	call	0x33ca	; 0x33ca <APP_voidInit>
	// super loop
	while (TRUE)
	{
		SECURITY_APP_vidStartCheck();
    5b42:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <SECURITY_APP_vidStartCheck>
		MENU_vidControlMenu();
    5b46:	0e 94 ff 19 	call	0x33fe	; 0x33fe <MENU_vidControlMenu>
    5b4a:	fb cf       	rjmp	.-10     	; 0x5b42 <main+0xc>

00005b4c <__udivmodsi4>:
    5b4c:	a1 e2       	ldi	r26, 0x21	; 33
    5b4e:	1a 2e       	mov	r1, r26
    5b50:	aa 1b       	sub	r26, r26
    5b52:	bb 1b       	sub	r27, r27
    5b54:	fd 01       	movw	r30, r26
    5b56:	0d c0       	rjmp	.+26     	; 0x5b72 <__udivmodsi4_ep>

00005b58 <__udivmodsi4_loop>:
    5b58:	aa 1f       	adc	r26, r26
    5b5a:	bb 1f       	adc	r27, r27
    5b5c:	ee 1f       	adc	r30, r30
    5b5e:	ff 1f       	adc	r31, r31
    5b60:	a2 17       	cp	r26, r18
    5b62:	b3 07       	cpc	r27, r19
    5b64:	e4 07       	cpc	r30, r20
    5b66:	f5 07       	cpc	r31, r21
    5b68:	20 f0       	brcs	.+8      	; 0x5b72 <__udivmodsi4_ep>
    5b6a:	a2 1b       	sub	r26, r18
    5b6c:	b3 0b       	sbc	r27, r19
    5b6e:	e4 0b       	sbc	r30, r20
    5b70:	f5 0b       	sbc	r31, r21

00005b72 <__udivmodsi4_ep>:
    5b72:	66 1f       	adc	r22, r22
    5b74:	77 1f       	adc	r23, r23
    5b76:	88 1f       	adc	r24, r24
    5b78:	99 1f       	adc	r25, r25
    5b7a:	1a 94       	dec	r1
    5b7c:	69 f7       	brne	.-38     	; 0x5b58 <__udivmodsi4_loop>
    5b7e:	60 95       	com	r22
    5b80:	70 95       	com	r23
    5b82:	80 95       	com	r24
    5b84:	90 95       	com	r25
    5b86:	9b 01       	movw	r18, r22
    5b88:	ac 01       	movw	r20, r24
    5b8a:	bd 01       	movw	r22, r26
    5b8c:	cf 01       	movw	r24, r30
    5b8e:	08 95       	ret

00005b90 <__prologue_saves__>:
    5b90:	2f 92       	push	r2
    5b92:	3f 92       	push	r3
    5b94:	4f 92       	push	r4
    5b96:	5f 92       	push	r5
    5b98:	6f 92       	push	r6
    5b9a:	7f 92       	push	r7
    5b9c:	8f 92       	push	r8
    5b9e:	9f 92       	push	r9
    5ba0:	af 92       	push	r10
    5ba2:	bf 92       	push	r11
    5ba4:	cf 92       	push	r12
    5ba6:	df 92       	push	r13
    5ba8:	ef 92       	push	r14
    5baa:	ff 92       	push	r15
    5bac:	0f 93       	push	r16
    5bae:	1f 93       	push	r17
    5bb0:	cf 93       	push	r28
    5bb2:	df 93       	push	r29
    5bb4:	cd b7       	in	r28, 0x3d	; 61
    5bb6:	de b7       	in	r29, 0x3e	; 62
    5bb8:	ca 1b       	sub	r28, r26
    5bba:	db 0b       	sbc	r29, r27
    5bbc:	0f b6       	in	r0, 0x3f	; 63
    5bbe:	f8 94       	cli
    5bc0:	de bf       	out	0x3e, r29	; 62
    5bc2:	0f be       	out	0x3f, r0	; 63
    5bc4:	cd bf       	out	0x3d, r28	; 61
    5bc6:	09 94       	ijmp

00005bc8 <__epilogue_restores__>:
    5bc8:	2a 88       	ldd	r2, Y+18	; 0x12
    5bca:	39 88       	ldd	r3, Y+17	; 0x11
    5bcc:	48 88       	ldd	r4, Y+16	; 0x10
    5bce:	5f 84       	ldd	r5, Y+15	; 0x0f
    5bd0:	6e 84       	ldd	r6, Y+14	; 0x0e
    5bd2:	7d 84       	ldd	r7, Y+13	; 0x0d
    5bd4:	8c 84       	ldd	r8, Y+12	; 0x0c
    5bd6:	9b 84       	ldd	r9, Y+11	; 0x0b
    5bd8:	aa 84       	ldd	r10, Y+10	; 0x0a
    5bda:	b9 84       	ldd	r11, Y+9	; 0x09
    5bdc:	c8 84       	ldd	r12, Y+8	; 0x08
    5bde:	df 80       	ldd	r13, Y+7	; 0x07
    5be0:	ee 80       	ldd	r14, Y+6	; 0x06
    5be2:	fd 80       	ldd	r15, Y+5	; 0x05
    5be4:	0c 81       	ldd	r16, Y+4	; 0x04
    5be6:	1b 81       	ldd	r17, Y+3	; 0x03
    5be8:	aa 81       	ldd	r26, Y+2	; 0x02
    5bea:	b9 81       	ldd	r27, Y+1	; 0x01
    5bec:	ce 0f       	add	r28, r30
    5bee:	d1 1d       	adc	r29, r1
    5bf0:	0f b6       	in	r0, 0x3f	; 63
    5bf2:	f8 94       	cli
    5bf4:	de bf       	out	0x3e, r29	; 62
    5bf6:	0f be       	out	0x3f, r0	; 63
    5bf8:	cd bf       	out	0x3d, r28	; 61
    5bfa:	ed 01       	movw	r28, r26
    5bfc:	08 95       	ret

00005bfe <_exit>:
    5bfe:	f8 94       	cli

00005c00 <__stop_program>:
    5c00:	ff cf       	rjmp	.-2      	; 0x5c00 <__stop_program>
